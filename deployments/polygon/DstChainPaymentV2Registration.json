{
  "address": "0xAf3491744163ccfD3Dd0fE61a8A1c5fBb6E8c8eA",
  "abi": [
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint8",
          "name": "version",
          "type": "uint8"
        }
      ],
      "name": "Initialized",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "value",
          "type": "uint256"
        }
      ],
      "name": "NativeWithdrawal",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "provider",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "bytes32",
          "name": "account",
          "type": "bytes32"
        },
        {
          "components": [
            {
              "internalType": "enum ResourceData.ResourceType",
              "name": "resourceType",
              "type": "uint8"
            },
            {
              "internalType": "uint256[]",
              "name": "values",
              "type": "uint256[]"
            }
          ],
          "indexed": false,
          "internalType": "struct ResourceData.ValuePayload[]",
          "name": "payloads",
          "type": "tuple[]"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "value",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "nonce",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "Paid",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "Paused",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "PauserAdded",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "PauserRemoved",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "contract IRouter",
          "name": "router",
          "type": "address"
        }
      ],
      "name": "RouterUpdated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "Unpaused",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "contract IERC20Upgradeable",
          "name": "token",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "value",
          "type": "uint256"
        }
      ],
      "name": "Withdrawal",
      "type": "event"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "addPauser",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "provider",
          "type": "address"
        }
      ],
      "name": "balanceOf",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes",
          "name": "message",
          "type": "bytes"
        }
      ],
      "name": "celerExec",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes",
          "name": "message",
          "type": "bytes"
        }
      ],
      "name": "decodeMessage",
      "outputs": [
        {
          "internalType": "address",
          "name": "provider",
          "type": "address"
        },
        {
          "internalType": "bytes32",
          "name": "account",
          "type": "bytes32"
        },
        {
          "components": [
            {
              "internalType": "enum ResourceData.ResourceType",
              "name": "resourceType",
              "type": "uint8"
            },
            {
              "internalType": "uint256[]",
              "name": "values",
              "type": "uint256[]"
            }
          ],
          "internalType": "struct ResourceData.ValuePayload[]",
          "name": "payloads",
          "type": "tuple[]"
        },
        {
          "internalType": "uint256",
          "name": "nonce",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "internalType": "bytes",
          "name": "signature",
          "type": "bytes"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "provider",
          "type": "address"
        },
        {
          "internalType": "bytes32",
          "name": "account",
          "type": "bytes32"
        }
      ],
      "name": "fee",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "provider",
          "type": "address"
        },
        {
          "internalType": "enum ResourceData.ResourceType",
          "name": "resourceType",
          "type": "uint8"
        },
        {
          "internalType": "uint256",
          "name": "value",
          "type": "uint256"
        }
      ],
      "name": "getAmountOf",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "provider",
          "type": "address"
        },
        {
          "internalType": "enum ResourceData.ResourceType",
          "name": "resourceType",
          "type": "uint8"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "getValueOf",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "provider",
          "type": "address"
        },
        {
          "internalType": "bytes32",
          "name": "account",
          "type": "bytes32"
        },
        {
          "internalType": "uint256",
          "name": "nonce",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "hashTypedDataV4ForVoucher",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "provider",
          "type": "address"
        },
        {
          "internalType": "bytes32",
          "name": "account",
          "type": "bytes32"
        },
        {
          "internalType": "uint256",
          "name": "nonce",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "hashVoucherTypes",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "name",
          "type": "string"
        },
        {
          "internalType": "string",
          "name": "version",
          "type": "string"
        },
        {
          "internalType": "string",
          "name": "types",
          "type": "string"
        }
      ],
      "name": "initializeEIP712",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "provider",
          "type": "address"
        },
        {
          "internalType": "bytes32",
          "name": "account",
          "type": "bytes32"
        },
        {
          "internalType": "uint256",
          "name": "storageFee",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "expirationFee",
          "type": "uint256"
        }
      ],
      "name": "ipfsAllocations",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "expiration",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "provider",
          "type": "address"
        },
        {
          "internalType": "bytes32",
          "name": "account",
          "type": "bytes32"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "expiration",
          "type": "uint256"
        }
      ],
      "name": "ipfsAlloctionsFee",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "storageFee",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "expirationFee",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "isPauser",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "contract IERC20Upgradeable",
          "name": "token",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "value",
          "type": "uint256"
        }
      ],
      "name": "ownerWithdrawERC20",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address payable",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "value",
          "type": "uint256"
        }
      ],
      "name": "ownerWithdrawNative",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "pause",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "paused",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "pausers",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "provider",
          "type": "address"
        },
        {
          "internalType": "bytes32",
          "name": "account",
          "type": "bytes32"
        },
        {
          "components": [
            {
              "internalType": "enum ResourceData.ResourceType",
              "name": "resourceType",
              "type": "uint8"
            },
            {
              "internalType": "uint256[]",
              "name": "values",
              "type": "uint256[]"
            }
          ],
          "internalType": "struct ResourceData.ValuePayload[]",
          "name": "payloads",
          "type": "tuple[]"
        },
        {
          "internalType": "uint256",
          "name": "nonce",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "internalType": "bytes",
          "name": "signature",
          "type": "bytes"
        }
      ],
      "name": "pay",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "value",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "provider",
          "type": "address"
        },
        {
          "internalType": "bytes32",
          "name": "account",
          "type": "bytes32"
        },
        {
          "components": [
            {
              "internalType": "enum ResourceData.ResourceType",
              "name": "resourceType",
              "type": "uint8"
            },
            {
              "internalType": "uint256[]",
              "name": "values",
              "type": "uint256[]"
            }
          ],
          "internalType": "struct ResourceData.ValuePayload[]",
          "name": "payloads",
          "type": "tuple[]"
        },
        {
          "internalType": "uint256",
          "name": "nonce",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "internalType": "bytes",
          "name": "voucherSig",
          "type": "bytes"
        },
        {
          "internalType": "bytes",
          "name": "registrationSig",
          "type": "bytes"
        }
      ],
      "name": "payWithRegistration",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "value",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "provider",
          "type": "address"
        },
        {
          "internalType": "enum ResourceData.ResourceType",
          "name": "resourceType",
          "type": "uint8"
        }
      ],
      "name": "priceOf",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "provider",
          "type": "address"
        }
      ],
      "name": "providerBalance",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "removePauser",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "renounceOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "renouncePauser",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "router",
      "outputs": [
        {
          "internalType": "contract IRouter",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "unpause",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "voucherTypedHash",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "vouchers",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    }
  ],
  "transactionHash": "0x383a0ff01b994133a95b25e5d70b0d914aafac60c2bec20499f8f0761030e281",
  "receipt": {
    "to": null,
    "from": "0xe5bab2D79EB833FA25906Cd90540339C9aB8AE70",
    "contractAddress": "0xAf3491744163ccfD3Dd0fE61a8A1c5fBb6E8c8eA",
    "transactionIndex": 47,
    "gasUsed": "3758556",
    "logsBloom": "0x
    "blockHash": "0x065dcf5bb377a71d90c77413ab0284fb5d971e077b65ed98eae512d9ebcf8bca",
    "transactionHash": "0x383a0ff01b994133a95b25e5d70b0d914aafac60c2bec20499f8f0761030e281",
    "logs": [
      {
        "transactionIndex": 47,
        "blockNumber": 41136640,
        "transactionHash": "0x383a0ff01b994133a95b25e5d70b0d914aafac60c2bec20499f8f0761030e281",
        "address": "0x0000000000000000000000000000000000001010",
        "topics": [
          "0x4dfe1bbbcf077ddc3e01291eea2d5c70c2b422b415d95645b9adcfd678cb1d63",
          "0x0000000000000000000000000000000000000000000000000000000000001010",
          "0x000000000000000000000000e5bab2d79eb833fa25906cd90540339c9ab8ae70",
          "0x000000000000000000000000f0245f6251bef9447a08766b9da2b07b28ad80b0"
        ],
        "data": "0x00000000000000000000000000000000000000000000000003f0052b4535b7a0000000000000000000000000000000000000000000000000dc18f0e8c1782b66000000000000000000000000000000000000000000000058f854f03dfa3e3810000000000000000000000000000000000000000000000000d828ebbd7c4273c6000000000000000000000000000000000000000000000058fc44f5693f73efb0",
        "logIndex": 177,
        "blockHash": "0x065dcf5bb377a71d90c77413ab0284fb5d971e077b65ed98eae512d9ebcf8bca"
      }
    ],
    "blockNumber": 41136640,
    "cumulativeGasUsed": "9805373",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "numDeployments": 1,
  "solcInputHash": "060038dc8f02548c54f8d43408b5c7f5",
  "metadata": "{\"compiler\":{\"version\":\"0.8.9+commit.e5eed63a\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"version\",\"type\":\"uint8\"}],\"name\":\"Initialized\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"NativeWithdrawal\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"provider\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"account\",\"type\":\"bytes32\"},{\"components\":[{\"internalType\":\"enum ResourceData.ResourceType\",\"name\":\"resourceType\",\"type\":\"uint8\"},{\"internalType\":\"uint256[]\",\"name\":\"values\",\"type\":\"uint256[]\"}],\"indexed\":false,\"internalType\":\"struct ResourceData.ValuePayload[]\",\"name\":\"payloads\",\"type\":\"tuple[]\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"nonce\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Paid\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"Paused\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"PauserAdded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"PauserRemoved\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"contract IRouter\",\"name\":\"router\",\"type\":\"address\"}],\"name\":\"RouterUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"Unpaused\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"contract IERC20Upgradeable\",\"name\":\"token\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Withdrawal\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"addPauser\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"provider\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"message\",\"type\":\"bytes\"}],\"name\":\"celerExec\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"message\",\"type\":\"bytes\"}],\"name\":\"decodeMessage\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"provider\",\"type\":\"address\"},{\"internalType\":\"bytes32\",\"name\":\"account\",\"type\":\"bytes32\"},{\"components\":[{\"internalType\":\"enum ResourceData.ResourceType\",\"name\":\"resourceType\",\"type\":\"uint8\"},{\"internalType\":\"uint256[]\",\"name\":\"values\",\"type\":\"uint256[]\"}],\"internalType\":\"struct ResourceData.ValuePayload[]\",\"name\":\"payloads\",\"type\":\"tuple[]\"},{\"internalType\":\"uint256\",\"name\":\"nonce\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"signature\",\"type\":\"bytes\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"provider\",\"type\":\"address\"},{\"internalType\":\"bytes32\",\"name\":\"account\",\"type\":\"bytes32\"}],\"name\":\"fee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"provider\",\"type\":\"address\"},{\"internalType\":\"enum ResourceData.ResourceType\",\"name\":\"resourceType\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"getAmountOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"provider\",\"type\":\"address\"},{\"internalType\":\"enum ResourceData.ResourceType\",\"name\":\"resourceType\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"getValueOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"provider\",\"type\":\"address\"},{\"internalType\":\"bytes32\",\"name\":\"account\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"nonce\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"hashTypedDataV4ForVoucher\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"provider\",\"type\":\"address\"},{\"internalType\":\"bytes32\",\"name\":\"account\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"nonce\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"hashVoucherTypes\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"version\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"types\",\"type\":\"string\"}],\"name\":\"initializeEIP712\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"provider\",\"type\":\"address\"},{\"internalType\":\"bytes32\",\"name\":\"account\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"storageFee\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"expirationFee\",\"type\":\"uint256\"}],\"name\":\"ipfsAllocations\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"expiration\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"provider\",\"type\":\"address\"},{\"internalType\":\"bytes32\",\"name\":\"account\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"expiration\",\"type\":\"uint256\"}],\"name\":\"ipfsAlloctionsFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"storageFee\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"expirationFee\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"isPauser\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IERC20Upgradeable\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"ownerWithdrawERC20\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address payable\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"ownerWithdrawNative\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pause\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"paused\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"pausers\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"provider\",\"type\":\"address\"},{\"internalType\":\"bytes32\",\"name\":\"account\",\"type\":\"bytes32\"},{\"components\":[{\"internalType\":\"enum ResourceData.ResourceType\",\"name\":\"resourceType\",\"type\":\"uint8\"},{\"internalType\":\"uint256[]\",\"name\":\"values\",\"type\":\"uint256[]\"}],\"internalType\":\"struct ResourceData.ValuePayload[]\",\"name\":\"payloads\",\"type\":\"tuple[]\"},{\"internalType\":\"uint256\",\"name\":\"nonce\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"signature\",\"type\":\"bytes\"}],\"name\":\"pay\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"provider\",\"type\":\"address\"},{\"internalType\":\"bytes32\",\"name\":\"account\",\"type\":\"bytes32\"},{\"components\":[{\"internalType\":\"enum ResourceData.ResourceType\",\"name\":\"resourceType\",\"type\":\"uint8\"},{\"internalType\":\"uint256[]\",\"name\":\"values\",\"type\":\"uint256[]\"}],\"internalType\":\"struct ResourceData.ValuePayload[]\",\"name\":\"payloads\",\"type\":\"tuple[]\"},{\"internalType\":\"uint256\",\"name\":\"nonce\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"voucherSig\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"registrationSig\",\"type\":\"bytes\"}],\"name\":\"payWithRegistration\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"provider\",\"type\":\"address\"},{\"internalType\":\"enum ResourceData.ResourceType\",\"name\":\"resourceType\",\"type\":\"uint8\"}],\"name\":\"priceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"provider\",\"type\":\"address\"}],\"name\":\"providerBalance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"removePauser\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renouncePauser\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"router\",\"outputs\":[{\"internalType\":\"contract IRouter\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"unpause\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"voucherTypedHash\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"vouchers\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"addPauser(address)\":{\"details\":\"add a pauser for the contract\",\"params\":{\"account\":\"address\"}},\"balanceOf(address)\":{\"details\":\"return balance of provider\",\"params\":{\"provider\":\"provider address\"},\"returns\":{\"_0\":\"balance of provider\"}},\"celerExec(bytes)\":{\"details\":\"pay from source chain only called by message receiver\",\"params\":{\"message\":\"payment payload message bytes\"}},\"getAmountOf(address,uint8,uint256)\":{\"details\":\"return resource amount with value\",\"params\":{\"provider\":\"provider address\",\"resourceType\":\"resource type\",\"value\":\"token value\"},\"returns\":{\"_0\":\"resource amount\"}},\"getValueOf(address,uint8,uint256)\":{\"details\":\"return value of amount resource\",\"params\":{\"amount\":\"resource amount\",\"provider\":\"provider address\",\"resourceType\":\"resource type\"},\"returns\":{\"_0\":\"token value\"}},\"ipfsAllocations(address,bytes32,uint256,uint256)\":{\"details\":\"calculate ipfs storage and expiration with storage fee and expiration fee\",\"params\":{\"account\":\"user account\",\"expirationFee\":\"expiration fee\",\"provider\":\"provider address\",\"storageFee\":\"storage fee\"},\"returns\":{\"amount\":\"ipfs storage amount\",\"expiration\":\"ipfs expiration(in seconds)\"}},\"ipfsAlloctionsFee(address,bytes32,uint256,uint256)\":{\"details\":\"calculate fee for ipfs storage and expiration\",\"params\":{\"account\":\"user account\",\"amount\":\"ipfs storage amount\",\"expiration\":\"ipfs expiration(in seconds)\",\"provider\":\"provider address\"},\"returns\":{\"expirationFee\":\"ipfs expiration fee\",\"storageFee\":\"ipfs storage fee\"}},\"isPauser(address)\":{\"details\":\"whether the account is the contract pauser\",\"params\":{\"account\":\"address\"},\"returns\":{\"_0\":\"whether account is a pauser\"}},\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"ownerWithdrawERC20(address,address,uint256)\":{\"details\":\"withdraw token\",\"params\":{\"to\":\"receiver address\",\"token\":\"token address\",\"value\":\"token value\"}},\"ownerWithdrawNative(address,uint256)\":{\"details\":\"withdraw ETH\",\"params\":{\"to\":\"receiver address\",\"value\":\"token value\"}},\"pause()\":{\"details\":\"pause the contract\"},\"paused()\":{\"details\":\"Returns true if the contract is paused, and false otherwise.\"},\"pay(address,bytes32,(uint8,uint256[])[],uint256,uint256,bytes)\":{\"details\":\"pay on dst chain\",\"params\":{\"account\":\"user account\",\"amount\":\"voucher amount\",\"nonce\":\"voucher nonce\",\"payloads\":\"payment payloads\",\"provider\":\"provider address\",\"signature\":\"vourcher signature for provider\"},\"returns\":{\"value\":\"total token value\"}},\"priceOf(address,uint8)\":{\"details\":\"return resource price\",\"params\":{\"provider\":\"provider address\",\"resourceType\":\"resource type\"},\"returns\":{\"_0\":\"resource price\"}},\"removePauser(address)\":{\"details\":\"remove a pauser for the contract\",\"params\":{\"account\":\"address\"}},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner.\"},\"renouncePauser()\":{\"details\":\"remove a pauser for the contract\"},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"},\"unpause()\":{\"details\":\"unpause the contract\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/payments/DstChainPaymentV2Registration.sol\":\"DstChainPaymentV2Registration\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"details\":{\"constantOptimizer\":true,\"cse\":true,\"deduplicate\":true,\"inliner\":true,\"jumpdestRemover\":true,\"orderLiterals\":true,\"peephole\":true,\"yul\":false},\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/ContextUpgradeable.sol\\\";\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract OwnableUpgradeable is Initializable, ContextUpgradeable {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    function __Ownable_init() internal onlyInitializing {\\n        __Ownable_init_unchained();\\n    }\\n\\n    function __Ownable_init_unchained() internal onlyInitializing {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[49] private __gap;\\n}\\n\",\"keccak256\":\"0x652fee292f698d8dba81bf287cb71f1682f6483b67ebe601a5f7387dcfc30b34\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/interfaces/IERC20Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (interfaces/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../token/ERC20/IERC20Upgradeable.sol\\\";\\n\",\"keccak256\":\"0xe73087c5001a37cf7186b3709377c7ceb01a0d38fb908723d1464cea66b4958c\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (proxy/utils/Initializable.sol)\\n\\npragma solidity ^0.8.2;\\n\\nimport \\\"../../utils/AddressUpgradeable.sol\\\";\\n\\n/**\\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\\n * behind a proxy. Since proxied contracts do not make use of a constructor, it's common to move constructor logic to an\\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\\n *\\n * The initialization functions use a version number. Once a version number is used, it is consumed and cannot be\\n * reused. This mechanism prevents re-execution of each \\\"step\\\" but allows the creation of new initialization steps in\\n * case an upgrade adds a module that needs to be initialized.\\n *\\n * For example:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```\\n * contract MyToken is ERC20Upgradeable {\\n *     function initialize() initializer public {\\n *         __ERC20_init(\\\"MyToken\\\", \\\"MTK\\\");\\n *     }\\n * }\\n * contract MyTokenV2 is MyToken, ERC20PermitUpgradeable {\\n *     function initializeV2() reinitializer(2) public {\\n *         __ERC20Permit_init(\\\"MyToken\\\");\\n *     }\\n * }\\n * ```\\n *\\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\\n * possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}.\\n *\\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\\n *\\n * [CAUTION]\\n * ====\\n * Avoid leaving a contract uninitialized.\\n *\\n * An uninitialized contract can be taken over by an attacker. This applies to both a proxy and its implementation\\n * contract, which may impact the proxy. To prevent the implementation contract from being used, you should invoke\\n * the {_disableInitializers} function in the constructor to automatically lock it when it is deployed:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```\\n * /// @custom:oz-upgrades-unsafe-allow constructor\\n * constructor() {\\n *     _disableInitializers();\\n * }\\n * ```\\n * ====\\n */\\nabstract contract Initializable {\\n    /**\\n     * @dev Indicates that the contract has been initialized.\\n     * @custom:oz-retyped-from bool\\n     */\\n    uint8 private _initialized;\\n\\n    /**\\n     * @dev Indicates that the contract is in the process of being initialized.\\n     */\\n    bool private _initializing;\\n\\n    /**\\n     * @dev Triggered when the contract has been initialized or reinitialized.\\n     */\\n    event Initialized(uint8 version);\\n\\n    /**\\n     * @dev A modifier that defines a protected initializer function that can be invoked at most once. In its scope,\\n     * `onlyInitializing` functions can be used to initialize parent contracts. Equivalent to `reinitializer(1)`.\\n     */\\n    modifier initializer() {\\n        bool isTopLevelCall = _setInitializedVersion(1);\\n        if (isTopLevelCall) {\\n            _initializing = true;\\n        }\\n        _;\\n        if (isTopLevelCall) {\\n            _initializing = false;\\n            emit Initialized(1);\\n        }\\n    }\\n\\n    /**\\n     * @dev A modifier that defines a protected reinitializer function that can be invoked at most once, and only if the\\n     * contract hasn't been initialized to a greater version before. In its scope, `onlyInitializing` functions can be\\n     * used to initialize parent contracts.\\n     *\\n     * `initializer` is equivalent to `reinitializer(1)`, so a reinitializer may be used after the original\\n     * initialization step. This is essential to configure modules that are added through upgrades and that require\\n     * initialization.\\n     *\\n     * Note that versions can jump in increments greater than 1; this implies that if multiple reinitializers coexist in\\n     * a contract, executing them in the right order is up to the developer or operator.\\n     */\\n    modifier reinitializer(uint8 version) {\\n        bool isTopLevelCall = _setInitializedVersion(version);\\n        if (isTopLevelCall) {\\n            _initializing = true;\\n        }\\n        _;\\n        if (isTopLevelCall) {\\n            _initializing = false;\\n            emit Initialized(version);\\n        }\\n    }\\n\\n    /**\\n     * @dev Modifier to protect an initialization function so that it can only be invoked by functions with the\\n     * {initializer} and {reinitializer} modifiers, directly or indirectly.\\n     */\\n    modifier onlyInitializing() {\\n        require(_initializing, \\\"Initializable: contract is not initializing\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Locks the contract, preventing any future reinitialization. This cannot be part of an initializer call.\\n     * Calling this in the constructor of a contract will prevent that contract from being initialized or reinitialized\\n     * to any version. It is recommended to use this to lock implementation contracts that are designed to be called\\n     * through proxies.\\n     */\\n    function _disableInitializers() internal virtual {\\n        _setInitializedVersion(type(uint8).max);\\n    }\\n\\n    function _setInitializedVersion(uint8 version) private returns (bool) {\\n        // If the contract is initializing we ignore whether _initialized is set in order to support multiple\\n        // inheritance patterns, but we only do this in the context of a constructor, and for the lowest level\\n        // of initializers, because in other contexts the contract may have been reentered.\\n        if (_initializing) {\\n            require(\\n                version == 1 && !AddressUpgradeable.isContract(address(this)),\\n                \\\"Initializable: contract is already initialized\\\"\\n            );\\n            return false;\\n        } else {\\n            require(_initialized < version, \\\"Initializable: contract is already initialized\\\");\\n            _initialized = version;\\n            return true;\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x7454006cccb737612b00104d2f606d728e2818b778e7e55542f063c614ce46ba\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (security/Pausable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/ContextUpgradeable.sol\\\";\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Contract module which allows children to implement an emergency stop\\n * mechanism that can be triggered by an authorized account.\\n *\\n * This module is used through inheritance. It will make available the\\n * modifiers `whenNotPaused` and `whenPaused`, which can be applied to\\n * the functions of your contract. Note that they will not be pausable by\\n * simply including this module, only once the modifiers are put in place.\\n */\\nabstract contract PausableUpgradeable is Initializable, ContextUpgradeable {\\n    /**\\n     * @dev Emitted when the pause is triggered by `account`.\\n     */\\n    event Paused(address account);\\n\\n    /**\\n     * @dev Emitted when the pause is lifted by `account`.\\n     */\\n    event Unpaused(address account);\\n\\n    bool private _paused;\\n\\n    /**\\n     * @dev Initializes the contract in unpaused state.\\n     */\\n    function __Pausable_init() internal onlyInitializing {\\n        __Pausable_init_unchained();\\n    }\\n\\n    function __Pausable_init_unchained() internal onlyInitializing {\\n        _paused = false;\\n    }\\n\\n    /**\\n     * @dev Returns true if the contract is paused, and false otherwise.\\n     */\\n    function paused() public view virtual returns (bool) {\\n        return _paused;\\n    }\\n\\n    /**\\n     * @dev Modifier to make a function callable only when the contract is not paused.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must not be paused.\\n     */\\n    modifier whenNotPaused() {\\n        require(!paused(), \\\"Pausable: paused\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Modifier to make a function callable only when the contract is paused.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must be paused.\\n     */\\n    modifier whenPaused() {\\n        require(paused(), \\\"Pausable: not paused\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Triggers stopped state.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must not be paused.\\n     */\\n    function _pause() internal virtual whenNotPaused {\\n        _paused = true;\\n        emit Paused(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Returns to normal state.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must be paused.\\n     */\\n    function _unpause() internal virtual whenPaused {\\n        _paused = false;\\n        emit Unpaused(_msgSender());\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[49] private __gap;\\n}\\n\",\"keccak256\":\"0x041af89e5e60b74e1203d5a34614c9de379726f52ecb8cf064cab78b9fdcdf9d\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/security/ReentrancyGuardUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (security/ReentrancyGuard.sol)\\n\\npragma solidity ^0.8.0;\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Contract module that helps prevent reentrant calls to a function.\\n *\\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\\n * available, which can be applied to functions to make sure there are no nested\\n * (reentrant) calls to them.\\n *\\n * Note that because there is a single `nonReentrant` guard, functions marked as\\n * `nonReentrant` may not call one another. This can be worked around by making\\n * those functions `private`, and then adding `external` `nonReentrant` entry\\n * points to them.\\n *\\n * TIP: If you would like to learn more about reentrancy and alternative ways\\n * to protect against it, check out our blog post\\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\\n */\\nabstract contract ReentrancyGuardUpgradeable is Initializable {\\n    // Booleans are more expensive than uint256 or any type that takes up a full\\n    // word because each write operation emits an extra SLOAD to first read the\\n    // slot's contents, replace the bits taken up by the boolean, and then write\\n    // back. This is the compiler's defense against contract upgrades and\\n    // pointer aliasing, and it cannot be disabled.\\n\\n    // The values being non-zero value makes deployment a bit more expensive,\\n    // but in exchange the refund on every call to nonReentrant will be lower in\\n    // amount. Since refunds are capped to a percentage of the total\\n    // transaction's gas, it is best to keep them low in cases like this one, to\\n    // increase the likelihood of the full refund coming into effect.\\n    uint256 private constant _NOT_ENTERED = 1;\\n    uint256 private constant _ENTERED = 2;\\n\\n    uint256 private _status;\\n\\n    function __ReentrancyGuard_init() internal onlyInitializing {\\n        __ReentrancyGuard_init_unchained();\\n    }\\n\\n    function __ReentrancyGuard_init_unchained() internal onlyInitializing {\\n        _status = _NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Prevents a contract from calling itself, directly or indirectly.\\n     * Calling a `nonReentrant` function from another `nonReentrant`\\n     * function is not supported. It is possible to prevent this from happening\\n     * by making the `nonReentrant` function external, and making it call a\\n     * `private` function that does the actual work.\\n     */\\n    modifier nonReentrant() {\\n        // On the first call to nonReentrant, _notEntered will be true\\n        require(_status != _ENTERED, \\\"ReentrancyGuard: reentrant call\\\");\\n\\n        // Any calls to nonReentrant after this point will fail\\n        _status = _ENTERED;\\n\\n        _;\\n\\n        // By storing the original value once again, a refund is triggered (see\\n        // https://eips.ethereum.org/EIPS/eip-2200)\\n        _status = _NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[49] private __gap;\\n}\\n\",\"keccak256\":\"0x8cc03c5ac17e8a7396e487cda41fc1f1dfdb91db7d528e6da84bee3b6dd7e167\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/token/ERC20/IERC20Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20Upgradeable {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) external returns (bool);\\n}\\n\",\"keccak256\":\"0x4e733d3164f73f461eaf9d8087a7ad1ea180bdc8ba0d3d61b0e1ae16d8e63dff\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/token/ERC20/utils/SafeERC20Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/utils/SafeERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20Upgradeable.sol\\\";\\nimport \\\"../../../utils/AddressUpgradeable.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20Upgradeable {\\n    using AddressUpgradeable for address;\\n\\n    function safeTransfer(\\n        IERC20Upgradeable token,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\n    }\\n\\n    function safeTransferFrom(\\n        IERC20Upgradeable token,\\n        address from,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\n    }\\n\\n    /**\\n     * @dev Deprecated. This function has issues similar to the ones found in\\n     * {IERC20-approve}, and its usage is discouraged.\\n     *\\n     * Whenever possible, use {safeIncreaseAllowance} and\\n     * {safeDecreaseAllowance} instead.\\n     */\\n    function safeApprove(\\n        IERC20Upgradeable token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        // safeApprove should only be called when setting an initial allowance,\\n        // or when resetting it to zero. To increase and decrease it, use\\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\\n        require(\\n            (value == 0) || (token.allowance(address(this), spender) == 0),\\n            \\\"SafeERC20: approve from non-zero to non-zero allowance\\\"\\n        );\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\n    }\\n\\n    function safeIncreaseAllowance(\\n        IERC20Upgradeable token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender) + value;\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n\\n    function safeDecreaseAllowance(\\n        IERC20Upgradeable token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        unchecked {\\n            uint256 oldAllowance = token.allowance(address(this), spender);\\n            require(oldAllowance >= value, \\\"SafeERC20: decreased allowance below zero\\\");\\n            uint256 newAllowance = oldAllowance - value;\\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n        }\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IERC20Upgradeable token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\\n        // the target address contains contract code and also asserts for success in the low-level call.\\n\\n        bytes memory returndata = address(token).functionCall(data, \\\"SafeERC20: low-level call failed\\\");\\n        if (returndata.length > 0) {\\n            // Return data is optional\\n            require(abi.decode(returndata, (bool)), \\\"SafeERC20: ERC20 operation did not succeed\\\");\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x3e26a49d2fa5ef8338b8a9467c91e54f417cb07e849b1cc0f4ebc4d2a147938e\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary AddressUpgradeable {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x55cf2bd9fc76704ddcdc19834cd288b7de00fc0f298a40ea16a954ae8991db2d\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract ContextUpgradeable is Initializable {\\n    function __Context_init() internal onlyInitializing {\\n    }\\n\\n    function __Context_init_unchained() internal onlyInitializing {\\n    }\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[50] private __gap;\\n}\\n\",\"keccak256\":\"0x963ea7f0b48b032eef72fe3a7582edf78408d6f834115b9feadd673a4d5bd149\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/StringsUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Strings.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev String operations.\\n */\\nlibrary StringsUpgradeable {\\n    bytes16 private constant _HEX_SYMBOLS = \\\"0123456789abcdef\\\";\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(uint256 value) internal pure returns (string memory) {\\n        // Inspired by OraclizeAPI's implementation - MIT licence\\n        // https://github.com/oraclize/ethereum-api/blob/b42146b063c7d6ee1358846c198246239e9360e8/oraclizeAPI_0.4.25.sol\\n\\n        if (value == 0) {\\n            return \\\"0\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 digits;\\n        while (temp != 0) {\\n            digits++;\\n            temp /= 10;\\n        }\\n        bytes memory buffer = new bytes(digits);\\n        while (value != 0) {\\n            digits -= 1;\\n            buffer[digits] = bytes1(uint8(48 + uint256(value % 10)));\\n            value /= 10;\\n        }\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(uint256 value) internal pure returns (string memory) {\\n        if (value == 0) {\\n            return \\\"0x00\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 length = 0;\\n        while (temp != 0) {\\n            length++;\\n            temp >>= 8;\\n        }\\n        return toHexString(value, length);\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\\n     */\\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\\n        bytes memory buffer = new bytes(2 * length + 2);\\n        buffer[0] = \\\"0\\\";\\n        buffer[1] = \\\"x\\\";\\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\\n            buffer[i] = _HEX_SYMBOLS[value & 0xf];\\n            value >>= 4;\\n        }\\n        require(value == 0, \\\"Strings: hex length insufficient\\\");\\n        return string(buffer);\\n    }\\n}\\n\",\"keccak256\":\"0x398d3323c1932a5986bf36be7c57593e121e69d5db5b6574b4ee0d031443de37\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/cryptography/ECDSAUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (utils/cryptography/ECDSA.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../StringsUpgradeable.sol\\\";\\n\\n/**\\n * @dev Elliptic Curve Digital Signature Algorithm (ECDSA) operations.\\n *\\n * These functions can be used to verify that a message was signed by the holder\\n * of the private keys of a given address.\\n */\\nlibrary ECDSAUpgradeable {\\n    enum RecoverError {\\n        NoError,\\n        InvalidSignature,\\n        InvalidSignatureLength,\\n        InvalidSignatureS,\\n        InvalidSignatureV\\n    }\\n\\n    function _throwError(RecoverError error) private pure {\\n        if (error == RecoverError.NoError) {\\n            return; // no error: do nothing\\n        } else if (error == RecoverError.InvalidSignature) {\\n            revert(\\\"ECDSA: invalid signature\\\");\\n        } else if (error == RecoverError.InvalidSignatureLength) {\\n            revert(\\\"ECDSA: invalid signature length\\\");\\n        } else if (error == RecoverError.InvalidSignatureS) {\\n            revert(\\\"ECDSA: invalid signature 's' value\\\");\\n        } else if (error == RecoverError.InvalidSignatureV) {\\n            revert(\\\"ECDSA: invalid signature 'v' value\\\");\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the address that signed a hashed message (`hash`) with\\n     * `signature` or error string. This address can then be used for verification purposes.\\n     *\\n     * The `ecrecover` EVM opcode allows for malleable (non-unique) signatures:\\n     * this function rejects them by requiring the `s` value to be in the lower\\n     * half order, and the `v` value to be either 27 or 28.\\n     *\\n     * IMPORTANT: `hash` _must_ be the result of a hash operation for the\\n     * verification to be secure: it is possible to craft signatures that\\n     * recover to arbitrary addresses for non-hashed data. A safe way to ensure\\n     * this is by receiving a hash of the original message (which may otherwise\\n     * be too long), and then calling {toEthSignedMessageHash} on it.\\n     *\\n     * Documentation for signature generation:\\n     * - with https://web3js.readthedocs.io/en/v1.3.4/web3-eth-accounts.html#sign[Web3.js]\\n     * - with https://docs.ethers.io/v5/api/signer/#Signer-signMessage[ethers]\\n     *\\n     * _Available since v4.3._\\n     */\\n    function tryRecover(bytes32 hash, bytes memory signature) internal pure returns (address, RecoverError) {\\n        // Check the signature length\\n        // - case 65: r,s,v signature (standard)\\n        // - case 64: r,vs signature (cf https://eips.ethereum.org/EIPS/eip-2098) _Available since v4.1._\\n        if (signature.length == 65) {\\n            bytes32 r;\\n            bytes32 s;\\n            uint8 v;\\n            // ecrecover takes the signature parameters, and the only way to get them\\n            // currently is to use assembly.\\n            assembly {\\n                r := mload(add(signature, 0x20))\\n                s := mload(add(signature, 0x40))\\n                v := byte(0, mload(add(signature, 0x60)))\\n            }\\n            return tryRecover(hash, v, r, s);\\n        } else if (signature.length == 64) {\\n            bytes32 r;\\n            bytes32 vs;\\n            // ecrecover takes the signature parameters, and the only way to get them\\n            // currently is to use assembly.\\n            assembly {\\n                r := mload(add(signature, 0x20))\\n                vs := mload(add(signature, 0x40))\\n            }\\n            return tryRecover(hash, r, vs);\\n        } else {\\n            return (address(0), RecoverError.InvalidSignatureLength);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the address that signed a hashed message (`hash`) with\\n     * `signature`. This address can then be used for verification purposes.\\n     *\\n     * The `ecrecover` EVM opcode allows for malleable (non-unique) signatures:\\n     * this function rejects them by requiring the `s` value to be in the lower\\n     * half order, and the `v` value to be either 27 or 28.\\n     *\\n     * IMPORTANT: `hash` _must_ be the result of a hash operation for the\\n     * verification to be secure: it is possible to craft signatures that\\n     * recover to arbitrary addresses for non-hashed data. A safe way to ensure\\n     * this is by receiving a hash of the original message (which may otherwise\\n     * be too long), and then calling {toEthSignedMessageHash} on it.\\n     */\\n    function recover(bytes32 hash, bytes memory signature) internal pure returns (address) {\\n        (address recovered, RecoverError error) = tryRecover(hash, signature);\\n        _throwError(error);\\n        return recovered;\\n    }\\n\\n    /**\\n     * @dev Overload of {ECDSA-tryRecover} that receives the `r` and `vs` short-signature fields separately.\\n     *\\n     * See https://eips.ethereum.org/EIPS/eip-2098[EIP-2098 short signatures]\\n     *\\n     * _Available since v4.3._\\n     */\\n    function tryRecover(\\n        bytes32 hash,\\n        bytes32 r,\\n        bytes32 vs\\n    ) internal pure returns (address, RecoverError) {\\n        bytes32 s = vs & bytes32(0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff);\\n        uint8 v = uint8((uint256(vs) >> 255) + 27);\\n        return tryRecover(hash, v, r, s);\\n    }\\n\\n    /**\\n     * @dev Overload of {ECDSA-recover} that receives the `r and `vs` short-signature fields separately.\\n     *\\n     * _Available since v4.2._\\n     */\\n    function recover(\\n        bytes32 hash,\\n        bytes32 r,\\n        bytes32 vs\\n    ) internal pure returns (address) {\\n        (address recovered, RecoverError error) = tryRecover(hash, r, vs);\\n        _throwError(error);\\n        return recovered;\\n    }\\n\\n    /**\\n     * @dev Overload of {ECDSA-tryRecover} that receives the `v`,\\n     * `r` and `s` signature fields separately.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function tryRecover(\\n        bytes32 hash,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) internal pure returns (address, RecoverError) {\\n        // EIP-2 still allows signature malleability for ecrecover(). Remove this possibility and make the signature\\n        // unique. Appendix F in the Ethereum Yellow paper (https://ethereum.github.io/yellowpaper/paper.pdf), defines\\n        // the valid range for s in (301): 0 < s < secp256k1n \\u00f7 2 + 1, and for v in (302): v \\u2208 {27, 28}. Most\\n        // signatures from current libraries generate a unique signature with an s-value in the lower half order.\\n        //\\n        // If your library generates malleable signatures, such as s-values in the upper range, calculate a new s-value\\n        // with 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFEBAAEDCE6AF48A03BBFD25E8CD0364141 - s1 and flip v from 27 to 28 or\\n        // vice versa. If your library also generates signatures with 0/1 for v instead 27/28, add 27 to v to accept\\n        // these malleable signatures as well.\\n        if (uint256(s) > 0x7FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF5D576E7357A4501DDFE92F46681B20A0) {\\n            return (address(0), RecoverError.InvalidSignatureS);\\n        }\\n        if (v != 27 && v != 28) {\\n            return (address(0), RecoverError.InvalidSignatureV);\\n        }\\n\\n        // If the signature is valid (and not malleable), return the signer address\\n        address signer = ecrecover(hash, v, r, s);\\n        if (signer == address(0)) {\\n            return (address(0), RecoverError.InvalidSignature);\\n        }\\n\\n        return (signer, RecoverError.NoError);\\n    }\\n\\n    /**\\n     * @dev Overload of {ECDSA-recover} that receives the `v`,\\n     * `r` and `s` signature fields separately.\\n     */\\n    function recover(\\n        bytes32 hash,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) internal pure returns (address) {\\n        (address recovered, RecoverError error) = tryRecover(hash, v, r, s);\\n        _throwError(error);\\n        return recovered;\\n    }\\n\\n    /**\\n     * @dev Returns an Ethereum Signed Message, created from a `hash`. This\\n     * produces hash corresponding to the one signed with the\\n     * https://eth.wiki/json-rpc/API#eth_sign[`eth_sign`]\\n     * JSON-RPC method as part of EIP-191.\\n     *\\n     * See {recover}.\\n     */\\n    function toEthSignedMessageHash(bytes32 hash) internal pure returns (bytes32) {\\n        // 32 is the length in bytes of hash,\\n        // enforced by the type signature above\\n        return keccak256(abi.encodePacked(\\\"\\\\x19Ethereum Signed Message:\\\\n32\\\", hash));\\n    }\\n\\n    /**\\n     * @dev Returns an Ethereum Signed Message, created from `s`. This\\n     * produces hash corresponding to the one signed with the\\n     * https://eth.wiki/json-rpc/API#eth_sign[`eth_sign`]\\n     * JSON-RPC method as part of EIP-191.\\n     *\\n     * See {recover}.\\n     */\\n    function toEthSignedMessageHash(bytes memory s) internal pure returns (bytes32) {\\n        return keccak256(abi.encodePacked(\\\"\\\\x19Ethereum Signed Message:\\\\n\\\", StringsUpgradeable.toString(s.length), s));\\n    }\\n\\n    /**\\n     * @dev Returns an Ethereum Signed Typed Data, created from a\\n     * `domainSeparator` and a `structHash`. This produces hash corresponding\\n     * to the one signed with the\\n     * https://eips.ethereum.org/EIPS/eip-712[`eth_signTypedData`]\\n     * JSON-RPC method as part of EIP-712.\\n     *\\n     * See {recover}.\\n     */\\n    function toTypedDataHash(bytes32 domainSeparator, bytes32 structHash) internal pure returns (bytes32) {\\n        return keccak256(abi.encodePacked(\\\"\\\\x19\\\\x01\\\", domainSeparator, structHash));\\n    }\\n}\\n\",\"keccak256\":\"0x6602a65e0277f31f45cad4c7a15b024fd182f2f0e01eaa1954103b0d57848a27\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/cryptography/draft-EIP712Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/cryptography/draft-EIP712.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./ECDSAUpgradeable.sol\\\";\\nimport \\\"../../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev https://eips.ethereum.org/EIPS/eip-712[EIP 712] is a standard for hashing and signing of typed structured data.\\n *\\n * The encoding specified in the EIP is very generic, and such a generic implementation in Solidity is not feasible,\\n * thus this contract does not implement the encoding itself. Protocols need to implement the type-specific encoding\\n * they need in their contracts using a combination of `abi.encode` and `keccak256`.\\n *\\n * This contract implements the EIP 712 domain separator ({_domainSeparatorV4}) that is used as part of the encoding\\n * scheme, and the final step of the encoding to obtain the message digest that is then signed via ECDSA\\n * ({_hashTypedDataV4}).\\n *\\n * The implementation of the domain separator was designed to be as efficient as possible while still properly updating\\n * the chain id to protect against replay attacks on an eventual fork of the chain.\\n *\\n * NOTE: This contract implements the version of the encoding known as \\\"v4\\\", as implemented by the JSON RPC method\\n * https://docs.metamask.io/guide/signing-data.html[`eth_signTypedDataV4` in MetaMask].\\n *\\n * _Available since v3.4._\\n *\\n * @custom:storage-size 52\\n */\\nabstract contract EIP712Upgradeable is Initializable {\\n    /* solhint-disable var-name-mixedcase */\\n    bytes32 private _HASHED_NAME;\\n    bytes32 private _HASHED_VERSION;\\n    bytes32 private constant _TYPE_HASH = keccak256(\\\"EIP712Domain(string name,string version,uint256 chainId,address verifyingContract)\\\");\\n\\n    /* solhint-enable var-name-mixedcase */\\n\\n    /**\\n     * @dev Initializes the domain separator and parameter caches.\\n     *\\n     * The meaning of `name` and `version` is specified in\\n     * https://eips.ethereum.org/EIPS/eip-712#definition-of-domainseparator[EIP 712]:\\n     *\\n     * - `name`: the user readable name of the signing domain, i.e. the name of the DApp or the protocol.\\n     * - `version`: the current major version of the signing domain.\\n     *\\n     * NOTE: These parameters cannot be changed except through a xref:learn::upgrading-smart-contracts.adoc[smart\\n     * contract upgrade].\\n     */\\n    function __EIP712_init(string memory name, string memory version) internal onlyInitializing {\\n        __EIP712_init_unchained(name, version);\\n    }\\n\\n    function __EIP712_init_unchained(string memory name, string memory version) internal onlyInitializing {\\n        bytes32 hashedName = keccak256(bytes(name));\\n        bytes32 hashedVersion = keccak256(bytes(version));\\n        _HASHED_NAME = hashedName;\\n        _HASHED_VERSION = hashedVersion;\\n    }\\n\\n    /**\\n     * @dev Returns the domain separator for the current chain.\\n     */\\n    function _domainSeparatorV4() internal view returns (bytes32) {\\n        return _buildDomainSeparator(_TYPE_HASH, _EIP712NameHash(), _EIP712VersionHash());\\n    }\\n\\n    function _buildDomainSeparator(\\n        bytes32 typeHash,\\n        bytes32 nameHash,\\n        bytes32 versionHash\\n    ) private view returns (bytes32) {\\n        return keccak256(abi.encode(typeHash, nameHash, versionHash, block.chainid, address(this)));\\n    }\\n\\n    /**\\n     * @dev Given an already https://eips.ethereum.org/EIPS/eip-712#definition-of-hashstruct[hashed struct], this\\n     * function returns the hash of the fully encoded EIP712 message for this domain.\\n     *\\n     * This hash can be used together with {ECDSA-recover} to obtain the signer of a message. For example:\\n     *\\n     * ```solidity\\n     * bytes32 digest = _hashTypedDataV4(keccak256(abi.encode(\\n     *     keccak256(\\\"Mail(address to,string contents)\\\"),\\n     *     mailTo,\\n     *     keccak256(bytes(mailContents))\\n     * )));\\n     * address signer = ECDSA.recover(digest, signature);\\n     * ```\\n     */\\n    function _hashTypedDataV4(bytes32 structHash) internal view virtual returns (bytes32) {\\n        return ECDSAUpgradeable.toTypedDataHash(_domainSeparatorV4(), structHash);\\n    }\\n\\n    /**\\n     * @dev The hash of the name parameter for the EIP712 domain.\\n     *\\n     * NOTE: This function reads from storage by default, but can be redefined to return a constant value if gas costs\\n     * are a concern.\\n     */\\n    function _EIP712NameHash() internal virtual view returns (bytes32) {\\n        return _HASHED_NAME;\\n    }\\n\\n    /**\\n     * @dev The hash of the version parameter for the EIP712 domain.\\n     *\\n     * NOTE: This function reads from storage by default, but can be redefined to return a constant value if gas costs\\n     * are a concern.\\n     */\\n    function _EIP712VersionHash() internal virtual view returns (bytes32) {\\n        return _HASHED_VERSION;\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[50] private __gap;\\n}\\n\",\"keccak256\":\"0xaf5a96100f421d61693605349511e43221d3c2e47d4b3efa87af2b936e2567fc\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/math/SafeMathUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (utils/math/SafeMath.sol)\\n\\npragma solidity ^0.8.0;\\n\\n// CAUTION\\n// This version of SafeMath should only be used with Solidity 0.8 or later,\\n// because it relies on the compiler's built in overflow checks.\\n\\n/**\\n * @dev Wrappers over Solidity's arithmetic operations.\\n *\\n * NOTE: `SafeMath` is generally not needed starting with Solidity 0.8, since the compiler\\n * now has built in overflow checking.\\n */\\nlibrary SafeMathUpgradeable {\\n    /**\\n     * @dev Returns the addition of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            uint256 c = a + b;\\n            if (c < a) return (false, 0);\\n            return (true, c);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b > a) return (false, 0);\\n            return (true, a - b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\\n            // benefit is lost if 'b' is also tested.\\n            // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\n            if (a == 0) return (true, 0);\\n            uint256 c = a * b;\\n            if (c / a != b) return (false, 0);\\n            return (true, c);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the division of two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b == 0) return (false, 0);\\n            return (true, a / b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b == 0) return (false, 0);\\n            return (true, a % b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the addition of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `+` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Addition cannot overflow.\\n     */\\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a + b;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting on\\n     * overflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a - b;\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `*` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Multiplication cannot overflow.\\n     */\\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a * b;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a / b;\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting when dividing by zero.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a % b;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\\n     * overflow (when the result is negative).\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {trySub}.\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(\\n        uint256 a,\\n        uint256 b,\\n        string memory errorMessage\\n    ) internal pure returns (uint256) {\\n        unchecked {\\n            require(b <= a, errorMessage);\\n            return a - b;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting with custom message on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(\\n        uint256 a,\\n        uint256 b,\\n        string memory errorMessage\\n    ) internal pure returns (uint256) {\\n        unchecked {\\n            require(b > 0, errorMessage);\\n            return a / b;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting with custom message when dividing by zero.\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {tryMod}.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(\\n        uint256 a,\\n        uint256 b,\\n        string memory errorMessage\\n    ) internal pure returns (uint256) {\\n        unchecked {\\n            require(b > 0, errorMessage);\\n            return a % b;\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xcaa8b7861115ea691c77ddbeac140a444e0edcd1d9812a43942c0f6b42b36a49\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/StorageSlot.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/StorageSlot.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Library for reading and writing primitive types to specific storage slots.\\n *\\n * Storage slots are often used to avoid storage conflict when dealing with upgradeable contracts.\\n * This library helps with reading and writing to such slots without the need for inline assembly.\\n *\\n * The functions in this library return Slot structs that contain a `value` member that can be used to read or write.\\n *\\n * Example usage to set ERC1967 implementation slot:\\n * ```\\n * contract ERC1967 {\\n *     bytes32 internal constant _IMPLEMENTATION_SLOT = 0x360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc;\\n *\\n *     function _getImplementation() internal view returns (address) {\\n *         return StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value;\\n *     }\\n *\\n *     function _setImplementation(address newImplementation) internal {\\n *         require(Address.isContract(newImplementation), \\\"ERC1967: new implementation is not a contract\\\");\\n *         StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value = newImplementation;\\n *     }\\n * }\\n * ```\\n *\\n * _Available since v4.1 for `address`, `bool`, `bytes32`, and `uint256`._\\n */\\nlibrary StorageSlot {\\n    struct AddressSlot {\\n        address value;\\n    }\\n\\n    struct BooleanSlot {\\n        bool value;\\n    }\\n\\n    struct Bytes32Slot {\\n        bytes32 value;\\n    }\\n\\n    struct Uint256Slot {\\n        uint256 value;\\n    }\\n\\n    /**\\n     * @dev Returns an `AddressSlot` with member `value` located at `slot`.\\n     */\\n    function getAddressSlot(bytes32 slot) internal pure returns (AddressSlot storage r) {\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `BooleanSlot` with member `value` located at `slot`.\\n     */\\n    function getBooleanSlot(bytes32 slot) internal pure returns (BooleanSlot storage r) {\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `Bytes32Slot` with member `value` located at `slot`.\\n     */\\n    function getBytes32Slot(bytes32 slot) internal pure returns (Bytes32Slot storage r) {\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `Uint256Slot` with member `value` located at `slot`.\\n     */\\n    function getUint256Slot(bytes32 slot) internal pure returns (Uint256Slot storage r) {\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xfe1b7a9aa2a530a9e705b220e26cd584e2fbdc9602a3a1066032b12816b46aca\",\"license\":\"MIT\"},\"contracts/access/OwnerWithdrawable.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSE\\n\\npragma solidity >=0.8.0;\\n\\nimport '@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol';\\nimport '@openzeppelin/contracts-upgradeable/interfaces/IERC20Upgradeable.sol';\\nimport '@openzeppelin/contracts-upgradeable/token/ERC20/utils/SafeERC20Upgradeable.sol';\\n\\n/// @author Alexandas\\n/// @dev Make the contract owner can withdraw token and eth\\nabstract contract OwnerWithdrawable is OwnableUpgradeable {\\n\\tusing SafeERC20Upgradeable for IERC20Upgradeable;\\n\\n\\t/// @dev emit when token is withdrawn\\n\\t/// @param token token address\\n\\t/// @param to receiver address\\n\\t/// @param value token value\\n\\tevent Withdrawal(IERC20Upgradeable token, address to, uint256 value);\\n\\n\\t/// @dev emit when ETH is withdrawn\\n\\t/// @param to receiver address\\n\\t/// @param value token value\\n\\tevent NativeWithdrawal(address to, uint256 value);\\n\\n\\t/// @dev withdraw token\\n\\t/// @param token token address\\n\\t/// @param to receiver address\\n\\t/// @param value token value\\n\\tfunction ownerWithdrawERC20(\\n\\t\\tIERC20Upgradeable token,\\n\\t\\taddress to,\\n\\t\\tuint256 value\\n\\t) external onlyOwner {\\n\\t\\ttoken.safeTransfer(to, value);\\n\\t\\temit Withdrawal(token, to, value);\\n\\t}\\n\\n\\t/// @dev withdraw ETH\\n\\t/// @param to receiver address\\n\\t/// @param value token value\\n\\tfunction ownerWithdrawNative(address payable to, uint256 value) external onlyOwner {\\n\\t\\tbool success = to.send(value);\\n\\t\\trequire(success, 'OwnerWithdrawable: withdraw native token failed');\\n\\t\\temit NativeWithdrawal(to, value);\\n\\t}\\n}\\n\",\"keccak256\":\"0x0f36a2a9ed2839c2530c4e27f9b1797f13e8a6a3d3c9bcaa4c87202f14757954\",\"license\":\"UNLICENSE\"},\"contracts/access/Pauser.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0-only\\n\\npragma solidity >=0.8.0;\\n\\nimport '@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol';\\nimport '@openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol';\\n\\n/// @author Alexandas\\n/// @dev Pauser contract\\nabstract contract Pauser is OwnableUpgradeable, PausableUpgradeable {\\n\\t/// @dev all pausers\\n\\tmapping(address => bool) public pausers;\\n\\n\\t/// @dev emit when pauser is added\\n\\t/// @param account pauser address\\n\\tevent PauserAdded(address account);\\n\\n\\t/// @dev emit when pauser is removed\\n\\t/// @param account pauser address\\n\\tevent PauserRemoved(address account);\\n\\n\\tfunction __Init_Pauser(address account) internal onlyInitializing {\\n\\t\\t_addPauser(account);\\n\\t}\\n\\n\\tmodifier onlyPauser() {\\n\\t\\trequire(isPauser(msg.sender), 'Pauser: caller is not the pauser');\\n\\t\\t_;\\n\\t}\\n\\n\\t/// @dev pause the contract\\n\\tfunction pause() public onlyPauser {\\n\\t\\t_pause();\\n\\t}\\n\\n\\t/// @dev unpause the contract\\n\\tfunction unpause() public onlyPauser {\\n\\t\\t_unpause();\\n\\t}\\n\\n\\t/// @dev whether the account is the contract pauser\\n\\t/// @param account address\\n\\t/// @return whether account is a pauser\\n\\tfunction isPauser(address account) public view returns (bool) {\\n\\t\\treturn pausers[account];\\n\\t}\\n\\n\\t/// @dev add a pauser for the contract\\n\\t/// @param account address\\n\\tfunction addPauser(address account) public onlyOwner {\\n\\t\\t_addPauser(account);\\n\\t}\\n\\n\\t/// @dev remove a pauser for the contract\\n\\t/// @param account address\\n\\tfunction removePauser(address account) public onlyOwner {\\n\\t\\t_removePauser(account);\\n\\t}\\n\\n\\t/// @dev remove a pauser for the contract\\n\\tfunction renouncePauser() public {\\n\\t\\t_removePauser(msg.sender);\\n\\t}\\n\\n\\tfunction _addPauser(address account) private {\\n\\t\\trequire(!isPauser(account), 'Pauser: account is already pauser');\\n\\t\\tpausers[account] = true;\\n\\t\\temit PauserAdded(account);\\n\\t}\\n\\n\\tfunction _removePauser(address account) private {\\n\\t\\trequire(isPauser(account), 'Pauser: account is not pauser');\\n\\t\\tdelete pausers[account];\\n\\t\\temit PauserRemoved(account);\\n\\t}\\n}\\n\",\"keccak256\":\"0x609e378196c861ff988b70c73d1cd3ac44f7a2023b22afd521fe7a8a0fb5b0ba\",\"license\":\"GPL-3.0-only\"},\"contracts/govers/RouterWrapper.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSE\\n\\npragma solidity >=0.8.0;\\nimport '@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol';\\nimport '../interfaces/IRouter.sol';\\n\\n/// @author Alexandas\\n/// @dev Router wrapper contract\\nabstract contract RouterWrapper is Initializable {\\n\\t/// @dev router contract address\\n\\tIRouter public router;\\n\\n\\t/// @dev emit when provider registry contract updated\\n\\t/// @param router contract address\\n\\tevent RouterUpdated(IRouter router);\\n\\n\\tmodifier onlyGovernance() {\\n\\t\\tIGovernance governance = router.Governance();\\n\\t\\trequire(msg.sender == address(governance), 'RouterWrapper: caller is not the governance');\\n\\t\\t_;\\n\\t}\\n\\n\\tmodifier onlyProviderController() {\\n\\t\\tIProviderController controller = router.ProviderController();\\n\\t\\trequire(msg.sender == address(controller), 'RouterWrapper: caller is not the provider controller');\\n\\t\\t_;\\n\\t}\\n\\n\\tmodifier onlyProvider() {\\n\\t\\tIProviderRegistry providerRegistry = router.ProviderRegistry();\\n\\t\\trequire(providerRegistry.isProvider(msg.sender), 'RouterWrapper: caller is not the provider');\\n\\t\\t_;\\n\\t}\\n\\n\\tmodifier onlyMessageReceiver() {\\n\\t\\taddress messageReceiver = router.MessageReceiver();\\n\\t\\trequire(msg.sender == messageReceiver, 'RouterWrapper: caller is not message receiver');\\n\\t\\t_;\\n\\t}\\n\\n\\tmodifier onlyDstChainPayment() {\\n\\t\\tIDstChainPayment dstChainPayment = router.DstChainPayment();\\n\\t\\trequire(msg.sender == address(dstChainPayment), 'RouterWrapper: caller is not dst chain payment');\\n\\t\\t_;\\n\\t}\\n\\n\\tmodifier onlyFundPool() {\\n\\t\\tIFundPool pool = router.FundPool();\\n\\t\\trequire(msg.sender == address(pool), 'RouterWrapper: caller is not fund pool');\\n\\t\\t_;\\n\\t}\\n\\n\\t/// @dev initialize provider registry contract\\n\\t/// @param _router contract address\\n\\tfunction __Init_Router(IRouter _router) internal onlyInitializing {\\n\\t\\t_setRouter(_router);\\n\\t}\\n\\n\\tfunction _setRouter(IRouter _router) internal {\\n\\t\\trequire(address(_router) != address(0), 'RouterWrapper: zero address');\\n\\t\\trouter = _router;\\n\\t\\temit RouterUpdated(_router);\\n\\t}\\n}\\n\",\"keccak256\":\"0x0867787020dc7ff95048c08570a69761ebdb8608517829cd122ef9677da8c45f\",\"license\":\"UNLICENSE\"},\"contracts/interfaces/IBilling.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSE\\n\\npragma solidity >=0.8.0;\\n\\nimport '@openzeppelin/contracts-upgradeable/interfaces/IERC20Upgradeable.sol';\\nimport '../libraries/ResourceData.sol';\\nimport '../resources/interfaces/IResourcePriceAdaptor.sol';\\n\\n/// @author Alexandas\\n/// @dev Billing interface\\ninterface IBilling {\\n\\tstruct BillEntry {\\n\\t\\tResourceData.ResourceType resourceType;\\n\\t\\tuint256 amount;\\n\\t}\\n\\n\\tstruct Bill {\\n\\t\\tuint256 indexBlock;\\n\\t\\tBillEntry[] entries;\\n\\t}\\n\\n\\t/// @dev emit when billing types hash updated\\n\\t/// @param hash billing types Hash\\n\\tevent BillingTypesHashUpdated(bytes32 hash);\\n\\n\\t/// @dev emit when bills finalized\\n\\t/// @param provider provider address\\n\\t/// @param account user account\\n\\t/// @param bills bills data\\n\\t/// @param amount fee\\n\\t/// @param nonce nonce\\n\\tevent Billing(address provider, bytes32 account, bytes bills, uint256 amount, uint64 nonce);\\n\\n\\t/// @dev get billing types hash\\n\\t/// @return billing types hash\\n\\tfunction billingTypesHash() external view returns (bytes32);\\n\\n\\t/// @dev spend bills\\n\\t/// @param provider provider address\\n\\t/// @param account user account\\n\\t/// @param bills billing data\\n\\t/// @param timeout tx timeout\\n\\t/// @param nonce billing nonce\\n\\t/// @param signature billing signature\\n\\t/// @return fee billing fee\\n\\tfunction spend(\\n\\t\\taddress provider,\\n\\t\\tbytes32 account,\\n\\t\\tbytes memory bills,\\n\\t\\tuint256 timeout,\\n\\t\\tuint64 nonce,\\n\\t\\tbytes memory signature\\n\\t) external returns (uint256 fee);\\n\\n\\t/// @dev return balance of provider\\n\\t/// @param provider provider address\\n\\t/// @return balance of provider\\n\\tfunction balanceOf(address provider) external view returns (uint256);\\n\\n\\t/// @dev provider nonces for account\\n\\t/// @param provider provider address\\n\\t/// @param account user account\\n\\t/// @param nonce nonce\\n\\t/// @return whether nonce exists\\n\\tfunction nonceExists(\\n\\t\\taddress provider,\\n\\t\\tbytes32 account,\\n\\t\\tuint64 nonce\\n\\t) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x28413ecc2f7477ad5f216bc9e6d543fc567af662ee6a278abad15505ddf19597\",\"license\":\"UNLICENSE\"},\"contracts/interfaces/IDstChainPayment.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSE\\n\\npragma solidity >=0.8.0;\\n\\nimport '@openzeppelin/contracts-upgradeable/interfaces/IERC20Upgradeable.sol';\\nimport '../libraries/ResourceData.sol';\\n\\n/// @author Alexandas\\n/// @dev DstChainPayment interface\\ninterface IDstChainPayment {\\n\\tstruct PaymentPayload {\\n\\t\\taddress provider;\\n\\t\\tuint64 nonce;\\n\\t\\tbytes32 account;\\n\\t\\tResourceData.ValuePayload[] payloads;\\n\\t}\\n\\n\\t// event PaidV2(address provider, bytes32 account, ResourceData.ValuePayload[] payloads);\\n\\n\\tevent Paid(address provider, bytes32 account, ResourceData.ValuePayload[] payloads, uint256 value, uint256 nonce, uint256 amount);\\n\\n\\t/// @dev pay from source chain only called by message receiver\\n\\t/// @param message payment payload message bytes\\n\\tfunction celerExec(bytes calldata message) external;\\n\\n\\t/// @dev pay on dst chain\\n\\t/// @param provider provider address\\n\\t/// @param account user account\\n\\t/// @param payloads payment payloads\\n\\t/// @param nonce voucher nonce\\n\\t/// @param amount voucher amount\\n\\t/// @param signature vourcher signature for provider\\n\\t/// @return value total token value\\n\\tfunction pay(address provider, bytes32 account, ResourceData.ValuePayload[] memory payloads, uint256 nonce, uint256 amount, bytes memory signature) external returns(uint256 value);\\n\\n\\t/// @dev calculate fee for ipfs storage and expiration\\n\\t/// @param provider provider address\\n\\t/// @param account user account\\n\\t/// @param amount ipfs storage amount\\n\\t/// @param expiration ipfs expiration(in seconds)\\n\\t/// @return storageFee ipfs storage fee\\n\\t/// @return expirationFee ipfs expiration fee\\n\\tfunction ipfsAlloctionsFee(\\n\\t\\taddress provider,\\n\\t\\tbytes32 account,\\n\\t\\tuint256 amount,\\n\\t\\tuint256 expiration\\n\\t) external view returns (uint256 storageFee, uint256 expirationFee);\\n\\n\\t/// @dev calculate ipfs storage and expiration with storage fee and expiration fee\\n\\t/// @param provider provider address\\n\\t/// @param account user account\\n\\t/// @param storageFee storage fee\\n\\t/// @param expirationFee expiration fee\\n\\t/// @return amount ipfs storage amount\\n\\t/// @return expiration ipfs expiration(in seconds)\\n\\tfunction ipfsAllocations(\\n\\t\\taddress provider,\\n\\t\\tbytes32 account,\\n\\t\\tuint256 storageFee,\\n\\t\\tuint256 expirationFee\\n\\t) external view returns (uint256 amount, uint256 expiration);\\n\\n\\t/// @dev return balance of provider\\n\\t/// @param provider provider address\\n\\t/// @return balance of provider\\n\\tfunction balanceOf(address provider) external view returns (uint256);\\n\\n\\t/// @dev return resource price\\n\\t/// @param provider provider address\\n\\t/// @param resourceType resource type\\n\\t/// @return resource price\\n\\tfunction priceOf(address provider, ResourceData.ResourceType resourceType) external view returns (uint256);\\n\\n\\t/// @dev return value of amount resource\\n\\t/// @param provider provider address\\n\\t/// @param resourceType resource type\\n\\t/// @param amount resource amount\\n\\t/// @return token value\\n\\tfunction getValueOf(\\n\\t\\taddress provider,\\n\\t\\tResourceData.ResourceType resourceType,\\n\\t\\tuint256 amount\\n\\t) external view returns (uint256);\\n\\n\\t/// @dev return resource amount with value\\n\\t/// @param provider provider address\\n\\t/// @param resourceType resource type\\n\\t/// @param value token value\\n\\t/// @return resource amount\\n\\tfunction getAmountOf(\\n\\t\\taddress provider,\\n\\t\\tResourceData.ResourceType resourceType,\\n\\t\\tuint256 value\\n\\t) external view returns (uint256);\\n}\\n\",\"keccak256\":\"0x32c0b099390e3fb0add639fd7ad51d53d6e39ed2d9180d9d62bc5e4a6e1ce0df\",\"license\":\"UNLICENSE\"},\"contracts/interfaces/IFundPool.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSE\\n\\npragma solidity >=0.8.0;\\n\\n/// @author Alexandas\\n/// @dev FundPool interface\\ninterface IFundPool {\\n\\n\\t/// @dev emit when bill spent\\n\\t/// @param provider provider address\\n\\t/// @param account user account\\n\\t/// @param amount token amount\\n\\tevent Spent(address provider, bytes32 account, uint256 amount);\\n\\n\\t/// @dev emit when account recharged\\n\\t/// @param provider provider address\\n\\t/// @param account user account\\n\\t/// @param amount token amount\\n\\tevent Recharged(address provider, bytes32 account, uint256 amount);\\n\\n\\t/// @dev emit when user withdrawn\\n\\t/// @param provider provider address\\n\\t/// @param account user account\\n\\t/// @param to token receiver\\n\\t/// @param amount token amount\\n\\tevent Withdrawn(address provider, bytes32 account, address to, uint256 amount);\\n\\n\\t/// @dev recharge for account\\n\\t/// @param provider provider address\\n\\t/// @param account user account\\n\\t/// @param amount token amount\\n\\tfunction recharge(\\n\\t\\taddress provider,\\n\\t\\tbytes32 account,\\n\\t\\tuint256 amount\\n\\t) external;\\n\\n\\tfunction celerExec(uint256 amount, bytes memory message) external;\\n\\n\\t/// @dev initialize wallet and recharge for account\\n\\t/// @param provider provider address\\n\\t/// @param account user account\\n\\t/// @param walletSig wallet signature\\n\\t/// @param bills billing data\\n\\t/// @param timeout tx timeout\\n\\t/// @param nonce billing nonce\\n\\t/// @param billSig bill signature\\n\\t/// @return fee bill fee\\n\\t/// @param to token receiver\\n\\t/// @param amount token amount\\n\\tfunction initWalletAndWithdraw(\\n\\t\\taddress provider,\\n\\t\\tbytes32 account,\\n\\t\\tbytes memory walletSig,\\n\\t\\tbytes memory bills,\\n\\t\\tuint256 timeout,\\n\\t\\tuint64 nonce,\\n\\t\\tbytes memory billSig,\\n\\t\\taddress to,\\n\\t\\tuint256 amount\\n\\t) external returns (uint256 fee);\\n\\n\\t/// @dev spend bills for account\\n\\t/// @param provider provider address\\n\\t/// @param account user account\\n\\t/// @param bills billing data\\n\\t/// @param timeout tx timeout\\n\\t/// @param nonce billing nonce\\n\\t/// @param signature provider signature\\n\\t/// @return fee bills fee\\n\\tfunction spend(\\n\\t\\taddress provider,\\n\\t\\tbytes32 account,\\n\\t\\tbytes memory bills,\\n\\t\\tuint256 timeout,\\n\\t\\tuint64 nonce,\\n\\t\\tbytes memory signature\\n\\t) external returns (uint256 fee);\\n\\n\\t/// @dev withdraw token for account\\n\\t/// @param provider provider address\\n\\t/// @param account user account\\n\\t/// @param bills billing data\\n\\t/// @param timeout tx timeout\\n\\t/// @param nonce billing nonce\\n\\t/// @param signature billing signature\\n\\t/// @param to token receiver\\n\\t/// @param amount token amount\\n\\t/// @param signature provider signature\\n\\t/// @return fee bill fee\\n\\tfunction withdraw(\\n\\t\\taddress provider,\\n\\t\\tbytes32 account,\\n\\t\\tbytes memory bills,\\n\\t\\tuint256 timeout,\\n\\t\\tuint64 nonce,\\n\\t\\tbytes memory signature,\\n\\t\\taddress to,\\n\\t\\tuint256 amount\\n\\t) external returns (uint256 fee);\\n\\n\\t/// @dev return wallet of the account\\n\\t/// @param provider provider address\\n\\t/// @param account user account\\n\\t/// @return wallet of the account\\n\\tfunction walletOf(address provider, bytes32 account) external view returns (address);\\n\\n\\t/// @dev return balance of account\\n\\t/// @param provider provider address\\n\\t/// @param account user account\\n\\t/// @return balance of account account\\n\\tfunction balanceOf(address provider, bytes32 account) external view returns (uint256);\\n}\\n\",\"keccak256\":\"0x450de2cd3b0d94955479c791a4e3ea4430d9917c9033b9259dc70c9a827808ac\",\"license\":\"UNLICENSE\"},\"contracts/interfaces/IGovernance.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSE\\n\\npragma solidity >=0.8.0;\\n\\nimport './IProviderRegistry.sol';\\nimport '../libraries/ResourceData.sol';\\n\\n/// @author Alexandas\\n/// @dev Governance interface\\ninterface IGovernance {\\n\\t/// @dev emit when governance drip resource to provider\\n\\t/// @param provider provider address\\n\\tevent GovernanceDrip(address provider);\\n\\n\\t/// @dev add a provider\\n\\t/// @param provider address\\n\\tfunction addProvider(address provider) external;\\n\\n\\t/// @dev remove a provider\\n\\t/// @param provider address\\n\\tfunction removeProvider(address provider) external;\\n\\n\\t/// @dev drip resource to provider\\n\\t/// @param provider provider address\\n\\t/// @param payloads resource payloads\\n\\tfunction drip(address provider, ResourceData.AmountPayload[] memory payloads) external;\\n}\\n\",\"keccak256\":\"0xfa284b7879ce25372f1f6c74ee8c7df6d41dedae6f3298b788086473c0d4c215\",\"license\":\"UNLICENSE\"},\"contracts/interfaces/IProviderController.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSE\\n\\npragma solidity >=0.8.0;\\n\\nimport '../libraries/ResourceData.sol';\\n\\n/// @author Alexandas\\n/// @dev provider controller interface\\ninterface IProviderController {\\n\\t/// @dev emit when account registered in provider\\n\\t/// @param provider provider address\\n\\t/// @param account user account\\n\\tevent AccountRegistered(address provider, bytes32 account);\\n\\n\\t/// @dev emit when provider drip resource to account\\n\\t/// @param provider provider address\\n\\t/// @param account user account\\n\\tevent ProviderDripped(address provider, bytes32 account);\\n\\n\\t/// @dev emit when provider drip resource to account\\n\\t/// @param provider provider address\\n\\t/// @param account user account\\n\\tevent ProviderDripped(address provider, bytes32 account, uint256 nonce);\\n\\n\\t/// @dev emit when wallet types hash updated\\n\\t/// @param hash wallet types hash\\n\\tevent WalletTypesHashUpdated(bytes32 hash);\\n\\n\\t/// @dev emit when wallet transferred\\n\\t/// @param provider provider address\\n\\t/// @param account user account\\n\\t/// @param from original wallet address\\n\\t/// @param to new wallet address\\n\\tevent WalletTransferred(address provider, bytes32 account, address from, address to);\\n\\n\\t/// @dev keccak256(\\\"Wallet(address provider,bytes32 account,address wallet)\\\")\\n\\tfunction walletTypesHash() external view returns (bytes32);\\n\\n\\t/// @dev register account\\n\\t/// @param account user account\\n\\tfunction registerAccount(bytes32 account) external;\\n\\n\\t/// @dev register multiple account\\n\\t/// @param accounts user accounts\\n\\tfunction registerMult(bytes32[] memory accounts) external;\\n\\n\\t/// @dev Explain to a developer any extra details\\n\\t/// @param provider provider address\\n\\t/// @param account user account\\n\\t/// @return whether account exists\\n\\tfunction accountExists(address provider, bytes32 account) external view returns (bool);\\n\\n\\t/// @dev provider drip resource to multiple accounts\\n\\t/// @param accounts user accounts\\n\\t/// @param payloads resource amount payloads\\n\\tfunction dripMult(\\n\\t\\tbytes32[] memory accounts,\\n\\t\\tResourceData.AmountPayload[][] memory payloads\\n\\t) external;\\n\\n\\t/// @dev provider drip resource to user account\\n\\t/// @param account user account\\n\\t/// @param payloads resource amount payloads\\n\\tfunction drip(\\n\\t\\tbytes32 account,\\n\\t\\tResourceData.AmountPayload[] memory payloads\\n\\t) external;\\n\\n\\t/// @dev provider register and drip resource for multiple accounts\\n\\t/// @param accounts user accounts\\n\\t/// @param payloads resource amount payloads\\n\\tfunction registerAndDripMult(\\n\\t\\tbytes32[] memory accounts,\\n\\t\\tResourceData.AmountPayload[][] memory payloads\\n\\t) external;\\n\\n\\t/// @dev initialize wallet for the given account\\n\\t/// @param provider provider address\\n\\t/// @param account user account\\n\\t/// @param wallet account wallet\\n\\t/// @param signature provider signature\\n\\tfunction initWallet(\\n\\t\\taddress provider,\\n\\t\\tbytes32 account,\\n\\t\\taddress wallet,\\n\\t\\tbytes memory signature\\n\\t) external;\\n\\n\\t/// @dev initialize wallet for the given account called by fund pool\\n\\t/// @param provider provider address\\n\\t/// @param account user account\\n\\t/// @param wallet account wallet\\n\\t/// @param signature provider signature\\n\\tfunction poolInitWallet(\\n\\t\\taddress provider,\\n\\t\\tbytes32 account,\\n\\t\\taddress wallet,\\n\\t\\tbytes memory signature\\n\\t) external;\\n\\n\\t/// @dev transfer wallet for the account\\n\\t/// @param provider provider address\\n\\t/// @param account user account\\n\\t/// @param newWallet account wallet\\n\\tfunction transferWallet(\\n\\t\\taddress provider,\\n\\t\\tbytes32 account,\\n\\t\\taddress newWallet\\n\\t) external;\\n\\n\\t/// @dev return wallet for the account\\n\\t/// @param provider provider address\\n\\t/// @param account user account\\n\\t/// @return wallet for the account\\n\\tfunction walletOf(address provider, bytes32 account) external view returns (address);\\n\\n\\t/// @dev return whether wallet exists\\n\\t/// @param provider provider address\\n\\t/// @param account user account\\n\\t/// @return whether wallet exists\\n\\tfunction walletExists(address provider, bytes32 account) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x60430a866da94f91e7f8d451e01ec6915537596b6bb4909ce1ddc3212b0999fc\",\"license\":\"UNLICENSE\"},\"contracts/interfaces/IProviderControllerV2Registration.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSE\\n\\npragma solidity >=0.8.0;\\n\\nimport './IProviderController.sol';\\n\\n/// @author Alexandas\\n/// @dev provider controller interface\\ninterface IProviderControllerV2Registration is IProviderController {\\n\\t/// @dev register account\\n\\t/// @param provider provider address\\n\\t/// @param account user account\\n\\tfunction registerAccount(address provider, bytes32 account, bytes memory signature) external;\\n\\n}\\n\",\"keccak256\":\"0x3beb313f8c0c7d0b270438aaa80728f25deafcd76dafec27106ef46e4b23787b\",\"license\":\"UNLICENSE\"},\"contracts/interfaces/IProviderRegistry.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSE\\n\\npragma solidity >=0.8.0;\\n\\n/// @author Alexandas\\n/// @dev provider registry interface\\ninterface IProviderRegistry {\\n\\t/// @dev emit when provider is added\\n\\t/// @param provider provider address\\n\\tevent AddProvider(address provider);\\n\\n\\t/// @dev emit when provider removed\\n\\t/// @param provider provider address\\n\\tevent RemoveProvider(address provider);\\n\\n\\tevent AddProivderWallet(address provider, address wallet);\\n\\n\\tevent RemoveProviderWallet(address provider, address wallet);\\n\\n\\t/// @dev add a provider\\n\\t/// @param provider address\\n\\tfunction addProvider(address provider) external;\\n\\n\\t/// @dev remove a provider\\n\\t/// @param provider address\\n\\tfunction removeProvider(address provider) external;\\n\\n\\t/// @dev return whether address is a provider\\n\\t/// @param provider address\\n\\tfunction isProvider(address provider) external view returns (bool);\\n\\n\\t/// @dev return provider wallet\\n\\t/// @param provider address\\n\\t/// @return provider wallet\\n\\tfunction providerWallet(address provider) external view returns (address);\\n\\n\\t/// @dev return provider wallet exists\\n\\t/// @param provider address\\n\\t/// @return whether provider wallet exists\\n\\tfunction providerWalletExists(address provider) external view returns (bool);\\n\\n\\t/// @dev return whether a valid signature\\n\\t/// @param provider address\\n\\t/// @param hash message hash\\n\\t/// @param signature provider signature for message hash\\n\\t/// @return is valid signature\\n\\tfunction isValidSignature(\\n\\t\\taddress provider,\\n\\t\\tbytes32 hash,\\n\\t\\tbytes memory signature\\n\\t) external returns (bool);\\n}\\n\",\"keccak256\":\"0xa51e867c83ef543d6aa67facb3df5952b83ed6aea7fc9c2129a4105377d29bf2\",\"license\":\"UNLICENSE\"},\"contracts/interfaces/IRouter.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSE\\n\\npragma solidity >=0.8.0;\\n\\nimport '@openzeppelin/contracts-upgradeable/interfaces/IERC20Upgradeable.sol';\\n\\nimport '../interfaces/IGovernance.sol';\\nimport '../interfaces/IProviderRegistry.sol';\\nimport '../interfaces/IProviderController.sol';\\nimport '../interfaces/IDstChainPayment.sol';\\nimport '../interfaces/IBilling.sol';\\nimport '../interfaces/IFundPool.sol';\\nimport '../resources/interfaces/INormalResourceController.sol';\\nimport '../resources/interfaces/IIPFSStorageController.sol';\\nimport '../resources/interfaces/IResourcePriceAdaptor.sol';\\n\\n/// @author Alexandas\\n/// @dev Router interface\\ninterface IRouter {\\n\\t/// @dev emit when governance contract address updated\\n\\t/// @param governance governance contract address\\n\\tevent GovernanceUpdated(IGovernance governance);\\n\\n\\t/// @dev emit when message receiver updated\\n\\t/// @param messageReceiver message receiver contract address\\n\\tevent MessageReceiverUpdated(address messageReceiver);\\n\\n\\t/// @dev emit when provider registry contract updated\\n\\t/// @param _providerRegistry provider registry contract\\n\\tevent ProviderRegistryUpdated(IProviderRegistry _providerRegistry);\\n\\n\\t/// @dev emit when dst ProviderController contract address updated\\n\\t/// @param providerController ProviderController contract address\\n\\tevent ProviderControllerUpdated(IProviderController providerController);\\n\\n\\t/// @dev emit when token updated\\n\\t/// @param token token address\\n\\tevent TokenUpdated(IERC20Upgradeable token);\\n\\n\\t/// @dev emit when building time controller updated\\n\\t/// @param buildingTimeController building time controller contract\\n\\tevent BuildingTimeControllerUpdated(INormalResourceController buildingTimeController);\\n\\n\\t/// @dev emit when bandwidth controller updated\\n\\t/// @param bandwidthController bandwidth controller contract\\n\\tevent BandwidthControllerUpdated(INormalResourceController bandwidthController);\\n\\n\\t/// @dev emit when AR storage controller updated\\n\\t/// @param arStorageController AR storage controller contract\\n\\tevent ARStorageControllerUpdated(INormalResourceController arStorageController);\\n\\n\\t/// @dev emit when ipfs storage controller updated\\n\\t/// @param ipfsStorageController IPFS storage controller contract\\n\\tevent IPFSStorageControllerUpdated(IIPFSStorageController ipfsStorageController);\\n\\n\\t/// @dev emit when resource price adaptor updated\\n\\t/// @param resourcePriceAdaptor resource price adaptor contract\\n\\tevent ResourcePriceAdaptorUpdated(IResourcePriceAdaptor resourcePriceAdaptor);\\n\\n\\t/// @dev emit when dst chain payment contract address updated\\n\\t/// @param dstChainPayment dst chain payment contract address\\n\\tevent DstChainPaymentUpdated(IDstChainPayment dstChainPayment);\\n\\n\\t/// @dev emit when billing contract updated\\n\\t/// @param billing billing contract\\n\\tevent BillingUpdated(IBilling billing);\\n\\n\\t/// @dev emit when fund pool contract updated\\n\\t/// @param fundPool fund pool contract\\n\\tevent FundPoolUpdated(IFundPool fundPool);\\n\\n\\t/// @dev message receiver contract address\\n\\tfunction MessageReceiver() external view returns (address);\\n\\n\\t/// @dev Governance contract address\\n\\tfunction Governance() external view returns (IGovernance);\\n\\n\\t/// @dev providers contract address\\n\\tfunction ProviderRegistry() external view returns (IProviderRegistry);\\n\\n\\t/// @dev provider controller contract address\\n\\tfunction ProviderController() external view returns (IProviderController);\\n\\n\\t/// @dev token address\\n\\tfunction Token() external view returns (IERC20Upgradeable);\\n\\n\\t/// @dev return building time controller\\n\\tfunction BuildingTimeController() external view returns (INormalResourceController);\\n\\n\\t/// @dev return bandwidth controller\\n\\tfunction BandwidthController() external view returns (INormalResourceController);\\n\\n\\t/// @dev return AR storage controller\\n\\tfunction ARStorageController() external view returns (INormalResourceController);\\n\\n\\t/// @dev return ipfs storage controller\\n\\tfunction IPFSStorageController() external view returns (IIPFSStorageController);\\n\\n\\t/// @dev return resource price adaptor contract address\\n\\tfunction ResourcePriceAdaptor() external view returns (IResourcePriceAdaptor);\\n\\n\\t/// @dev dst chain payment contract address\\n\\tfunction DstChainPayment() external view returns (IDstChainPayment);\\n\\n\\t/// @dev billing contract address\\n\\tfunction Billing() external view returns (IBilling);\\n\\n\\t/// @dev fund pool contract address\\n\\tfunction FundPool() external view returns (IFundPool);\\n}\\n\",\"keccak256\":\"0x32c01e0f705a5c96ad7550e7cb0e885c5479fa9353445c256eab4e8c0e14e8cf\",\"license\":\"UNLICENSE\"},\"contracts/libraries/ResourceData.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSE\\n\\npragma solidity >=0.8.0;\\nimport '@openzeppelin/contracts-upgradeable/utils/math/SafeMathUpgradeable.sol';\\nimport '@openzeppelin/contracts-upgradeable/interfaces/IERC20Upgradeable.sol';\\n\\n/// @author Alexandas\\n/// @dev resource data library\\nlibrary ResourceData {\\n\\tusing SafeMathUpgradeable for uint256;\\n\\n\\tenum ResourceType {\\n\\t\\tNull,\\n\\t\\tBuildingTime,\\n\\t\\tBandwidth,\\n\\t\\tARStorage,\\n\\t\\tIPFSStorage\\n\\t}\\n\\n\\tstruct ValuePayload {\\n\\t\\tResourceData.ResourceType resourceType;\\n\\t\\tuint256[] values;\\n\\t}\\n\\n\\tstruct AmountPayload {\\n\\t\\tResourceData.ResourceType resourceType;\\n\\t\\tuint256[] amounts;\\n\\t}\\n\\n\\tstruct ValuePayloads {\\n\\t\\tResourceData.ValuePayload[] payloads;\\n\\t}\\n\\n\\tfunction convertSourceChainPayloads(ValuePayloads memory valuePayloads, uint256 dstAmount)\\n\\t\\tinternal\\n\\t\\tpure\\n\\t\\treturns (ResourceData.ValuePayload[] memory newPayloads)\\n\\t{\\n\\t\\tResourceData.ValuePayload[] memory payloads = valuePayloads.payloads;\\n\\t\\trequire(payloads.length > 0, 'ResourceData: invalid payload length');\\n\\t\\tuint256 total = totalValue(payloads);\\n\\t\\trequire(total > 0, 'ResourceData: zero total value');\\n\\t\\tfor (uint256 i = 0; i < payloads.length; i++) {\\n\\t\\t\\trequire(payloads[i].values.length > 0, 'ResourceData: invalid value length');\\n\\t\\t\\tfor (uint256 j = 0; j < payloads[i].values.length; j++) {\\n\\t\\t\\t\\tpayloads[i].values[j] = payloads[i].values[j].mul(dstAmount).div(total);\\n\\t\\t\\t}\\n\\t\\t}\\n\\t\\treturn payloads;\\n\\t}\\n\\n\\t/// @dev payment payload total value\\n\\t/// @param payloads payment payloads\\n\\t/// @return value total value\\n\\tfunction totalValue(ResourceData.ValuePayload[] memory payloads) internal pure returns (uint256 value) {\\n\\t\\trequire(payloads.length > 0, 'ResourceData: invalid payloads length');\\n\\t\\tfor (uint256 i = 0; i < payloads.length; i++) {\\n\\t\\t\\tfor (uint256 j = 0; j < payloads[i].values.length; j++) {\\n\\t\\t\\t\\tvalue = value.add(payloads[i].values[j]);\\n\\t\\t\\t}\\n\\t\\t}\\n\\t}\\n\\n\\t/// @dev match token amount to resource decimals\\n\\t/// @param token token contract address\\n\\t/// @param value token amount with resource decimals\\n\\t/// @return resource value\\n\\tfunction matchTokenToResource(IERC20Upgradeable token, uint256 value) internal view returns (uint256) {\\n\\t\\tuint256 _tokenDecimals = tokenDecimals(token);\\n\\t\\tuint256 _resourceDecimals = decimals();\\n\\t\\tif (_tokenDecimals <= _resourceDecimals) {\\n\\t\\t\\treturn value.mul(10**(_resourceDecimals.sub(_tokenDecimals)));\\n\\t\\t}\\n\\t\\treturn value.div(10**(_tokenDecimals.sub(_resourceDecimals)));\\n\\t}\\n\\n\\t/// @dev match value to token decimals\\n\\t/// @param token token contract address\\n\\t/// @param value resource value\\n\\t/// @return token value\\n\\tfunction matchResourceToToken(IERC20Upgradeable token, uint256 value) internal view returns (uint256) {\\n\\t\\tuint256 _tokenDecimals = tokenDecimals(token);\\n\\t\\tuint256 _resourceDecimals = decimals();\\n\\t\\tif (_tokenDecimals <= _resourceDecimals) {\\n\\t\\t\\treturn value.div(10**(_resourceDecimals.sub(_tokenDecimals)));\\n\\t\\t}\\n\\t\\treturn value.mul(10**(_tokenDecimals.sub(_resourceDecimals)));\\n\\t}\\n\\n\\t/// @dev return resource decimals\\n\\t/// @return resource decimals\\n\\tfunction decimals() internal pure returns (uint256) {\\n\\t\\treturn 18;\\n\\t}\\n\\n\\t/// @dev return token decimals\\n\\t/// @return token decimals\\n\\tfunction tokenDecimals(IERC20Upgradeable token) internal view returns (uint256) {\\n\\t\\t// keccak256(bytes4('decimals()'))\\n\\t\\t(bool success, bytes memory data) = address(token).staticcall(hex'313ce567');\\n\\t\\trequire(success, 'ResourceData: invalid token');\\n\\t\\treturn abi.decode(data, (uint256));\\n\\t}\\n}\\n\",\"keccak256\":\"0x0a952dc446468e24ad4fed971632b1c8408818ed86649ff01e662aa93decb050\",\"license\":\"UNLICENSE\"},\"contracts/payments/DstChainPayment.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0-only\\n\\npragma solidity >=0.8.0;\\n\\nimport '@openzeppelin/contracts-upgradeable/security/ReentrancyGuardUpgradeable.sol';\\nimport '../interfaces/IDstChainPayment.sol';\\nimport '../govers/RouterWrapper.sol';\\nimport '../access/OwnerWithdrawable.sol';\\nimport '../access/Pauser.sol';\\nimport '../libraries/ResourceData.sol';\\n\\n/// @author Alexandas\\n/// @dev Dst chain payment contract\\nabstract contract DstChainPayment is IDstChainPayment, ReentrancyGuardUpgradeable, OwnerWithdrawable, Pauser, RouterWrapper {\\n\\n\\tmapping(address => uint256) internal providerBalances;\\n\\n\\tmapping(address => mapping(bytes32 => uint256)) internal fees;\\n\\n}\\n\",\"keccak256\":\"0xf1b7025279d2a43d816bd9bb781685573077a17d2b4beae5b3870debea9697fe\",\"license\":\"GPL-3.0-only\"},\"contracts/payments/DstChainPaymentV2.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0-only\\n\\npragma solidity >=0.8.0;\\n\\nimport './DstChainPayment.sol';\\nimport '@openzeppelin/contracts-upgradeable/utils/cryptography/draft-EIP712Upgradeable.sol';\\nimport '../proxy/AdminWrapper.sol';\\n\\ncontract DstChainPaymentV2 is DstChainPayment, AdminWrapper, EIP712Upgradeable {\\n\\tusing ResourceData for ResourceData.ValuePayloads;\\n\\tusing SafeMathUpgradeable for uint256;\\n\\tusing SafeERC20Upgradeable for IERC20Upgradeable;\\n\\n\\tbytes32 public voucherTypedHash;\\n\\n\\t// provider -> nonce -> amount\\n\\tmapping(address => mapping(uint256 => uint256)) public vouchers;\\n\\n\\tfunction initializeEIP712(string memory name, string memory version, string memory types) external onlyAdmin reinitializer(2) {\\n\\t\\t__EIP712_init(name, version);\\n\\t\\tvoucherTypedHash = keccak256(bytes(types));\\n\\t}\\n\\n\\t/// @dev pay from source chain only called by message receiver\\n\\t/// @param message payment payload message bytes\\n\\tfunction celerExec(bytes calldata message) external override onlyMessageReceiver whenNotPaused {\\n\\t\\t(address provider, bytes32 account, ResourceData.ValuePayload[] memory payloads, uint256 nonce, uint256 amount, bytes memory signature) = decodeMessage(message);\\n\\t\\tIERC20Upgradeable token = router.Token();\\n\\t\\tuint256 value = _pay(token, provider, account, payloads, nonce, amount, signature);\\n\\t\\temit Paid(provider, account, payloads, value, nonce, amount);\\n\\t}\\n\\n\\tfunction pay(address provider, bytes32 account, ResourceData.ValuePayload[] memory payloads, uint256 nonce, uint256 amount, bytes memory signature) external whenNotPaused nonReentrant returns (uint256 value) {\\n\\t\\tIERC20Upgradeable token = router.Token();\\n\\t\\tvalue = _pay(token, provider, account, payloads, nonce, amount, signature);\\n\\t\\tif (value > 0) {\\n\\t\\t\\ttoken.safeTransferFrom(msg.sender, address(this), value);\\n\\t\\t}\\n\\t\\temit Paid(provider, account, payloads, value, nonce, amount);\\n\\t}\\n\\n\\tfunction _pay(IERC20Upgradeable token, address provider, bytes32 account, ResourceData.ValuePayload[] memory payloads, uint256 nonce, uint256 amount, bytes memory signature) internal returns(uint256 value){\\n\\t\\trequire(router.ProviderController().accountExists(provider, account), 'DstChainPayment: nonexistent account');\\n\\t\\tvalue = _processPayloads(provider, account, payloads);\\n\\t\\tif (amount > 0) {\\n\\t\\t\\trequire(vouchers[provider][nonce] == 0, 'DstChainPayment: nonce exists');\\n\\t\\t\\tbytes32 hash = hashTypedDataV4ForVoucher(provider, account, nonce, amount);\\n\\t\\t\\trequire(router.ProviderRegistry().isValidSignature(provider, hash, signature), 'DstChainPayment: invalid signature');\\n\\t\\t\\tif (value > amount) {\\n\\t\\t\\t\\tvalue -= amount;\\n\\t\\t\\t} else {\\n\\t\\t\\t\\tvalue = 0;\\n\\t\\t\\t}\\n\\t\\t\\tvouchers[provider][nonce] = amount;\\n\\t\\t}\\n\\t\\tif (value > 0) {\\n\\t\\t\\tvalue = ResourceData.matchResourceToToken(token, value);\\n\\t\\t\\tproviderBalances[provider] = providerBalances[provider] + value;\\n\\t\\t\\tfees[provider][account] = fees[provider][account] + value;\\n\\t\\t}\\n\\t}\\n\\n\\tfunction _processPayloads(\\n\\t\\taddress provider,\\n\\t\\tbytes32 account,\\n\\t\\tResourceData.ValuePayload[] memory payloads\\n\\t) internal returns (uint256 value) {\\n\\t\\trequire(payloads.length > 0, 'DstChainPayment: invalid payloads');\\n\\t\\tIResourcePriceAdaptor adaptor = router.ResourcePriceAdaptor();\\n\\t\\tfor (uint256 i = 0; i < payloads.length; i++) {\\n\\t\\t\\tResourceData.ValuePayload memory payload = payloads[i];\\n\\t\\t\\tif (payload.resourceType == ResourceData.ResourceType.BuildingTime) {\\n\\t\\t\\t\\trequire(payload.values.length == 1, 'DstChainPayment: invalid value length for BuildingTime');\\n\\t\\t\\t\\tuint256 amount = adaptor.getAmountOf(provider, payload.resourceType, payload.values[0]);\\n\\t\\t\\t\\trouter.BuildingTimeController().paymentAllocate(provider, account, amount);\\n\\t\\t\\t} else if (payload.resourceType == ResourceData.ResourceType.ARStorage) {\\n\\t\\t\\t\\trequire(payload.values.length == 1, 'DstChainPayment: invalid value length for ARStorage');\\n\\t\\t\\t\\tuint256 amount = adaptor.getAmountOf(provider, payload.resourceType, payload.values[0]);\\n\\t\\t\\t\\trouter.ARStorageController().paymentAllocate(provider, account, amount);\\n\\t\\t\\t} else if (payload.resourceType == ResourceData.ResourceType.Bandwidth) {\\n\\t\\t\\t\\trequire(payload.values.length == 1, 'DstChainPayment: invalid value length for Bandwidth');\\n\\t\\t\\t\\tuint256 amount = adaptor.getAmountOf(provider, payload.resourceType, payload.values[0]);\\n\\t\\t\\t\\trouter.BandwidthController().paymentAllocate(provider, account, amount);\\n\\t\\t\\t} else if (payload.resourceType == ResourceData.ResourceType.IPFSStorage) {\\n\\t\\t\\t\\trequire(payload.values.length == 2, 'DstChainPayment: invalid value length for IPFSStorage');\\n\\t\\t\\t\\t(uint256 amount, uint256 expiration) = ipfsAllocations(provider, account, payload.values[0], payload.values[1]);\\n\\t\\t\\t\\trouter.IPFSStorageController().paymentAllocate(provider, account, amount, expiration);\\n\\t\\t\\t} else {\\n\\t\\t\\t\\trevert('DstChainPayment: unknown resource type');\\n\\t\\t\\t}\\n\\n\\t\\t\\tfor (uint256 j = 0; j < payload.values.length; j++) {\\n\\t\\t\\t\\tvalue = value.add(payload.values[j]);\\n\\t\\t\\t}\\n\\t\\t}\\n\\t}\\n\\n\\tfunction decodeMessage(bytes memory message)\\n\\t\\tpublic\\n\\t\\tpure\\n\\t\\treturns (\\n\\t\\t\\taddress provider,\\n\\t\\t\\tbytes32 account,\\n\\t\\t\\tResourceData.ValuePayload[] memory payloads,\\n\\t\\t\\tuint256 nonce,\\n\\t\\t\\tuint256 amount,\\n\\t\\t\\tbytes memory signature\\n\\t\\t)\\n\\t{\\n\\t\\t(provider, account, payloads, nonce, amount, signature) = abi.decode(message, (address, bytes32, ResourceData.ValuePayload[], uint256, uint256, bytes));\\n\\t}\\n\\n\\t/// @dev calculate fee for ipfs storage and expiration\\n\\t/// @param provider provider address\\n\\t/// @param account user account\\n\\t/// @param amount ipfs storage amount\\n\\t/// @param expiration ipfs expiration(in seconds)\\n\\t/// @return storageFee ipfs storage fee\\n\\t/// @return expirationFee ipfs expiration fee\\n\\tfunction ipfsAlloctionsFee(\\n\\t\\taddress provider,\\n\\t\\tbytes32 account,\\n\\t\\tuint256 amount,\\n\\t\\tuint256 expiration\\n\\t) public view override returns (uint256 storageFee, uint256 expirationFee) {\\n\\t\\tIIPFSStorageController controller = router.IPFSStorageController();\\n\\t\\taddress p = provider;\\n\\t\\tbytes32 a = account;\\n\\t\\tif (controller.isExpired(p, a)) {\\n\\t\\t\\trequire(amount > 0 && expiration > 0, 'DstChainPayment: invalid params for expired account');\\n\\t\\t\\tstorageFee = getValueOf(p, ResourceData.ResourceType.IPFSStorage, amount);\\n\\t\\t\\texpirationFee = storageFee.mul(expiration);\\n\\t\\t} else {\\n\\t\\t\\trequire(amount > 0 || expiration > 0, 'DstChainPayment: invalid params');\\n\\t\\t\\tstorageFee = amount.mul(getValueOf(p, ResourceData.ResourceType.IPFSStorage, controller.availableExpiration(p, a)));\\n\\t\\t\\texpirationFee = expiration.mul(getValueOf(p, ResourceData.ResourceType.IPFSStorage, controller.balanceOf(p, a).add(amount)));\\n\\t\\t}\\n\\t}\\n\\n\\t/// @dev calculate ipfs storage and expiration with storage fee and expiration fee\\n\\t/// @param provider provider address\\n\\t/// @param account user account\\n\\t/// @param storageFee storage fee\\n\\t/// @param expirationFee expiration fee\\n\\t/// @return amount ipfs storage amount\\n\\t/// @return expiration ipfs expiration(in seconds)\\n\\tfunction ipfsAllocations(\\n\\t\\taddress provider,\\n\\t\\tbytes32 account,\\n\\t\\tuint256 storageFee,\\n\\t\\tuint256 expirationFee\\n\\t) public view override returns (uint256 amount, uint256 expiration) {\\n\\t\\tIIPFSStorageController controller = router.IPFSStorageController();\\n\\t\\taddress p = provider;\\n\\t\\tbytes32 a = account;\\n\\t\\tif (controller.isExpired(p, a)) {\\n\\t\\t\\trequire(storageFee > 0 && expirationFee > 0, 'DstChainPayment: invalid params for expired account');\\n\\t\\t\\tamount = storageFee.div(priceOf(p, ResourceData.ResourceType.IPFSStorage));\\n\\t\\t\\texpiration = expirationFee.div(storageFee);\\n\\t\\t} else {\\n\\t\\t\\trequire(storageFee > 0 || expirationFee > 0, 'DstChainPayment: invalid params');\\n\\t\\t\\tamount = storageFee.div(getValueOf(p, ResourceData.ResourceType.IPFSStorage, controller.availableExpiration(p, a)));\\n\\t\\t\\texpiration = expirationFee.div(getValueOf(p, ResourceData.ResourceType.IPFSStorage, controller.balanceOf(p, a).add(amount)));\\n\\t\\t}\\n\\t}\\n\\n\\t/// @dev return balance of provider\\n\\t/// @param provider provider address\\n\\t/// @return balance of provider\\n\\tfunction balanceOf(address provider) public view override returns (uint256) {\\n\\t\\trequire(router.ProviderRegistry().isProvider(provider), 'DstChainPayment: nonexistent provider');\\n\\t\\treturn providerBalances[provider];\\n\\t}\\n\\n\\t/// @dev return resource price\\n\\t/// @param provider provider address\\n\\t/// @param resourceType resource type\\n\\t/// @return resource price\\n\\tfunction priceOf(address provider, ResourceData.ResourceType resourceType) public view override returns (uint256) {\\n\\t\\tIResourcePriceAdaptor adaptor = router.ResourcePriceAdaptor();\\n\\t\\treturn adaptor.priceOf(provider, resourceType);\\n\\t}\\n\\n\\t/// @dev return value of amount resource\\n\\t/// @param provider provider address\\n\\t/// @param resourceType resource type\\n\\t/// @param amount resource amount\\n\\t/// @return token value\\n\\tfunction getValueOf(\\n\\t\\taddress provider,\\n\\t\\tResourceData.ResourceType resourceType,\\n\\t\\tuint256 amount\\n\\t) public view override returns (uint256) {\\n\\t\\tIResourcePriceAdaptor adaptor = router.ResourcePriceAdaptor();\\n\\t\\treturn adaptor.getValueOf(provider, resourceType, amount);\\n\\t}\\n\\n\\t/// @dev return resource amount with value\\n\\t/// @param provider provider address\\n\\t/// @param resourceType resource type\\n\\t/// @param value token value\\n\\t/// @return resource amount\\n\\tfunction getAmountOf(\\n\\t\\taddress provider,\\n\\t\\tResourceData.ResourceType resourceType,\\n\\t\\tuint256 value\\n\\t) public view override returns (uint256) {\\n\\t\\tIResourcePriceAdaptor adaptor = router.ResourcePriceAdaptor();\\n\\t\\treturn adaptor.getAmountOf(provider, resourceType, value);\\n\\t}\\n\\n\\tfunction hashVoucherTypes(\\n\\t\\taddress provider,\\n\\t\\tbytes32 account,\\n\\t\\tuint256 nonce,\\n\\t\\tuint256 amount\\n\\t) public view returns (bytes32) {\\n\\t\\treturn keccak256(abi.encode(voucherTypedHash, provider, account, nonce, amount));\\n\\t}\\n\\n\\tfunction hashTypedDataV4ForVoucher(\\n\\t\\taddress provider,\\n\\t\\tbytes32 account,\\n\\t\\tuint256 nonce,\\n\\t\\tuint256 amount\\n\\t) public view returns (bytes32) {\\n\\t\\treturn _hashTypedDataV4(hashVoucherTypes(provider, account, nonce, amount));\\n\\t}\\n\\n\\tfunction providerBalance(address provider) public view returns(uint256) {\\n\\t\\treturn providerBalances[provider];\\n\\t}\\n\\n\\tfunction fee(address provider, bytes32 account) public view returns(uint256) {\\n\\t\\treturn fees[provider][account];\\n\\t}\\n\\n}\",\"keccak256\":\"0x5b1cf6ccf49d0d96b4edc7eaf96048a963e34814993a3c9e5a58c955d69e11d1\",\"license\":\"GPL-3.0-only\"},\"contracts/payments/DstChainPaymentV2Registration.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0-only\\n\\npragma solidity >=0.8.0;\\n\\nimport './DstChainPaymentV2.sol';\\nimport '../interfaces/IProviderControllerV2Registration.sol';\\n\\ncontract DstChainPaymentV2Registration is DstChainPaymentV2 {\\n\\tusing ResourceData for ResourceData.ValuePayloads;\\n\\tusing SafeMathUpgradeable for uint256;\\n\\tusing SafeERC20Upgradeable for IERC20Upgradeable;\\n\\n\\tfunction payWithRegistration(\\n\\t\\taddress provider, \\n\\t\\tbytes32 account, \\n\\t\\tResourceData.ValuePayload[] memory payloads, \\n\\t\\tuint256 nonce, \\n\\t\\tuint256 amount, \\n\\t\\tbytes memory voucherSig, \\n\\t\\tbytes memory registrationSig\\n\\t) external whenNotPaused nonReentrant returns (uint256 value) {\\n\\t\\tIProviderControllerV2Registration pcr = IProviderControllerV2Registration(address(router.ProviderController()));\\n\\t\\tpcr.registerAccount(provider, account, registrationSig);\\n\\t\\tIERC20Upgradeable token = router.Token();\\n\\t\\tvalue = _pay(token, provider, account, payloads, nonce, amount, voucherSig);\\n\\t\\tif (value > 0) {\\n\\t\\t\\ttoken.safeTransferFrom(msg.sender, address(this), value);\\n\\t\\t}\\n\\t\\temit Paid(provider, account, payloads, value, nonce, amount);\\n\\t}\\n\\n}\",\"keccak256\":\"0x54988a4da4d389ee5af3c68b66b7b1d5b95b91798dde7d1c44a56860456b2aaf\",\"license\":\"GPL-3.0-only\"},\"contracts/proxy/AdminWrapper.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSE\\n\\npragma solidity >=0.8.0;\\n\\nimport '@openzeppelin/contracts/utils/StorageSlot.sol';\\n\\n/// @author Alexandas\\n/// @dev proxy admin wrapper\\ncontract AdminWrapper {\\n\\t/// @dev return admin address from storage slot\\n\\t/// @return admin admin contract address\\n\\tfunction _getAdmin() internal view returns (address) {\\n\\t\\t// bytes32(uint256(keccak256(\\\"eip1967.proxy.admin\\\")) - 1))\\n\\t\\tbytes32 _ADMIN_SLOT = 0xb53127684a568b3173ae13b9f8a6016e243e63b6e8ee1178d6a717850b5d6103;\\n\\t\\treturn StorageSlot.getAddressSlot(_ADMIN_SLOT).value;\\n\\t}\\n\\n\\tmodifier onlyAdmin() {\\n\\t\\trequire(msg.sender == _getAdmin(), 'AdminWrapper: caller is not the admin');\\n\\t\\t_;\\n\\t}\\n}\\n\",\"keccak256\":\"0xbb850da58260942952188061decf7dc2c4246e7e699dc129f28924702c6d389d\",\"license\":\"UNLICENSE\"},\"contracts/resources/interfaces/IIPFSStorageController.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSE\\n\\npragma solidity >=0.8.0;\\nimport '@openzeppelin/contracts-upgradeable/utils/math/SafeMathUpgradeable.sol';\\n\\n/// @author Alexandas\\n/// @dev IPFS storage controller interface\\ninterface IIPFSStorageController {\\n\\tstruct Storage {\\n\\t\\tuint256 startTime;\\n\\t\\tuint256 expiration;\\n\\t\\tuint256 amount;\\n\\t}\\n\\n\\t/// @dev emit when ipfs storage allocated for the provider\\n\\t/// @param provider provider address\\n\\t/// @param amount ipfs storage amount\\n\\t/// @param expiration ipfs storage expiration\\n\\tevent ProviderAllocated(address provider, uint256 amount, uint256 expiration);\\n\\n\\t/// @dev emit when ipfs storage allocated for the account\\n\\t/// @param provider provider address\\n\\t/// @param account user account\\n\\t/// @param amount ipfs storage amount\\n\\t/// @param expiration ipfs storage expiration\\n\\tevent AccountAllocated(address provider, bytes32 account, uint256 amount, uint256 expiration);\\n\\n\\t/// @dev emit when provider recovered ipfs storage\\n\\t/// @param provider provider address\\n\\t/// @param account user account\\n\\t/// @param amount ipfs storage amount\\n\\tevent ProviderRecovered(address provider, bytes32 account, uint256 amount);\\n\\n\\t/// @dev allocate user's normal resource balance\\n\\t/// @param provider provider address\\n\\t/// @param amount resource amount\\n\\t/// @param expiration ipfs expiration\\n\\tfunction allocateProvider(address provider, uint256 amount, uint256 expiration) external;\\n\\n\\t/// @dev provider drip resource to account directly\\n\\t/// @param provider provider address\\n\\t/// @param account user account\\n\\t/// @param amount ipfs storage amount\\n\\t/// @param expiration ipfs expiration\\n\\tfunction drip(address provider, bytes32 account, uint256 amount, uint256 expiration) external;\\n\\n\\t/// @dev allocate user's resource balance\\n\\t/// @param provider provider address\\n\\t/// @param account user account\\n\\t/// @param amount ipfs storage amount\\n\\t/// @param expiration ipfs expiration\\n\\tfunction paymentAllocate(address provider, bytes32 account, uint256 amount, uint256 expiration) external;\\n\\n\\t/// @dev recover provider storage\\n\\t/// @param provider provider address\\n\\t/// @param account user account\\n\\tfunction recoverStorage(address provider, bytes32 account) external;\\n\\n\\t/// @dev return whether ipfs storage is expired for the provider\\n\\t/// @param provider provider address\\n\\t/// @return whether ipfs storage is expired for the provider\\n\\tfunction isProviderExpired(address provider) external view returns (bool);\\n\\n\\t/// @dev return ipfs storage start time for the provider\\n\\t/// @param provider provider address\\n\\t/// @return start time for the provider\\n\\tfunction providerStartTime(address provider) external view returns (uint256);\\n\\n\\t/// @dev return total expiration time for the provider\\n\\t/// @param provider provider address\\n\\t/// @return total expiration time for the provider\\n\\tfunction providerExpiration(address provider) external view returns (uint256);\\n\\n\\t/// @dev return available expiration time for the provider\\n\\t/// @param provider provider address\\n\\t/// @return available expiration time for the provider\\n\\tfunction providerAvailableExpiration(address provider) external view returns (uint256);\\n\\n\\t/// @dev return when the provider will expire\\n\\t/// @param provider provider address\\n\\t/// @return when the provider will expire\\n\\tfunction providerExpiredAt(address provider) external view returns (uint256);\\n\\n\\t/// @dev return ipfs storage amount for the provider\\n\\t/// @param provider provider address\\n\\t/// @return ipfs storage amount for the provider\\n\\tfunction providerBalanceOf(address provider) external view returns (uint256);\\n\\n\\t/// @dev return whether ipfs storage is expired for the account\\n\\t/// @param provider provider address\\n\\t/// @param account user account\\n\\t/// @return whether ipfs storage is expired for the account\\n\\tfunction isExpired(address provider, bytes32 account) external view returns (bool);\\n\\n\\t/// @dev return available expiration time for the account\\n\\t/// @param provider provider address\\n\\t/// @param account user account\\n\\t/// @return available expiration time for the account\\n\\tfunction availableExpiration(address provider, bytes32 account) external view returns (uint256);\\n\\n\\t/// @dev return when the account will expire\\n\\t/// @param provider provider address\\n\\t/// @param account user account\\n\\t/// @return when the account will expire\\n\\tfunction expiredAt(address provider, bytes32 account) external view returns (uint256);\\n\\n\\t/// @dev return ipfs storage start time for the account\\n\\t/// @param provider provider address\\n\\t/// @param account user account\\n\\t/// @return start time for the account\\n\\tfunction startTime(address provider, bytes32 account) external view returns (uint256);\\n\\n\\t/// @dev return total expiration time for the account\\n\\t/// @param provider provider address\\n\\t/// @param account user account\\n\\t/// @return total expiration time for the account\\n\\tfunction expiration(address provider, bytes32 account) external view returns (uint256);\\n\\n\\t/// @dev return ipfs storage amount for the account\\n\\t/// @param provider provider address\\n\\t/// @param account user account\\n\\t/// @return ipfs storage amount for the account\\n\\tfunction balanceOf(address provider, bytes32 account) external view returns (uint256);\\n}\\n\",\"keccak256\":\"0x737cd8d689d7a0ef9211d92c8d052bda00bc16ddb06ce326ee473c3ffc09a654\",\"license\":\"UNLICENSE\"},\"contracts/resources/interfaces/INormalResourceController.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSE\\n\\npragma solidity >=0.8.0;\\n\\n/// @author Alexandas\\n/// @dev normal resource controller interface\\ninterface INormalResourceController {\\n\\n\\t/// @dev emit when resource allocated for the provider\\n\\t/// @param provider provider address\\n\\t/// @param amount ipfs storage amount\\n\\tevent ProviderAllocated(address provider, uint256 amount);\\n\\n\\t/// @dev emit when resource allocated for the account\\n\\t/// @param provider provider address\\n\\t/// @param account user account\\n\\t/// @param amount ipfs storage amount\\n\\tevent AccountAllocated(address provider, bytes32 account, uint256 amount);\\n\\n\\t/// @dev allocate resource for the provider\\n\\t/// @param provider provider address\\n\\t/// @param amount resource amount\\n\\tfunction allocateProvider(address provider, uint256 amount) external;\\n\\n\\t/// @dev allocate user's resource balance\\n\\t/// @param provider provider address\\n\\t/// @param account user account\\n\\t/// @param amount resource amount\\n\\tfunction paymentAllocate(address provider, bytes32 account, uint256 amount) external;\\n\\n\\t/// @dev provider drip resource to account directly\\n\\t/// @param provider provider address\\n\\t/// @param account user account\\n\\t/// @param amount resource amount\\n\\tfunction drip(address provider, bytes32 account, uint256 amount) external;\\n\\n\\t/// @dev resource balance\\n\\t/// @param provider provider address\\n\\t/// @param account user account\\n\\t/// @return balance of the account\\n\\tfunction balanceOf(address provider, bytes32 account) external view returns (uint256);\\n\\n\\t/// @dev resource balance\\n\\t/// @param provider provider address\\n\\t/// @return balance of the account\\n\\tfunction providerBalanceOf(address provider) external view returns (uint256);\\n\\n}\\n\",\"keccak256\":\"0x7bf2ade38bde962e0b1430090225c343458a2fa9d002d413468e442a64fe76e7\",\"license\":\"UNLICENSE\"},\"contracts/resources/interfaces/IResourcePriceAdaptor.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSE\\n\\npragma solidity >=0.8.0;\\n\\nimport '../../libraries/ResourceData.sol';\\n\\n/// @author Alexandas\\n/// @dev resource adpator interface\\ninterface IResourcePriceAdaptor {\\n\\tstruct PriceAdaptor {\\n\\t\\tResourceData.ResourceType resourceType;\\n\\t\\tuint256 price;\\n\\t}\\n\\n\\t/// @dev emit when index block updated\\n\\t/// @param provider provider address\\n\\t/// @param priceIndexBlock price index block\\n\\tevent PriceIndexBlockUpdated(address provider, uint256 priceIndexBlock);\\n\\n\\t/// @dev emit when price updated\\n\\t/// @param provider provider address\\n\\t/// @param adaptors price adaptors\\n\\tevent PriceAdaptorsUpdated(address provider, PriceAdaptor[] adaptors);\\n\\n\\t/// @dev get price for resource at a specific block\\n\\t/// @param provider provider address\\n\\t/// @param resourceType resource type\\n\\t/// @param priceIndexBlock block number\\n\\t/// @return price for resource at a specific block\\n\\tfunction priceAt(address provider, ResourceData.ResourceType resourceType, uint256 priceIndexBlock) external view returns (uint256);\\n\\n\\t/// @dev get value for `amount` resource at a specific block\\n\\t/// @param provider provider address\\n\\t/// @param resourceType resource type\\n\\t/// @param amount resource amount\\n\\t/// @param priceIndexBlock block number\\n\\t/// @return token value in resource decimals(18)\\n\\tfunction getValueAt(\\n\\t\\taddress provider,\\n\\t\\tResourceData.ResourceType resourceType,\\n\\t\\tuint256 amount,\\n\\t\\tuint256 priceIndexBlock\\n\\t) external view returns (uint256);\\n\\n\\t/// @dev get amount resource with value at a specific block\\n\\t/// @param provider provider address\\n\\t/// @param resourceType resource type\\n\\t/// @param value token value\\n\\t/// @param priceIndexBlock block numer\\n\\t/// @return resource amount\\n\\tfunction getAmountAt(\\n\\t\\taddress provider,\\n\\t\\tResourceData.ResourceType resourceType,\\n\\t\\tuint256 value,\\n\\t\\tuint256 priceIndexBlock\\n\\t) external view returns (uint256);\\n\\n\\t/// @dev return resource price\\n\\t/// @param provider provider address\\n\\t/// @param resourceType resource type\\n\\t/// @return resource price\\n\\tfunction priceOf(address provider, ResourceData.ResourceType resourceType) external view returns (uint256);\\n\\n\\t/// @dev return value of amount resource\\n\\t/// @param provider provider address\\n\\t/// @param resourceType resource type\\n\\t/// @param amount resource amount\\n\\t/// @return token value in resource decimals(18)\\n\\tfunction getValueOf(address provider, ResourceData.ResourceType resourceType, uint256 amount) external view returns (uint256);\\n\\n\\t/// @dev return resource amount with value\\n\\t/// @param provider provider address\\n\\t/// @param resourceType resource type\\n\\t/// @param value token value in resource decimals(18)\\n\\t/// @return resource amount\\n\\tfunction getAmountOf(address provider, ResourceData.ResourceType resourceType, uint256 value) external view returns (uint256);\\n\\n}\\n\",\"keccak256\":\"0x777f11784c9b845ea144fa0eb3b33596e123e1f70f2952e9d7c24ce576fcf10d\",\"license\":\"UNLICENSE\"}},\"version\":1}",
  "bytecode": "0x608060405234801561001057600080fd5b50614309806100206000396000f3fe608060405234801561001057600080fd5b50600436106101e55760003560e01c806380f51c121161010f578063a322c81d116100a2578063eec9a00d11610071578063eec9a00d14610442578063f2fde38b14610455578063f887ea4014610468578063f8eb66241461048857600080fd5b8063a322c81d146103bd578063b76bfac2146103f3578063ce841dd21461041c578063e1e382d91461042f57600080fd5b80638da5cb5b116100de5780638da5cb5b1461035d57806393563a95146103765780639412cbe51461038957806394e48f891461039c57600080fd5b806380f51c1214610315578063827fbd1d1461033857806382dc1ec4146103425780638456cb591461035557600080fd5b80636267834e116101875780636b2c0f55116101565780636b2c0f55146102df5780636ef8d66d146102f257806370a08231146102fa578063715018a61461030d57600080fd5b80636267834e14610281578063634d45b21461029457806365d6b40c146102b9578063699256f4146102cc57600080fd5b806342747d90116101c357806342747d901461023057806346fbf68e146102435780635c975abb146102635780635e1a544c1461026e57600080fd5b806309d629ef146101ea57806335da9b23146102135780633f4ba83a14610226575b600080fd5b6101fd6101f83660046128db565b6104b4565b60405161020a9190612947565b60405180910390f35b6101fd61022136600461296d565b6104f3565b61022e61060a565b005b6101fd61023e3660046128db565b610642565b6102566102513660046129bd565b610661565b60405161020a91906129e6565b60975460ff16610256565b6101fd61027c3660046129f4565b61067f565b61022e61028f366004612a82565b610793565b6102a76102a2366004612bbd565b61099c565b60405161020a96959493929190612d9d565b6101fd6102c736600461296d565b6109ce565b61022e6102da366004612e04565b610a8a565b61022e6102ed3660046129bd565b610b38565b61022e610b6e565b6101fd6103083660046129bd565b610b77565b61022e610ca7565b6102566103233660046129bd565b60c96020526000908152604090205460ff1681565b6101fd6101015481565b61022e6103503660046129bd565b610cdb565b61022e610d0e565b6065546001600160a01b031660405161020a9190612e37565b61022e610384366004612e64565b610d3b565b61022e610397366004612e99565b610dac565b6103af6103aa3660046128db565b610e80565b60405161020a929190612f2c565b6101fd6103cb366004612e04565b6001600160a01b0391909116600090815260cc60209081526040808320938352929052205490565b6101fd6104013660046129bd565b6001600160a01b0316600090815260cb602052604090205490565b6103af61042a3660046128db565b611140565b6101fd61043d3660046130de565b611346565b6101fd61045036600461319c565b611494565b61022e6104633660046129bd565b6116d1565b60ca5461047b906001600160a01b031681565b60405161020a919061329d565b6101fd610496366004612e04565b61010260209081526000928352604080842090915290825290205481565b600061010154858585856040516020016104d29594939291906132ab565b6040516020818303038152906040528051906020012090505b949350505050565b60008060ca60009054906101000a90046001600160a01b03166001600160a01b03166337187fc36040518163ffffffff1660e01b815260040160206040518083038186803b15801561054457600080fd5b505afa158015610558573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061057c9190613302565b6040516335da9b2360e01b81529091506001600160a01b038216906335da9b23906105af90889088908890600401613323565b60206040518083038186803b1580156105c757600080fd5b505afa1580156105db573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906105ff9190613356565b9150505b9392505050565b61061333610661565b6106385760405162461bcd60e51b815260040161062f906133ac565b60405180910390fd5b61064061172a565b565b6000610658610653868686866104b4565b611790565b95945050505050565b6001600160a01b0316600090815260c9602052604090205460ff1690565b60008060ca60009054906101000a90046001600160a01b03166001600160a01b03166337187fc36040518163ffffffff1660e01b815260040160206040518083038186803b1580156106d057600080fd5b505afa1580156106e4573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906107089190613302565b604051631786951360e21b81529091506001600160a01b03821690635e1a544c9061073990879087906004016133bc565b60206040518083038186803b15801561075157600080fd5b505afa158015610765573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906107899190613356565b9150505b92915050565b60ca54604080516303bf7e6b60e21b815290516000926001600160a01b031691630efdf9ac916004808301926020929190829003018186803b1580156107d857600080fd5b505afa1580156107ec573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061081091906133e2565b9050336001600160a01b0382161461083a5760405162461bcd60e51b815260040161062f90613450565b60975460ff161561085d5760405162461bcd60e51b815260040161062f90613487565b6000806000806000806108a589898080601f01602080910402602001604051908101604052809392919081815260200183838082843760009201919091525061099c92505050565b955095509550955095509550600060ca60009054906101000a90046001600160a01b03166001600160a01b031663c24126766040518163ffffffff1660e01b815260040160206040518083038186803b15801561090157600080fd5b505afa158015610915573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906109399190613302565b9050600061094c828989898989896117a3565b90507fd69233c4d4c07911a44762fb49e793100eb94db44cf846ddcec7f6210e9c143a88888884898960405161098796959493929190613497565b60405180910390a15050505050505050505050565b60008060606000806060868060200190518101906109ba91906136ae565b949c939b5091995097509550909350915050565b60008060ca60009054906101000a90046001600160a01b03166001600160a01b03166337187fc36040518163ffffffff1660e01b815260040160206040518083038186803b158015610a1f57600080fd5b505afa158015610a33573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610a579190613302565b604051631975ad0360e21b81529091506001600160a01b038216906365d6b40c906105af90889088908890600401613323565b6065546001600160a01b03163314610ab45760405162461bcd60e51b815260040161062f90613791565b6040516000906001600160a01b0384169083156108fc0290849084818181858888f19350505050905080610afa5760405162461bcd60e51b815260040161062f906137ed565b7f2c876ecb97b3c6854f2488d373403f903eacb800e51c159a5c0c7a9c857e48278383604051610b2b9291906137fd565b60405180910390a1505050565b6065546001600160a01b03163314610b625760405162461bcd60e51b815260040161062f90613791565b610b6b81611b27565b50565b61064033611b27565b60ca54604080516314b47ed960e31b815290516000926001600160a01b03169163a5a3f6c8916004808301926020929190829003018186803b158015610bbc57600080fd5b505afa158015610bd0573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610bf49190613302565b6001600160a01b0316636b074a07836040518263ffffffff1660e01b8152600401610c1f9190612e37565b60206040518083038186803b158015610c3757600080fd5b505afa158015610c4b573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610c6f919061381e565b610c8b5760405162461bcd60e51b815260040161062f90613881565b506001600160a01b0316600090815260cb602052604090205490565b6065546001600160a01b03163314610cd15760405162461bcd60e51b815260040161062f90613791565b6106406000611ba7565b6065546001600160a01b03163314610d055760405162461bcd60e51b815260040161062f90613791565b610b6b81611bf9565b610d1733610661565b610d335760405162461bcd60e51b815260040161062f906133ac565b610640611c72565b6065546001600160a01b03163314610d655760405162461bcd60e51b815260040161062f90613791565b610d796001600160a01b0384168383611cca565b7f2717ead6b9200dd235aad468c9809ea400fe33ac69b5bfaa6d3e90fc922b6398838383604051610b2b93929190613891565b7fb53127684a568b3173ae13b9f8a6016e243e63b6e8ee1178d6a717850b5d6103546001600160a01b03163314610df55760405162461bcd60e51b815260040161062f906138ee565b60026000610e0282611d25565b90508015610e1a576000805461ff0019166101001790555b610e248585611db2565b82516020840120610101558015610e79576000805461ff00191690556040517f7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb384740249890610e70908490613907565b60405180910390a15b5050505050565b600080600060ca60009054906101000a90046001600160a01b03166001600160a01b031663740e80616040518163ffffffff1660e01b815260040160206040518083038186803b158015610ed357600080fd5b505afa158015610ee7573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610f0b9190613302565b60405162f304db60e01b8152909150879087906001600160a01b0384169062f304db90610f3e9085908590600401613915565b60206040518083038186803b158015610f5657600080fd5b505afa158015610f6a573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610f8e919061381e565b15610fde57600087118015610fa35750600086115b610fbf5760405162461bcd60e51b815260040161062f90613973565b610fcb826004896104f3565b9450610fd78587611de7565b9350611134565b6000871180610fed5750600086115b6110095760405162461bcd60e51b815260040161062f906139b7565b611097611090836004866001600160a01b0316633a01873287876040518363ffffffff1660e01b8152600401611040929190613915565b60206040518083038186803b15801561105857600080fd5b505afa15801561106c573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906102219190613356565b8890611de7565b945061113161112a8360046102218b886001600160a01b0316634d30b6be89896040518363ffffffff1660e01b81526004016110d4929190613915565b60206040518083038186803b1580156110ec57600080fd5b505afa158015611100573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906111249190613356565b90611df3565b8790611de7565b93505b50505094509492505050565b600080600060ca60009054906101000a90046001600160a01b03166001600160a01b031663740e80616040518163ffffffff1660e01b815260040160206040518083038186803b15801561119357600080fd5b505afa1580156111a7573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906111cb9190613302565b60405162f304db60e01b8152909150879087906001600160a01b0384169062f304db906111fe9085908590600401613915565b60206040518083038186803b15801561121657600080fd5b505afa15801561122a573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061124e919061381e565b156112a0576000871180156112635750600086115b61127f5760405162461bcd60e51b815260040161062f90613973565b61129461128d83600461067f565b8890611dff565b9450610fd78688611dff565b60008711806112af5750600086115b6112cb5760405162461bcd60e51b815260040161062f906139b7565b61130261128d836004866001600160a01b0316633a01873287876040518363ffffffff1660e01b8152600401611040929190613915565b945061113161133f83600461022189886001600160a01b0316634d30b6be89896040518363ffffffff1660e01b81526004016110d4929190613915565b8790611dff565b600061135460975460ff1690565b156113715760405162461bcd60e51b815260040161062f90613487565b600260015414156113945760405162461bcd60e51b815260040161062f906139fb565b600260015560ca5460408051636120933b60e11b815290516000926001600160a01b03169163c2412676916004808301926020929190829003018186803b1580156113de57600080fd5b505afa1580156113f2573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906114169190613302565b9050611427818989898989896117a3565b91508115611444576114446001600160a01b038216333085611e0b565b7fd69233c4d4c07911a44762fb49e793100eb94db44cf846ddcec7f6210e9c143a88888885898960405161147d96959493929190613497565b60405180910390a150600180559695505050505050565b60006114a260975460ff1690565b156114bf5760405162461bcd60e51b815260040161062f90613487565b600260015414156114e25760405162461bcd60e51b815260040161062f906139fb565b600260015560ca54604080516350e420e560e11b815290516000926001600160a01b03169163a1c841ca916004808301926020929190829003018186803b15801561152c57600080fd5b505afa158015611540573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906115649190613302565b6040516382f19cf760e01b81529091506001600160a01b038216906382f19cf790611597908c908c908890600401613a0b565b600060405180830381600087803b1580156115b157600080fd5b505af11580156115c5573d6000803e3d6000fd5b50505050600060ca60009054906101000a90046001600160a01b03166001600160a01b031663c24126766040518163ffffffff1660e01b815260040160206040518083038186803b15801561161957600080fd5b505afa15801561162d573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906116519190613302565b9050611662818b8b8b8b8b8b6117a3565b9250821561167f5761167f6001600160a01b038216333086611e0b565b7fd69233c4d4c07911a44762fb49e793100eb94db44cf846ddcec7f6210e9c143a8a8a8a868b8b6040516116b896959493929190613497565b60405180910390a1505060018055979650505050505050565b6065546001600160a01b031633146116fb5760405162461bcd60e51b815260040161062f90613791565b6001600160a01b0381166117215760405162461bcd60e51b815260040161062f90613a7b565b610b6b81611ba7565b60975460ff1661174c5760405162461bcd60e51b815260040161062f90613ab6565b6097805460ff191690557f5db9ee0a495bf2e6ff9c91a7834c1ba4fdd244a5e8aa4e537bd38aeae4b073aa335b6040516117869190612e37565b60405180910390a1565b600061078d61179d611e32565b83611e6e565b60ca54604080516350e420e560e11b815290516000926001600160a01b03169163a1c841ca916004808301926020929190829003018186803b1580156117e857600080fd5b505afa1580156117fc573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906118209190613302565b6001600160a01b0316632d52976488886040518363ffffffff1660e01b815260040161184d929190613915565b60206040518083038186803b15801561186557600080fd5b505afa158015611879573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061189d919061381e565b6118b95760405162461bcd60e51b815260040161062f90613b07565b6118c4878787611ea1565b90508215611a88576001600160a01b0387166000908152610102602090815260408083208784529091529020541561190e5760405162461bcd60e51b815260040161062f90613b4b565b600061191c88888787610642565b905060ca60009054906101000a90046001600160a01b03166001600160a01b031663a5a3f6c86040518163ffffffff1660e01b815260040160206040518083038186803b15801561196c57600080fd5b505afa158015611980573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906119a49190613302565b6001600160a01b031663238a4d1e8983866040518463ffffffff1660e01b81526004016119d393929190613a0b565b602060405180830381600087803b1580156119ed57600080fd5b505af1158015611a01573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611a25919061381e565b611a415760405162461bcd60e51b815260040161062f90613b9a565b83821115611a5a57611a538483613bc0565b9150611a5f565b600091505b506001600160a01b03871660009081526101026020908152604080832087845290915290208390555b8015611b1c57611a9888826125c1565b6001600160a01b038816600090815260cb6020526040902054909150611abf908290613bd7565b6001600160a01b038816600090815260cb602090815260408083209390935560cc815282822089835290522054611af7908290613bd7565b6001600160a01b038816600090815260cc602090815260408083208a84529091529020555b979650505050505050565b611b3081610661565b611b4c5760405162461bcd60e51b815260040161062f90613c23565b6001600160a01b038116600090815260c9602052604090819020805460ff19169055517fcd265ebaf09df2871cc7bd4133404a235ba12eff2041bb89d9c714a2621c7c7e90611b9c908390612e37565b60405180910390a150565b606580546001600160a01b038381166001600160a01b0319831681179093556040519116919082907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a35050565b611c0281610661565b15611c1f5760405162461bcd60e51b815260040161062f90613c71565b6001600160a01b038116600090815260c9602052604090819020805460ff19166001179055517f6719d08c1888103bea251a4ed56406bd0c3e69723c8a1686e017e7bbe159b6f890611b9c908390612e37565b60975460ff1615611c955760405162461bcd60e51b815260040161062f90613487565b6097805460ff191660011790557f62e78cea01bee320cd4e420270b5ea74000d11b0c9f74754ebdbfc544b05a2586117793390565b611d208363a9059cbb60e01b8484604051602401611ce9929190613915565b60408051601f198184030181529190526020810180516001600160e01b03166001600160e01b03199093169290921790915261261f565b505050565b60008054610100900460ff1615611d6c578160ff166001148015611d485750303b155b611d645760405162461bcd60e51b815260040161062f90613ccc565b506000919050565b60005460ff808416911610611d935760405162461bcd60e51b815260040161062f90613ccc565b506000805460ff191660ff92909216919091179055600190565b919050565b600054610100900460ff16611dd95760405162461bcd60e51b815260040161062f90613d24565b611de382826126ae565b5050565b60006106038284613d34565b60006106038284613bd7565b60006106038284613d69565b611e2c846323b872dd60e01b858585604051602401611ce993929190613d7d565b50505050565b6000611e697f8b73c3c69bb8fe3d512ecc4cf759cc79239f7b179b0ffacaa9a75d522b39400f611e6160cd5490565b60ce546126ef565b905090565b60008282604051602001611e83929190613d91565b60405160208183030381529060405280519060200120905092915050565b600080825111611ec35760405162461bcd60e51b815260040161062f90613e00565b60ca54604080516337187fc360e01b815290516000926001600160a01b0316916337187fc3916004808301926020929190829003018186803b158015611f0857600080fd5b505afa158015611f1c573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611f409190613302565b905060005b83518110156125b8576000848281518110611f6257611f62613e10565b6020026020010151905060016004811115611f7f57611f7f612c00565b81516004811115611f9257611f92612c00565b141561215057806020015151600114611fbd5760405162461bcd60e51b815260040161062f90613e67565b6000836001600160a01b03166365d6b40c8984600001518560200151600081518110611feb57611feb613e10565b60200260200101516040518463ffffffff1660e01b815260040161201193929190613323565b60206040518083038186803b15801561202957600080fd5b505afa15801561203d573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906120619190613356565b905060ca60009054906101000a90046001600160a01b03166001600160a01b03166322b31aba6040518163ffffffff1660e01b815260040160206040518083038186803b1580156120b157600080fd5b505afa1580156120c5573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906120e99190613302565b6001600160a01b0316630de482878989846040518463ffffffff1660e01b815260040161211893929190613e77565b600060405180830381600087803b15801561213257600080fd5b505af1158015612146573d6000803e3d6000fd5b505050505061254f565b60038151600481111561216557612165612c00565b1415612284578060200151516001146121905760405162461bcd60e51b815260040161062f90613ed0565b6000836001600160a01b03166365d6b40c89846000015185602001516000815181106121be576121be613e10565b60200260200101516040518463ffffffff1660e01b81526004016121e493929190613323565b60206040518083038186803b1580156121fc57600080fd5b505afa158015612210573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906122349190613356565b905060ca60009054906101000a90046001600160a01b03166001600160a01b031663a2d2f2db6040518163ffffffff1660e01b815260040160206040518083038186803b1580156120b157600080fd5b60028151600481111561229957612299612c00565b14156123b8578060200151516001146122c45760405162461bcd60e51b815260040161062f90613f1e565b6000836001600160a01b03166365d6b40c89846000015185602001516000815181106122f2576122f2613e10565b60200260200101516040518463ffffffff1660e01b815260040161231893929190613323565b60206040518083038186803b15801561233057600080fd5b505afa158015612344573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906123689190613356565b905060ca60009054906101000a90046001600160a01b03166001600160a01b031663f931ca566040518163ffffffff1660e01b815260040160206040518083038186803b1580156120b157600080fd5b6004815160048111156123cd576123cd612c00565b1415612537578060200151516002146123f85760405162461bcd60e51b815260040161062f90613f6e565b6000806124438989856020015160008151811061241757612417613e10565b6020026020010151866020015160018151811061243657612436613e10565b6020026020010151611140565b9150915060ca60009054906101000a90046001600160a01b03166001600160a01b031663740e80616040518163ffffffff1660e01b815260040160206040518083038186803b15801561249557600080fd5b505afa1580156124a9573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906124cd9190613302565b6001600160a01b031663a5a2d6178a8a85856040518563ffffffff1660e01b81526004016124fe9493929190613f7e565b600060405180830381600087803b15801561251857600080fd5b505af115801561252c573d6000803e3d6000fd5b50505050505061254f565b60405162461bcd60e51b815260040161062f90613ff6565b60005b8160200151518110156125a35761258f8260200151828151811061257857612578613e10565b602002602001015186611df390919063ffffffff16565b94508061259b81614006565b915050612552565b505080806125b090614006565b915050611f45565b50509392505050565b6000806125cd84612729565b90506012808211612600576125f76125e582846127ba565b6125f090600a61412f565b8590611dff565b9250505061078d565b61065861260d83836127ba565b61261890600a61412f565b8590611de7565b6000612674826040518060400160405280602081526020017f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c6564815250856001600160a01b03166127c69092919063ffffffff16565b805190915015611d205780806020019051810190612692919061381e565b611d205760405162461bcd60e51b815260040161062f90614185565b600054610100900460ff166126d55760405162461bcd60e51b815260040161062f90613d24565b81516020928301208151919092012060cd9190915560ce55565b6000838383463060405160200161270a959493929190614195565b6040516020818303038152906040528051906020012090509392505050565b6000806000836001600160a01b0316604051612744906141d7565b600060405180830381855afa9150503d806000811461277f576040519150601f19603f3d011682016040523d82523d6000602084013e612784565b606091505b5091509150816127a65760405162461bcd60e51b815260040161062f90614220565b808060200190518101906104eb9190613356565b60006106038284613bc0565b60606104eb8484600085856001600160a01b0385163b6127f85760405162461bcd60e51b815260040161062f90614264565b600080866001600160a01b031685876040516128149190614296565b60006040518083038185875af1925050503d8060008114612851576040519150601f19603f3d011682016040523d82523d6000602084013e612856565b606091505b5091509150611b1c82828660608315612870575081610603565b8251156128805782518084602001fd5b8160405162461bcd60e51b815260040161062f91906142a2565b60006001600160a01b03821661078d565b6128b48161289a565b8114610b6b57600080fd5b803561078d816128ab565b806128b4565b803561078d816128ca565b600080600080608085870312156128f4576128f4600080fd5b600061290087876128bf565b9450506020612911878288016128d0565b9350506040612922878288016128d0565b9250506060612933878288016128d0565b91505092959194509250565b805b82525050565b6020810161078d828461293f565b60058110610b6b57600080fd5b803561078d81612955565b60008060006060848603121561298557612985600080fd5b600061299186866128bf565b93505060206129a286828701612962565b92505060406129b3868287016128d0565b9150509250925092565b6000602082840312156129d2576129d2600080fd5b600061078984846128bf565b801515612941565b6020810161078d82846129de565b60008060408385031215612a0a57612a0a600080fd5b6000612a1685856128bf565b9250506020612a2785828601612962565b9150509250929050565b60008083601f840112612a4657612a46600080fd5b5081356001600160401b03811115612a6057612a60600080fd5b602083019150836001820283011115612a7b57612a7b600080fd5b9250929050565b60008060208385031215612a9857612a98600080fd5b82356001600160401b03811115612ab157612ab1600080fd5b612abd85828601612a31565b92509250509250929050565b634e487b7160e01b600052604160045260246000fd5b601f19601f83011681018181106001600160401b0382111715612b0457612b04612ac9565b6040525050565b6000612b1660405190565b9050611dad8282612adf565b60006001600160401b03821115612b3b57612b3b612ac9565b601f19601f83011660200192915050565b82818337506000910152565b6000612b6b612b6684612b22565b612b0b565b905082815260208101848484011115612b8657612b86600080fd5b612b91848285612b4c565b509392505050565b600082601f830112612bad57612bad600080fd5b8135610789848260208601612b58565b600060208284031215612bd257612bd2600080fd5b81356001600160401b03811115612beb57612beb600080fd5b61078984828501612b99565b6129418161289a565b634e487b7160e01b600052602160045260246000fd5b60058110610b6b57610b6b612c00565b80611dad81612c16565b600061078d82612c26565b61294181612c30565b6000612c50838361293f565b505060200190565b6000612c62825190565b80845260209384019383018060005b83811015612c96578151612c858882612c44565b975060208301925050600101612c71565b509495945050505050565b80516000906040840190612cb58582612c3b565b50602083015184820360208601526106588282612c58565b60006106038383612ca1565b6000612ce3825190565b80845260208401935083602082028501612cfd8560200190565b8060005b85811015612d325784840389528151612d1a8582612ccd565b94506020830160209a909a0199925050600101612d01565b5091979650505050505050565b60005b83811015612d5a578181015183820152602001612d42565b83811115611e2c5750506000910152565b6000612d75825190565b808452602084019350612d8c818560208601612d3f565b601f01601f19169290920192915050565b60c08101612dab8289612bf7565b612db8602083018861293f565b8181036040830152612dca8187612cd9565b9050612dd9606083018661293f565b612de6608083018561293f565b81810360a0830152612df88184612d6b565b98975050505050505050565b60008060408385031215612e1a57612e1a600080fd5b6000612e2685856128bf565b9250506020612a27858286016128d0565b6020810161078d8284612bf7565b600061078d8261289a565b6128b481612e45565b803561078d81612e50565b600080600060608486031215612e7c57612e7c600080fd5b6000612e888686612e59565b93505060206129a2868287016128bf565b600080600060608486031215612eb157612eb1600080fd5b83356001600160401b03811115612eca57612eca600080fd5b612ed686828701612b99565b93505060208401356001600160401b03811115612ef557612ef5600080fd5b612f0186828701612b99565b92505060408401356001600160401b03811115612f2057612f20600080fd5b6129b386828701612b99565b60408101612f3a828561293f565b610603602083018461293f565b60006001600160401b03821115612f6057612f60612ac9565b5060209081020190565b6000612f78612b6684612f47565b83815290506020808201908402830185811115612f9757612f97600080fd5b835b81811015612fbb5780612fac88826128d0565b84525060209283019201612f99565b5050509392505050565b600082601f830112612fd957612fd9600080fd5b8135610789848260208601612f6a565b600060408284031215612ffe57612ffe600080fd5b6130086040612b0b565b905060006130168484612962565b82525060208201356001600160401b0381111561303557613035600080fd5b61304184828501612fc5565b60208301525092915050565b600061305b612b6684612f47565b8381529050602080820190840283018581111561307a5761307a600080fd5b835b81811015612fbb5780356001600160401b0381111561309d5761309d600080fd5b8086016130aa8982612fe9565b855250506020928301920161307c565b600082601f8301126130ce576130ce600080fd5b813561078984826020860161304d565b60008060008060008060c087890312156130fa576130fa600080fd5b600061310689896128bf565b965050602061311789828a016128d0565b95505060408701356001600160401b0381111561313657613136600080fd5b61314289828a016130ba565b945050606061315389828a016128d0565b935050608061316489828a016128d0565b92505060a08701356001600160401b0381111561318357613183600080fd5b61318f89828a01612b99565b9150509295509295509295565b600080600080600080600060e0888a0312156131ba576131ba600080fd5b60006131c68a8a6128bf565b97505060206131d78a828b016128d0565b96505060408801356001600160401b038111156131f6576131f6600080fd5b6132028a828b016130ba565b95505060606132138a828b016128d0565b94505060806132248a828b016128d0565b93505060a08801356001600160401b0381111561324357613243600080fd5b61324f8a828b01612b99565b92505060c08801356001600160401b0381111561326e5761326e600080fd5b61327a8a828b01612b99565b91505092959891949750929550565b600061078d82612e45565b61294181613289565b6020810161078d8284613294565b60a081016132b9828861293f565b6132c66020830187612bf7565b6132d3604083018661293f565b6132e0606083018561293f565b6132ed608083018461293f565b9695505050505050565b805161078d81612e50565b60006020828403121561331757613317600080fd5b600061078984846132f7565b606081016133318286612bf7565b61333e6020830185612c3b565b6104eb604083018461293f565b805161078d816128ca565b60006020828403121561336b5761336b600080fd5b6000610789848461334b565b60208082527f5061757365723a2063616c6c6572206973206e6f742074686520706175736572910190815260005b5060200190565b6020808252810161078d81613377565b604081016133ca8285612bf7565b6106036020830184612c3b565b805161078d816128ab565b6000602082840312156133f7576133f7600080fd5b600061078984846133d7565b602d81526000602082017f526f75746572577261707065723a2063616c6c6572206973206e6f74206d657381526c39b0b3b2903932b1b2b4bb32b960991b602082015291505b5060400190565b6020808252810161078d81613403565b601081526000602082016f14185d5cd8589b194e881c185d5cd95960821b815291506133a5565b6020808252810161078d81613460565b60c081016134a58289612bf7565b6134b2602083018861293f565b81810360408301526134c48187612cd9565b90506134d3606083018661293f565b6134e0608083018561293f565b611b1c60a083018461293f565b805161078d81612955565b6000613506612b6684612f47565b8381529050602080820190840283018581111561352557613525600080fd5b835b81811015612fbb578061353a888261334b565b84525060209283019201613527565b600082601f83011261355d5761355d600080fd5b81516107898482602086016134f8565b60006040828403121561358257613582600080fd5b61358c6040612b0b565b9050600061359a84846134ed565b82525060208201516001600160401b038111156135b9576135b9600080fd5b61304184828501613549565b60006135d3612b6684612f47565b838152905060208082019084028301858111156135f2576135f2600080fd5b835b81811015612fbb5780516001600160401b0381111561361557613615600080fd5b808601613622898261356d565b85525050602092830192016135f4565b600082601f83011261364657613646600080fd5b81516107898482602086016135c5565b6000613664612b6684612b22565b90508281526020810184848401111561367f5761367f600080fd5b612b91848285612d3f565b600082601f83011261369e5761369e600080fd5b8151610789848260208601613656565b60008060008060008060c087890312156136ca576136ca600080fd5b60006136d689896133d7565b96505060206136e789828a0161334b565b95505060408701516001600160401b0381111561370657613706600080fd5b61371289828a01613632565b945050606061372389828a0161334b565b935050608061373489828a0161334b565b92505060a08701516001600160401b0381111561375357613753600080fd5b61318f89828a0161368a565b60208082527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572910190815260006133a5565b6020808252810161078d8161375f565b602f81526000602082017f4f776e6572576974686472617761626c653a207769746864726177206e61746981526e1d99481d1bdad95b8819985a5b1959608a1b60208201529150613449565b6020808252810161078d816137a1565b60408101612f3a8285613294565b8015156128b4565b805161078d8161380b565b60006020828403121561383357613833600080fd5b60006107898484613813565b602581526000602082017f447374436861696e5061796d656e743a206e6f6e6578697374656e742070726f8152643b34b232b960d91b60208201529150613449565b6020808252810161078d8161383f565b6060810161389f8286613294565b61333e6020830185612bf7565b602581526000602082017f41646d696e577261707065723a2063616c6c6572206973206e6f74207468652081526430b236b4b760d91b60208201529150613449565b6020808252810161078d816138ac565b60ff8116612941565b6020810161078d82846138fe565b60408101612f3a8285612bf7565b603381526000602082017f447374436861696e5061796d656e743a20696e76616c696420706172616d7320815272199bdc88195e1c1a5c9959081858d8dbdd5b9d606a1b60208201529150613449565b6020808252810161078d81613923565b601f81526000602082017f447374436861696e5061796d656e743a20696e76616c696420706172616d7300815291506133a5565b6020808252810161078d81613983565b601f81526000602082017f5265656e7472616e637947756172643a207265656e7472616e742063616c6c00815291506133a5565b6020808252810161078d816139c7565b60608101613a198286612bf7565b613a26602083018561293f565b81810360408301526106588184612d6b565b602681526000602082017f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206181526564647265737360d01b60208201529150613449565b6020808252810161078d81613a38565b601481526000602082017314185d5cd8589b194e881b9bdd081c185d5cd95960621b815291506133a5565b6020808252810161078d81613a8b565b602481526000602082017f447374436861696e5061796d656e743a206e6f6e6578697374656e74206163638152631bdd5b9d60e21b60208201529150613449565b6020808252810161078d81613ac6565b601d81526000602082017f447374436861696e5061796d656e743a206e6f6e636520657869737473000000815291506133a5565b6020808252810161078d81613b17565b602281526000602082017f447374436861696e5061796d656e743a20696e76616c6964207369676e617475815261726560f01b60208201529150613449565b6020808252810161078d81613b5b565b634e487b7160e01b600052601160045260246000fd5b600082821015613bd257613bd2613baa565b500390565b60008219821115613bea57613bea613baa565b500190565b601d81526000602082017f5061757365723a206163636f756e74206973206e6f7420706175736572000000815291506133a5565b6020808252810161078d81613bef565b602181526000602082017f5061757365723a206163636f756e7420697320616c72656164792070617573658152603960f91b60208201529150613449565b6020808252810161078d81613c33565b602e81526000602082017f496e697469616c697a61626c653a20636f6e747261637420697320616c72656181526d191e481a5b9a5d1a585b1a5e995960921b60208201529150613449565b6020808252810161078d81613c81565b602b81526000602082017f496e697469616c697a61626c653a20636f6e7472616374206973206e6f74206981526a6e697469616c697a696e6760a81b60208201529150613449565b6020808252810161078d81613cdc565b6000816000190483118215151615613d4e57613d4e613baa565b500290565b634e487b7160e01b600052601260045260246000fd5b600082613d7857613d78613d53565b500490565b6060810161389f8286612bf7565b80612941565b61190160f01b81526002016000613da88285613d8b565b602082019150613db88284613d8b565b5060200192915050565b602181526000602082017f447374436861696e5061796d656e743a20696e76616c6964207061796c6f61648152607360f81b60208201529150613449565b6020808252810161078d81613dc2565b634e487b7160e01b600052603260045260246000fd5b603681526000602082016000805160206142b4833981519152815275656e67746820666f72204275696c64696e6754696d6560501b60208201529150613449565b6020808252810161078d81613e26565b60608101613e858286612bf7565b61333e602083018561293f565b603381526000602082016000805160206142b4833981519152815272656e67746820666f7220415253746f7261676560681b60208201529150613449565b6020808252810161078d81613e92565b603381526000602082016000805160206142b48339815191528152720cadccee8d040ccdee44084c2dcc8eed2c8e8d606b1b60208201529150613449565b6020808252810161078d81613ee0565b603581526000602082016000805160206142b4833981519152815274656e67746820666f72204950465353746f7261676560581b60208201529150613449565b6020808252810161078d81613f2e565b60808101613f8c8287612bf7565b613f99602083018661293f565b613fa6604083018561293f565b610658606083018461293f565b602681526000602082017f447374436861696e5061796d656e743a20756e6b6e6f776e207265736f75726381526565207479706560d01b60208201529150613449565b6020808252810161078d81613fb3565b600060001982141561401a5761401a613baa565b5060010190565b80825b60018511156140605780860481111561403f5761403f613baa565b600185161561404d57908102905b80026140598560011c90565b9450614024565b94509492505050565b60008261407857506001610603565b8161408557506000610603565b816001811461409b57600281146140a5576140d2565b6001915050610603565b60ff8411156140b6576140b6613baa565b8360020a9150848211156140cc576140cc613baa565b50610603565b5060208310610133831016604e8410600b8410161715614105575081810a8381111561410057614100613baa565b610603565b6141128484846001614021565b9250905081840481111561412857614128613baa565b0292915050565b60006106036000198484614069565b602a81526000602082017f5361666545524332303a204552433230206f7065726174696f6e20646964206e8152691bdd081cdd58d8d9595960b21b60208201529150613449565b6020808252810161078d8161413e565b60a081016141a3828861293f565b6141b0602083018761293f565b6141bd604083018661293f565b6141ca606083018561293f565b6132ed6080830184612bf7565b63313ce56760e01b815260006004820161078d565b601b81526000602082017f5265736f75726365446174613a20696e76616c696420746f6b656e0000000000815291506133a5565b6020808252810161078d816141ec565b601d81526000602082017f416464726573733a2063616c6c20746f206e6f6e2d636f6e7472616374000000815291506133a5565b6020808252810161078d81614230565b600061427e825190565b61428c818560208601612d3f565b9290920192915050565b60006106038284614274565b602080825281016106038184612d6b56fe447374436861696e5061796d656e743a20696e76616c69642076616c7565206ca26469706673582212201509964bea561157b640414fd122982627eb68bdaad0171313c5d6d77cc2a02064736f6c63430008090033",
  "deployedBytecode": "0x608060405234801561001057600080fd5b50600436106101e55760003560e01c806380f51c121161010f578063a322c81d116100a2578063eec9a00d11610071578063eec9a00d14610442578063f2fde38b14610455578063f887ea4014610468578063f8eb66241461048857600080fd5b8063a322c81d146103bd578063b76bfac2146103f3578063ce841dd21461041c578063e1e382d91461042f57600080fd5b80638da5cb5b116100de5780638da5cb5b1461035d57806393563a95146103765780639412cbe51461038957806394e48f891461039c57600080fd5b806380f51c1214610315578063827fbd1d1461033857806382dc1ec4146103425780638456cb591461035557600080fd5b80636267834e116101875780636b2c0f55116101565780636b2c0f55146102df5780636ef8d66d146102f257806370a08231146102fa578063715018a61461030d57600080fd5b80636267834e14610281578063634d45b21461029457806365d6b40c146102b9578063699256f4146102cc57600080fd5b806342747d90116101c357806342747d901461023057806346fbf68e146102435780635c975abb146102635780635e1a544c1461026e57600080fd5b806309d629ef146101ea57806335da9b23146102135780633f4ba83a14610226575b600080fd5b6101fd6101f83660046128db565b6104b4565b60405161020a9190612947565b60405180910390f35b6101fd61022136600461296d565b6104f3565b61022e61060a565b005b6101fd61023e3660046128db565b610642565b6102566102513660046129bd565b610661565b60405161020a91906129e6565b60975460ff16610256565b6101fd61027c3660046129f4565b61067f565b61022e61028f366004612a82565b610793565b6102a76102a2366004612bbd565b61099c565b60405161020a96959493929190612d9d565b6101fd6102c736600461296d565b6109ce565b61022e6102da366004612e04565b610a8a565b61022e6102ed3660046129bd565b610b38565b61022e610b6e565b6101fd6103083660046129bd565b610b77565b61022e610ca7565b6102566103233660046129bd565b60c96020526000908152604090205460ff1681565b6101fd6101015481565b61022e6103503660046129bd565b610cdb565b61022e610d0e565b6065546001600160a01b031660405161020a9190612e37565b61022e610384366004612e64565b610d3b565b61022e610397366004612e99565b610dac565b6103af6103aa3660046128db565b610e80565b60405161020a929190612f2c565b6101fd6103cb366004612e04565b6001600160a01b0391909116600090815260cc60209081526040808320938352929052205490565b6101fd6104013660046129bd565b6001600160a01b0316600090815260cb602052604090205490565b6103af61042a3660046128db565b611140565b6101fd61043d3660046130de565b611346565b6101fd61045036600461319c565b611494565b61022e6104633660046129bd565b6116d1565b60ca5461047b906001600160a01b031681565b60405161020a919061329d565b6101fd610496366004612e04565b61010260209081526000928352604080842090915290825290205481565b600061010154858585856040516020016104d29594939291906132ab565b6040516020818303038152906040528051906020012090505b949350505050565b60008060ca60009054906101000a90046001600160a01b03166001600160a01b03166337187fc36040518163ffffffff1660e01b815260040160206040518083038186803b15801561054457600080fd5b505afa158015610558573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061057c9190613302565b6040516335da9b2360e01b81529091506001600160a01b038216906335da9b23906105af90889088908890600401613323565b60206040518083038186803b1580156105c757600080fd5b505afa1580156105db573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906105ff9190613356565b9150505b9392505050565b61061333610661565b6106385760405162461bcd60e51b815260040161062f906133ac565b60405180910390fd5b61064061172a565b565b6000610658610653868686866104b4565b611790565b95945050505050565b6001600160a01b0316600090815260c9602052604090205460ff1690565b60008060ca60009054906101000a90046001600160a01b03166001600160a01b03166337187fc36040518163ffffffff1660e01b815260040160206040518083038186803b1580156106d057600080fd5b505afa1580156106e4573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906107089190613302565b604051631786951360e21b81529091506001600160a01b03821690635e1a544c9061073990879087906004016133bc565b60206040518083038186803b15801561075157600080fd5b505afa158015610765573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906107899190613356565b9150505b92915050565b60ca54604080516303bf7e6b60e21b815290516000926001600160a01b031691630efdf9ac916004808301926020929190829003018186803b1580156107d857600080fd5b505afa1580156107ec573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061081091906133e2565b9050336001600160a01b0382161461083a5760405162461bcd60e51b815260040161062f90613450565b60975460ff161561085d5760405162461bcd60e51b815260040161062f90613487565b6000806000806000806108a589898080601f01602080910402602001604051908101604052809392919081815260200183838082843760009201919091525061099c92505050565b955095509550955095509550600060ca60009054906101000a90046001600160a01b03166001600160a01b031663c24126766040518163ffffffff1660e01b815260040160206040518083038186803b15801561090157600080fd5b505afa158015610915573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906109399190613302565b9050600061094c828989898989896117a3565b90507fd69233c4d4c07911a44762fb49e793100eb94db44cf846ddcec7f6210e9c143a88888884898960405161098796959493929190613497565b60405180910390a15050505050505050505050565b60008060606000806060868060200190518101906109ba91906136ae565b949c939b5091995097509550909350915050565b60008060ca60009054906101000a90046001600160a01b03166001600160a01b03166337187fc36040518163ffffffff1660e01b815260040160206040518083038186803b158015610a1f57600080fd5b505afa158015610a33573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610a579190613302565b604051631975ad0360e21b81529091506001600160a01b038216906365d6b40c906105af90889088908890600401613323565b6065546001600160a01b03163314610ab45760405162461bcd60e51b815260040161062f90613791565b6040516000906001600160a01b0384169083156108fc0290849084818181858888f19350505050905080610afa5760405162461bcd60e51b815260040161062f906137ed565b7f2c876ecb97b3c6854f2488d373403f903eacb800e51c159a5c0c7a9c857e48278383604051610b2b9291906137fd565b60405180910390a1505050565b6065546001600160a01b03163314610b625760405162461bcd60e51b815260040161062f90613791565b610b6b81611b27565b50565b61064033611b27565b60ca54604080516314b47ed960e31b815290516000926001600160a01b03169163a5a3f6c8916004808301926020929190829003018186803b158015610bbc57600080fd5b505afa158015610bd0573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610bf49190613302565b6001600160a01b0316636b074a07836040518263ffffffff1660e01b8152600401610c1f9190612e37565b60206040518083038186803b158015610c3757600080fd5b505afa158015610c4b573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610c6f919061381e565b610c8b5760405162461bcd60e51b815260040161062f90613881565b506001600160a01b0316600090815260cb602052604090205490565b6065546001600160a01b03163314610cd15760405162461bcd60e51b815260040161062f90613791565b6106406000611ba7565b6065546001600160a01b03163314610d055760405162461bcd60e51b815260040161062f90613791565b610b6b81611bf9565b610d1733610661565b610d335760405162461bcd60e51b815260040161062f906133ac565b610640611c72565b6065546001600160a01b03163314610d655760405162461bcd60e51b815260040161062f90613791565b610d796001600160a01b0384168383611cca565b7f2717ead6b9200dd235aad468c9809ea400fe33ac69b5bfaa6d3e90fc922b6398838383604051610b2b93929190613891565b7fb53127684a568b3173ae13b9f8a6016e243e63b6e8ee1178d6a717850b5d6103546001600160a01b03163314610df55760405162461bcd60e51b815260040161062f906138ee565b60026000610e0282611d25565b90508015610e1a576000805461ff0019166101001790555b610e248585611db2565b82516020840120610101558015610e79576000805461ff00191690556040517f7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb384740249890610e70908490613907565b60405180910390a15b5050505050565b600080600060ca60009054906101000a90046001600160a01b03166001600160a01b031663740e80616040518163ffffffff1660e01b815260040160206040518083038186803b158015610ed357600080fd5b505afa158015610ee7573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610f0b9190613302565b60405162f304db60e01b8152909150879087906001600160a01b0384169062f304db90610f3e9085908590600401613915565b60206040518083038186803b158015610f5657600080fd5b505afa158015610f6a573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610f8e919061381e565b15610fde57600087118015610fa35750600086115b610fbf5760405162461bcd60e51b815260040161062f90613973565b610fcb826004896104f3565b9450610fd78587611de7565b9350611134565b6000871180610fed5750600086115b6110095760405162461bcd60e51b815260040161062f906139b7565b611097611090836004866001600160a01b0316633a01873287876040518363ffffffff1660e01b8152600401611040929190613915565b60206040518083038186803b15801561105857600080fd5b505afa15801561106c573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906102219190613356565b8890611de7565b945061113161112a8360046102218b886001600160a01b0316634d30b6be89896040518363ffffffff1660e01b81526004016110d4929190613915565b60206040518083038186803b1580156110ec57600080fd5b505afa158015611100573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906111249190613356565b90611df3565b8790611de7565b93505b50505094509492505050565b600080600060ca60009054906101000a90046001600160a01b03166001600160a01b031663740e80616040518163ffffffff1660e01b815260040160206040518083038186803b15801561119357600080fd5b505afa1580156111a7573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906111cb9190613302565b60405162f304db60e01b8152909150879087906001600160a01b0384169062f304db906111fe9085908590600401613915565b60206040518083038186803b15801561121657600080fd5b505afa15801561122a573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061124e919061381e565b156112a0576000871180156112635750600086115b61127f5760405162461bcd60e51b815260040161062f90613973565b61129461128d83600461067f565b8890611dff565b9450610fd78688611dff565b60008711806112af5750600086115b6112cb5760405162461bcd60e51b815260040161062f906139b7565b61130261128d836004866001600160a01b0316633a01873287876040518363ffffffff1660e01b8152600401611040929190613915565b945061113161133f83600461022189886001600160a01b0316634d30b6be89896040518363ffffffff1660e01b81526004016110d4929190613915565b8790611dff565b600061135460975460ff1690565b156113715760405162461bcd60e51b815260040161062f90613487565b600260015414156113945760405162461bcd60e51b815260040161062f906139fb565b600260015560ca5460408051636120933b60e11b815290516000926001600160a01b03169163c2412676916004808301926020929190829003018186803b1580156113de57600080fd5b505afa1580156113f2573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906114169190613302565b9050611427818989898989896117a3565b91508115611444576114446001600160a01b038216333085611e0b565b7fd69233c4d4c07911a44762fb49e793100eb94db44cf846ddcec7f6210e9c143a88888885898960405161147d96959493929190613497565b60405180910390a150600180559695505050505050565b60006114a260975460ff1690565b156114bf5760405162461bcd60e51b815260040161062f90613487565b600260015414156114e25760405162461bcd60e51b815260040161062f906139fb565b600260015560ca54604080516350e420e560e11b815290516000926001600160a01b03169163a1c841ca916004808301926020929190829003018186803b15801561152c57600080fd5b505afa158015611540573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906115649190613302565b6040516382f19cf760e01b81529091506001600160a01b038216906382f19cf790611597908c908c908890600401613a0b565b600060405180830381600087803b1580156115b157600080fd5b505af11580156115c5573d6000803e3d6000fd5b50505050600060ca60009054906101000a90046001600160a01b03166001600160a01b031663c24126766040518163ffffffff1660e01b815260040160206040518083038186803b15801561161957600080fd5b505afa15801561162d573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906116519190613302565b9050611662818b8b8b8b8b8b6117a3565b9250821561167f5761167f6001600160a01b038216333086611e0b565b7fd69233c4d4c07911a44762fb49e793100eb94db44cf846ddcec7f6210e9c143a8a8a8a868b8b6040516116b896959493929190613497565b60405180910390a1505060018055979650505050505050565b6065546001600160a01b031633146116fb5760405162461bcd60e51b815260040161062f90613791565b6001600160a01b0381166117215760405162461bcd60e51b815260040161062f90613a7b565b610b6b81611ba7565b60975460ff1661174c5760405162461bcd60e51b815260040161062f90613ab6565b6097805460ff191690557f5db9ee0a495bf2e6ff9c91a7834c1ba4fdd244a5e8aa4e537bd38aeae4b073aa335b6040516117869190612e37565b60405180910390a1565b600061078d61179d611e32565b83611e6e565b60ca54604080516350e420e560e11b815290516000926001600160a01b03169163a1c841ca916004808301926020929190829003018186803b1580156117e857600080fd5b505afa1580156117fc573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906118209190613302565b6001600160a01b0316632d52976488886040518363ffffffff1660e01b815260040161184d929190613915565b60206040518083038186803b15801561186557600080fd5b505afa158015611879573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061189d919061381e565b6118b95760405162461bcd60e51b815260040161062f90613b07565b6118c4878787611ea1565b90508215611a88576001600160a01b0387166000908152610102602090815260408083208784529091529020541561190e5760405162461bcd60e51b815260040161062f90613b4b565b600061191c88888787610642565b905060ca60009054906101000a90046001600160a01b03166001600160a01b031663a5a3f6c86040518163ffffffff1660e01b815260040160206040518083038186803b15801561196c57600080fd5b505afa158015611980573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906119a49190613302565b6001600160a01b031663238a4d1e8983866040518463ffffffff1660e01b81526004016119d393929190613a0b565b602060405180830381600087803b1580156119ed57600080fd5b505af1158015611a01573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611a25919061381e565b611a415760405162461bcd60e51b815260040161062f90613b9a565b83821115611a5a57611a538483613bc0565b9150611a5f565b600091505b506001600160a01b03871660009081526101026020908152604080832087845290915290208390555b8015611b1c57611a9888826125c1565b6001600160a01b038816600090815260cb6020526040902054909150611abf908290613bd7565b6001600160a01b038816600090815260cb602090815260408083209390935560cc815282822089835290522054611af7908290613bd7565b6001600160a01b038816600090815260cc602090815260408083208a84529091529020555b979650505050505050565b611b3081610661565b611b4c5760405162461bcd60e51b815260040161062f90613c23565b6001600160a01b038116600090815260c9602052604090819020805460ff19169055517fcd265ebaf09df2871cc7bd4133404a235ba12eff2041bb89d9c714a2621c7c7e90611b9c908390612e37565b60405180910390a150565b606580546001600160a01b038381166001600160a01b0319831681179093556040519116919082907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a35050565b611c0281610661565b15611c1f5760405162461bcd60e51b815260040161062f90613c71565b6001600160a01b038116600090815260c9602052604090819020805460ff19166001179055517f6719d08c1888103bea251a4ed56406bd0c3e69723c8a1686e017e7bbe159b6f890611b9c908390612e37565b60975460ff1615611c955760405162461bcd60e51b815260040161062f90613487565b6097805460ff191660011790557f62e78cea01bee320cd4e420270b5ea74000d11b0c9f74754ebdbfc544b05a2586117793390565b611d208363a9059cbb60e01b8484604051602401611ce9929190613915565b60408051601f198184030181529190526020810180516001600160e01b03166001600160e01b03199093169290921790915261261f565b505050565b60008054610100900460ff1615611d6c578160ff166001148015611d485750303b155b611d645760405162461bcd60e51b815260040161062f90613ccc565b506000919050565b60005460ff808416911610611d935760405162461bcd60e51b815260040161062f90613ccc565b506000805460ff191660ff92909216919091179055600190565b919050565b600054610100900460ff16611dd95760405162461bcd60e51b815260040161062f90613d24565b611de382826126ae565b5050565b60006106038284613d34565b60006106038284613bd7565b60006106038284613d69565b611e2c846323b872dd60e01b858585604051602401611ce993929190613d7d565b50505050565b6000611e697f8b73c3c69bb8fe3d512ecc4cf759cc79239f7b179b0ffacaa9a75d522b39400f611e6160cd5490565b60ce546126ef565b905090565b60008282604051602001611e83929190613d91565b60405160208183030381529060405280519060200120905092915050565b600080825111611ec35760405162461bcd60e51b815260040161062f90613e00565b60ca54604080516337187fc360e01b815290516000926001600160a01b0316916337187fc3916004808301926020929190829003018186803b158015611f0857600080fd5b505afa158015611f1c573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611f409190613302565b905060005b83518110156125b8576000848281518110611f6257611f62613e10565b6020026020010151905060016004811115611f7f57611f7f612c00565b81516004811115611f9257611f92612c00565b141561215057806020015151600114611fbd5760405162461bcd60e51b815260040161062f90613e67565b6000836001600160a01b03166365d6b40c8984600001518560200151600081518110611feb57611feb613e10565b60200260200101516040518463ffffffff1660e01b815260040161201193929190613323565b60206040518083038186803b15801561202957600080fd5b505afa15801561203d573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906120619190613356565b905060ca60009054906101000a90046001600160a01b03166001600160a01b03166322b31aba6040518163ffffffff1660e01b815260040160206040518083038186803b1580156120b157600080fd5b505afa1580156120c5573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906120e99190613302565b6001600160a01b0316630de482878989846040518463ffffffff1660e01b815260040161211893929190613e77565b600060405180830381600087803b15801561213257600080fd5b505af1158015612146573d6000803e3d6000fd5b505050505061254f565b60038151600481111561216557612165612c00565b1415612284578060200151516001146121905760405162461bcd60e51b815260040161062f90613ed0565b6000836001600160a01b03166365d6b40c89846000015185602001516000815181106121be576121be613e10565b60200260200101516040518463ffffffff1660e01b81526004016121e493929190613323565b60206040518083038186803b1580156121fc57600080fd5b505afa158015612210573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906122349190613356565b905060ca60009054906101000a90046001600160a01b03166001600160a01b031663a2d2f2db6040518163ffffffff1660e01b815260040160206040518083038186803b1580156120b157600080fd5b60028151600481111561229957612299612c00565b14156123b8578060200151516001146122c45760405162461bcd60e51b815260040161062f90613f1e565b6000836001600160a01b03166365d6b40c89846000015185602001516000815181106122f2576122f2613e10565b60200260200101516040518463ffffffff1660e01b815260040161231893929190613323565b60206040518083038186803b15801561233057600080fd5b505afa158015612344573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906123689190613356565b905060ca60009054906101000a90046001600160a01b03166001600160a01b031663f931ca566040518163ffffffff1660e01b815260040160206040518083038186803b1580156120b157600080fd5b6004815160048111156123cd576123cd612c00565b1415612537578060200151516002146123f85760405162461bcd60e51b815260040161062f90613f6e565b6000806124438989856020015160008151811061241757612417613e10565b6020026020010151866020015160018151811061243657612436613e10565b6020026020010151611140565b9150915060ca60009054906101000a90046001600160a01b03166001600160a01b031663740e80616040518163ffffffff1660e01b815260040160206040518083038186803b15801561249557600080fd5b505afa1580156124a9573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906124cd9190613302565b6001600160a01b031663a5a2d6178a8a85856040518563ffffffff1660e01b81526004016124fe9493929190613f7e565b600060405180830381600087803b15801561251857600080fd5b505af115801561252c573d6000803e3d6000fd5b50505050505061254f565b60405162461bcd60e51b815260040161062f90613ff6565b60005b8160200151518110156125a35761258f8260200151828151811061257857612578613e10565b602002602001015186611df390919063ffffffff16565b94508061259b81614006565b915050612552565b505080806125b090614006565b915050611f45565b50509392505050565b6000806125cd84612729565b90506012808211612600576125f76125e582846127ba565b6125f090600a61412f565b8590611dff565b9250505061078d565b61065861260d83836127ba565b61261890600a61412f565b8590611de7565b6000612674826040518060400160405280602081526020017f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c6564815250856001600160a01b03166127c69092919063ffffffff16565b805190915015611d205780806020019051810190612692919061381e565b611d205760405162461bcd60e51b815260040161062f90614185565b600054610100900460ff166126d55760405162461bcd60e51b815260040161062f90613d24565b81516020928301208151919092012060cd9190915560ce55565b6000838383463060405160200161270a959493929190614195565b6040516020818303038152906040528051906020012090509392505050565b6000806000836001600160a01b0316604051612744906141d7565b600060405180830381855afa9150503d806000811461277f576040519150601f19603f3d011682016040523d82523d6000602084013e612784565b606091505b5091509150816127a65760405162461bcd60e51b815260040161062f90614220565b808060200190518101906104eb9190613356565b60006106038284613bc0565b60606104eb8484600085856001600160a01b0385163b6127f85760405162461bcd60e51b815260040161062f90614264565b600080866001600160a01b031685876040516128149190614296565b60006040518083038185875af1925050503d8060008114612851576040519150601f19603f3d011682016040523d82523d6000602084013e612856565b606091505b5091509150611b1c82828660608315612870575081610603565b8251156128805782518084602001fd5b8160405162461bcd60e51b815260040161062f91906142a2565b60006001600160a01b03821661078d565b6128b48161289a565b8114610b6b57600080fd5b803561078d816128ab565b806128b4565b803561078d816128ca565b600080600080608085870312156128f4576128f4600080fd5b600061290087876128bf565b9450506020612911878288016128d0565b9350506040612922878288016128d0565b9250506060612933878288016128d0565b91505092959194509250565b805b82525050565b6020810161078d828461293f565b60058110610b6b57600080fd5b803561078d81612955565b60008060006060848603121561298557612985600080fd5b600061299186866128bf565b93505060206129a286828701612962565b92505060406129b3868287016128d0565b9150509250925092565b6000602082840312156129d2576129d2600080fd5b600061078984846128bf565b801515612941565b6020810161078d82846129de565b60008060408385031215612a0a57612a0a600080fd5b6000612a1685856128bf565b9250506020612a2785828601612962565b9150509250929050565b60008083601f840112612a4657612a46600080fd5b5081356001600160401b03811115612a6057612a60600080fd5b602083019150836001820283011115612a7b57612a7b600080fd5b9250929050565b60008060208385031215612a9857612a98600080fd5b82356001600160401b03811115612ab157612ab1600080fd5b612abd85828601612a31565b92509250509250929050565b634e487b7160e01b600052604160045260246000fd5b601f19601f83011681018181106001600160401b0382111715612b0457612b04612ac9565b6040525050565b6000612b1660405190565b9050611dad8282612adf565b60006001600160401b03821115612b3b57612b3b612ac9565b601f19601f83011660200192915050565b82818337506000910152565b6000612b6b612b6684612b22565b612b0b565b905082815260208101848484011115612b8657612b86600080fd5b612b91848285612b4c565b509392505050565b600082601f830112612bad57612bad600080fd5b8135610789848260208601612b58565b600060208284031215612bd257612bd2600080fd5b81356001600160401b03811115612beb57612beb600080fd5b61078984828501612b99565b6129418161289a565b634e487b7160e01b600052602160045260246000fd5b60058110610b6b57610b6b612c00565b80611dad81612c16565b600061078d82612c26565b61294181612c30565b6000612c50838361293f565b505060200190565b6000612c62825190565b80845260209384019383018060005b83811015612c96578151612c858882612c44565b975060208301925050600101612c71565b509495945050505050565b80516000906040840190612cb58582612c3b565b50602083015184820360208601526106588282612c58565b60006106038383612ca1565b6000612ce3825190565b80845260208401935083602082028501612cfd8560200190565b8060005b85811015612d325784840389528151612d1a8582612ccd565b94506020830160209a909a0199925050600101612d01565b5091979650505050505050565b60005b83811015612d5a578181015183820152602001612d42565b83811115611e2c5750506000910152565b6000612d75825190565b808452602084019350612d8c818560208601612d3f565b601f01601f19169290920192915050565b60c08101612dab8289612bf7565b612db8602083018861293f565b8181036040830152612dca8187612cd9565b9050612dd9606083018661293f565b612de6608083018561293f565b81810360a0830152612df88184612d6b565b98975050505050505050565b60008060408385031215612e1a57612e1a600080fd5b6000612e2685856128bf565b9250506020612a27858286016128d0565b6020810161078d8284612bf7565b600061078d8261289a565b6128b481612e45565b803561078d81612e50565b600080600060608486031215612e7c57612e7c600080fd5b6000612e888686612e59565b93505060206129a2868287016128bf565b600080600060608486031215612eb157612eb1600080fd5b83356001600160401b03811115612eca57612eca600080fd5b612ed686828701612b99565b93505060208401356001600160401b03811115612ef557612ef5600080fd5b612f0186828701612b99565b92505060408401356001600160401b03811115612f2057612f20600080fd5b6129b386828701612b99565b60408101612f3a828561293f565b610603602083018461293f565b60006001600160401b03821115612f6057612f60612ac9565b5060209081020190565b6000612f78612b6684612f47565b83815290506020808201908402830185811115612f9757612f97600080fd5b835b81811015612fbb5780612fac88826128d0565b84525060209283019201612f99565b5050509392505050565b600082601f830112612fd957612fd9600080fd5b8135610789848260208601612f6a565b600060408284031215612ffe57612ffe600080fd5b6130086040612b0b565b905060006130168484612962565b82525060208201356001600160401b0381111561303557613035600080fd5b61304184828501612fc5565b60208301525092915050565b600061305b612b6684612f47565b8381529050602080820190840283018581111561307a5761307a600080fd5b835b81811015612fbb5780356001600160401b0381111561309d5761309d600080fd5b8086016130aa8982612fe9565b855250506020928301920161307c565b600082601f8301126130ce576130ce600080fd5b813561078984826020860161304d565b60008060008060008060c087890312156130fa576130fa600080fd5b600061310689896128bf565b965050602061311789828a016128d0565b95505060408701356001600160401b0381111561313657613136600080fd5b61314289828a016130ba565b945050606061315389828a016128d0565b935050608061316489828a016128d0565b92505060a08701356001600160401b0381111561318357613183600080fd5b61318f89828a01612b99565b9150509295509295509295565b600080600080600080600060e0888a0312156131ba576131ba600080fd5b60006131c68a8a6128bf565b97505060206131d78a828b016128d0565b96505060408801356001600160401b038111156131f6576131f6600080fd5b6132028a828b016130ba565b95505060606132138a828b016128d0565b94505060806132248a828b016128d0565b93505060a08801356001600160401b0381111561324357613243600080fd5b61324f8a828b01612b99565b92505060c08801356001600160401b0381111561326e5761326e600080fd5b61327a8a828b01612b99565b91505092959891949750929550565b600061078d82612e45565b61294181613289565b6020810161078d8284613294565b60a081016132b9828861293f565b6132c66020830187612bf7565b6132d3604083018661293f565b6132e0606083018561293f565b6132ed608083018461293f565b9695505050505050565b805161078d81612e50565b60006020828403121561331757613317600080fd5b600061078984846132f7565b606081016133318286612bf7565b61333e6020830185612c3b565b6104eb604083018461293f565b805161078d816128ca565b60006020828403121561336b5761336b600080fd5b6000610789848461334b565b60208082527f5061757365723a2063616c6c6572206973206e6f742074686520706175736572910190815260005b5060200190565b6020808252810161078d81613377565b604081016133ca8285612bf7565b6106036020830184612c3b565b805161078d816128ab565b6000602082840312156133f7576133f7600080fd5b600061078984846133d7565b602d81526000602082017f526f75746572577261707065723a2063616c6c6572206973206e6f74206d657381526c39b0b3b2903932b1b2b4bb32b960991b602082015291505b5060400190565b6020808252810161078d81613403565b601081526000602082016f14185d5cd8589b194e881c185d5cd95960821b815291506133a5565b6020808252810161078d81613460565b60c081016134a58289612bf7565b6134b2602083018861293f565b81810360408301526134c48187612cd9565b90506134d3606083018661293f565b6134e0608083018561293f565b611b1c60a083018461293f565b805161078d81612955565b6000613506612b6684612f47565b8381529050602080820190840283018581111561352557613525600080fd5b835b81811015612fbb578061353a888261334b565b84525060209283019201613527565b600082601f83011261355d5761355d600080fd5b81516107898482602086016134f8565b60006040828403121561358257613582600080fd5b61358c6040612b0b565b9050600061359a84846134ed565b82525060208201516001600160401b038111156135b9576135b9600080fd5b61304184828501613549565b60006135d3612b6684612f47565b838152905060208082019084028301858111156135f2576135f2600080fd5b835b81811015612fbb5780516001600160401b0381111561361557613615600080fd5b808601613622898261356d565b85525050602092830192016135f4565b600082601f83011261364657613646600080fd5b81516107898482602086016135c5565b6000613664612b6684612b22565b90508281526020810184848401111561367f5761367f600080fd5b612b91848285612d3f565b600082601f83011261369e5761369e600080fd5b8151610789848260208601613656565b60008060008060008060c087890312156136ca576136ca600080fd5b60006136d689896133d7565b96505060206136e789828a0161334b565b95505060408701516001600160401b0381111561370657613706600080fd5b61371289828a01613632565b945050606061372389828a0161334b565b935050608061373489828a0161334b565b92505060a08701516001600160401b0381111561375357613753600080fd5b61318f89828a0161368a565b60208082527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572910190815260006133a5565b6020808252810161078d8161375f565b602f81526000602082017f4f776e6572576974686472617761626c653a207769746864726177206e61746981526e1d99481d1bdad95b8819985a5b1959608a1b60208201529150613449565b6020808252810161078d816137a1565b60408101612f3a8285613294565b8015156128b4565b805161078d8161380b565b60006020828403121561383357613833600080fd5b60006107898484613813565b602581526000602082017f447374436861696e5061796d656e743a206e6f6e6578697374656e742070726f8152643b34b232b960d91b60208201529150613449565b6020808252810161078d8161383f565b6060810161389f8286613294565b61333e6020830185612bf7565b602581526000602082017f41646d696e577261707065723a2063616c6c6572206973206e6f74207468652081526430b236b4b760d91b60208201529150613449565b6020808252810161078d816138ac565b60ff8116612941565b6020810161078d82846138fe565b60408101612f3a8285612bf7565b603381526000602082017f447374436861696e5061796d656e743a20696e76616c696420706172616d7320815272199bdc88195e1c1a5c9959081858d8dbdd5b9d606a1b60208201529150613449565b6020808252810161078d81613923565b601f81526000602082017f447374436861696e5061796d656e743a20696e76616c696420706172616d7300815291506133a5565b6020808252810161078d81613983565b601f81526000602082017f5265656e7472616e637947756172643a207265656e7472616e742063616c6c00815291506133a5565b6020808252810161078d816139c7565b60608101613a198286612bf7565b613a26602083018561293f565b81810360408301526106588184612d6b565b602681526000602082017f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206181526564647265737360d01b60208201529150613449565b6020808252810161078d81613a38565b601481526000602082017314185d5cd8589b194e881b9bdd081c185d5cd95960621b815291506133a5565b6020808252810161078d81613a8b565b602481526000602082017f447374436861696e5061796d656e743a206e6f6e6578697374656e74206163638152631bdd5b9d60e21b60208201529150613449565b6020808252810161078d81613ac6565b601d81526000602082017f447374436861696e5061796d656e743a206e6f6e636520657869737473000000815291506133a5565b6020808252810161078d81613b17565b602281526000602082017f447374436861696e5061796d656e743a20696e76616c6964207369676e617475815261726560f01b60208201529150613449565b6020808252810161078d81613b5b565b634e487b7160e01b600052601160045260246000fd5b600082821015613bd257613bd2613baa565b500390565b60008219821115613bea57613bea613baa565b500190565b601d81526000602082017f5061757365723a206163636f756e74206973206e6f7420706175736572000000815291506133a5565b6020808252810161078d81613bef565b602181526000602082017f5061757365723a206163636f756e7420697320616c72656164792070617573658152603960f91b60208201529150613449565b6020808252810161078d81613c33565b602e81526000602082017f496e697469616c697a61626c653a20636f6e747261637420697320616c72656181526d191e481a5b9a5d1a585b1a5e995960921b60208201529150613449565b6020808252810161078d81613c81565b602b81526000602082017f496e697469616c697a61626c653a20636f6e7472616374206973206e6f74206981526a6e697469616c697a696e6760a81b60208201529150613449565b6020808252810161078d81613cdc565b6000816000190483118215151615613d4e57613d4e613baa565b500290565b634e487b7160e01b600052601260045260246000fd5b600082613d7857613d78613d53565b500490565b6060810161389f8286612bf7565b80612941565b61190160f01b81526002016000613da88285613d8b565b602082019150613db88284613d8b565b5060200192915050565b602181526000602082017f447374436861696e5061796d656e743a20696e76616c6964207061796c6f61648152607360f81b60208201529150613449565b6020808252810161078d81613dc2565b634e487b7160e01b600052603260045260246000fd5b603681526000602082016000805160206142b4833981519152815275656e67746820666f72204275696c64696e6754696d6560501b60208201529150613449565b6020808252810161078d81613e26565b60608101613e858286612bf7565b61333e602083018561293f565b603381526000602082016000805160206142b4833981519152815272656e67746820666f7220415253746f7261676560681b60208201529150613449565b6020808252810161078d81613e92565b603381526000602082016000805160206142b48339815191528152720cadccee8d040ccdee44084c2dcc8eed2c8e8d606b1b60208201529150613449565b6020808252810161078d81613ee0565b603581526000602082016000805160206142b4833981519152815274656e67746820666f72204950465353746f7261676560581b60208201529150613449565b6020808252810161078d81613f2e565b60808101613f8c8287612bf7565b613f99602083018661293f565b613fa6604083018561293f565b610658606083018461293f565b602681526000602082017f447374436861696e5061796d656e743a20756e6b6e6f776e207265736f75726381526565207479706560d01b60208201529150613449565b6020808252810161078d81613fb3565b600060001982141561401a5761401a613baa565b5060010190565b80825b60018511156140605780860481111561403f5761403f613baa565b600185161561404d57908102905b80026140598560011c90565b9450614024565b94509492505050565b60008261407857506001610603565b8161408557506000610603565b816001811461409b57600281146140a5576140d2565b6001915050610603565b60ff8411156140b6576140b6613baa565b8360020a9150848211156140cc576140cc613baa565b50610603565b5060208310610133831016604e8410600b8410161715614105575081810a8381111561410057614100613baa565b610603565b6141128484846001614021565b9250905081840481111561412857614128613baa565b0292915050565b60006106036000198484614069565b602a81526000602082017f5361666545524332303a204552433230206f7065726174696f6e20646964206e8152691bdd081cdd58d8d9595960b21b60208201529150613449565b6020808252810161078d8161413e565b60a081016141a3828861293f565b6141b0602083018761293f565b6141bd604083018661293f565b6141ca606083018561293f565b6132ed6080830184612bf7565b63313ce56760e01b815260006004820161078d565b601b81526000602082017f5265736f75726365446174613a20696e76616c696420746f6b656e0000000000815291506133a5565b6020808252810161078d816141ec565b601d81526000602082017f416464726573733a2063616c6c20746f206e6f6e2d636f6e7472616374000000815291506133a5565b6020808252810161078d81614230565b600061427e825190565b61428c818560208601612d3f565b9290920192915050565b60006106038284614274565b602080825281016106038184612d6b56fe447374436861696e5061796d656e743a20696e76616c69642076616c7565206ca26469706673582212201509964bea561157b640414fd122982627eb68bdaad0171313c5d6d77cc2a02064736f6c63430008090033",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "addPauser(address)": {
        "details": "add a pauser for the contract",
        "params": {
          "account": "address"
        }
      },
      "balanceOf(address)": {
        "details": "return balance of provider",
        "params": {
          "provider": "provider address"
        },
        "returns": {
          "_0": "balance of provider"
        }
      },
      "celerExec(bytes)": {
        "details": "pay from source chain only called by message receiver",
        "params": {
          "message": "payment payload message bytes"
        }
      },
      "getAmountOf(address,uint8,uint256)": {
        "details": "return resource amount with value",
        "params": {
          "provider": "provider address",
          "resourceType": "resource type",
          "value": "token value"
        },
        "returns": {
          "_0": "resource amount"
        }
      },
      "getValueOf(address,uint8,uint256)": {
        "details": "return value of amount resource",
        "params": {
          "amount": "resource amount",
          "provider": "provider address",
          "resourceType": "resource type"
        },
        "returns": {
          "_0": "token value"
        }
      },
      "ipfsAllocations(address,bytes32,uint256,uint256)": {
        "details": "calculate ipfs storage and expiration with storage fee and expiration fee",
        "params": {
          "account": "user account",
          "expirationFee": "expiration fee",
          "provider": "provider address",
          "storageFee": "storage fee"
        },
        "returns": {
          "amount": "ipfs storage amount",
          "expiration": "ipfs expiration(in seconds)"
        }
      },
      "ipfsAlloctionsFee(address,bytes32,uint256,uint256)": {
        "details": "calculate fee for ipfs storage and expiration",
        "params": {
          "account": "user account",
          "amount": "ipfs storage amount",
          "expiration": "ipfs expiration(in seconds)",
          "provider": "provider address"
        },
        "returns": {
          "expirationFee": "ipfs expiration fee",
          "storageFee": "ipfs storage fee"
        }
      },
      "isPauser(address)": {
        "details": "whether the account is the contract pauser",
        "params": {
          "account": "address"
        },
        "returns": {
          "_0": "whether account is a pauser"
        }
      },
      "owner()": {
        "details": "Returns the address of the current owner."
      },
      "ownerWithdrawERC20(address,address,uint256)": {
        "details": "withdraw token",
        "params": {
          "to": "receiver address",
          "token": "token address",
          "value": "token value"
        }
      },
      "ownerWithdrawNative(address,uint256)": {
        "details": "withdraw ETH",
        "params": {
          "to": "receiver address",
          "value": "token value"
        }
      },
      "pause()": {
        "details": "pause the contract"
      },
      "paused()": {
        "details": "Returns true if the contract is paused, and false otherwise."
      },
      "pay(address,bytes32,(uint8,uint256[])[],uint256,uint256,bytes)": {
        "details": "pay on dst chain",
        "params": {
          "account": "user account",
          "amount": "voucher amount",
          "nonce": "voucher nonce",
          "payloads": "payment payloads",
          "provider": "provider address",
          "signature": "vourcher signature for provider"
        },
        "returns": {
          "value": "total token value"
        }
      },
      "priceOf(address,uint8)": {
        "details": "return resource price",
        "params": {
          "provider": "provider address",
          "resourceType": "resource type"
        },
        "returns": {
          "_0": "resource price"
        }
      },
      "removePauser(address)": {
        "details": "remove a pauser for the contract",
        "params": {
          "account": "address"
        }
      },
      "renounceOwnership()": {
        "details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner."
      },
      "renouncePauser()": {
        "details": "remove a pauser for the contract"
      },
      "transferOwnership(address)": {
        "details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
      },
      "unpause()": {
        "details": "unpause the contract"
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 147,
        "contract": "contracts/payments/DstChainPaymentV2Registration.sol:DstChainPaymentV2Registration",
        "label": "_initialized",
        "offset": 0,
        "slot": "0",
        "type": "t_uint8"
      },
      {
        "astId": 150,
        "contract": "contracts/payments/DstChainPaymentV2Registration.sol:DstChainPaymentV2Registration",
        "label": "_initializing",
        "offset": 1,
        "slot": "0",
        "type": "t_bool"
      },
      {
        "astId": 407,
        "contract": "contracts/payments/DstChainPaymentV2Registration.sol:DstChainPaymentV2Registration",
        "label": "_status",
        "offset": 0,
        "slot": "1",
        "type": "t_uint256"
      },
      {
        "astId": 451,
        "contract": "contracts/payments/DstChainPaymentV2Registration.sol:DstChainPaymentV2Registration",
        "label": "__gap",
        "offset": 0,
        "slot": "2",
        "type": "t_array(t_uint256)49_storage"
      },
      {
        "astId": 1038,
        "contract": "contracts/payments/DstChainPaymentV2Registration.sol:DstChainPaymentV2Registration",
        "label": "__gap",
        "offset": 0,
        "slot": "51",
        "type": "t_array(t_uint256)50_storage"
      },
      {
        "astId": 10,
        "contract": "contracts/payments/DstChainPaymentV2Registration.sol:DstChainPaymentV2Registration",
        "label": "_owner",
        "offset": 0,
        "slot": "101",
        "type": "t_address"
      },
      {
        "astId": 122,
        "contract": "contracts/payments/DstChainPaymentV2Registration.sol:DstChainPaymentV2Registration",
        "label": "__gap",
        "offset": 0,
        "slot": "102",
        "type": "t_array(t_uint256)49_storage"
      },
      {
        "astId": 303,
        "contract": "contracts/payments/DstChainPaymentV2Registration.sol:DstChainPaymentV2Registration",
        "label": "_paused",
        "offset": 0,
        "slot": "151",
        "type": "t_bool"
      },
      {
        "astId": 392,
        "contract": "contracts/payments/DstChainPaymentV2Registration.sol:DstChainPaymentV2Registration",
        "label": "__gap",
        "offset": 0,
        "slot": "152",
        "type": "t_array(t_uint256)49_storage"
      },
      {
        "astId": 3817,
        "contract": "contracts/payments/DstChainPaymentV2Registration.sol:DstChainPaymentV2Registration",
        "label": "pausers",
        "offset": 0,
        "slot": "201",
        "type": "t_mapping(t_address,t_bool)"
      },
      {
        "astId": 6477,
        "contract": "contracts/payments/DstChainPaymentV2Registration.sol:DstChainPaymentV2Registration",
        "label": "router",
        "offset": 0,
        "slot": "202",
        "type": "t_contract(IRouter)7712"
      },
      {
        "astId": 9064,
        "contract": "contracts/payments/DstChainPaymentV2Registration.sol:DstChainPaymentV2Registration",
        "label": "providerBalances",
        "offset": 0,
        "slot": "203",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 9070,
        "contract": "contracts/payments/DstChainPaymentV2Registration.sol:DstChainPaymentV2Registration",
        "label": "fees",
        "offset": 0,
        "slot": "204",
        "type": "t_mapping(t_address,t_mapping(t_bytes32,t_uint256))"
      },
      {
        "astId": 1738,
        "contract": "contracts/payments/DstChainPaymentV2Registration.sol:DstChainPaymentV2Registration",
        "label": "_HASHED_NAME",
        "offset": 0,
        "slot": "205",
        "type": "t_bytes32"
      },
      {
        "astId": 1740,
        "contract": "contracts/payments/DstChainPaymentV2Registration.sol:DstChainPaymentV2Registration",
        "label": "_HASHED_VERSION",
        "offset": 0,
        "slot": "206",
        "type": "t_bytes32"
      },
      {
        "astId": 1878,
        "contract": "contracts/payments/DstChainPaymentV2Registration.sol:DstChainPaymentV2Registration",
        "label": "__gap",
        "offset": 0,
        "slot": "207",
        "type": "t_array(t_uint256)50_storage"
      },
      {
        "astId": 9095,
        "contract": "contracts/payments/DstChainPaymentV2Registration.sol:DstChainPaymentV2Registration",
        "label": "voucherTypedHash",
        "offset": 0,
        "slot": "257",
        "type": "t_bytes32"
      },
      {
        "astId": 9101,
        "contract": "contracts/payments/DstChainPaymentV2Registration.sol:DstChainPaymentV2Registration",
        "label": "vouchers",
        "offset": 0,
        "slot": "258",
        "type": "t_mapping(t_address,t_mapping(t_uint256,t_uint256))"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_uint256)49_storage": {
        "base": "t_uint256",
        "encoding": "inplace",
        "label": "uint256[49]",
        "numberOfBytes": "1568"
      },
      "t_array(t_uint256)50_storage": {
        "base": "t_uint256",
        "encoding": "inplace",
        "label": "uint256[50]",
        "numberOfBytes": "1600"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_bytes32": {
        "encoding": "inplace",
        "label": "bytes32",
        "numberOfBytes": "32"
      },
      "t_contract(IRouter)7712": {
        "encoding": "inplace",
        "label": "contract IRouter",
        "numberOfBytes": "20"
      },
      "t_mapping(t_address,t_bool)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      },
      "t_mapping(t_address,t_mapping(t_bytes32,t_uint256))": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => mapping(bytes32 => uint256))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_bytes32,t_uint256)"
      },
      "t_mapping(t_address,t_mapping(t_uint256,t_uint256))": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => mapping(uint256 => uint256))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_uint256,t_uint256)"
      },
      "t_mapping(t_address,t_uint256)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_mapping(t_bytes32,t_uint256)": {
        "encoding": "mapping",
        "key": "t_bytes32",
        "label": "mapping(bytes32 => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_mapping(t_uint256,t_uint256)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      },
      "t_uint8": {
        "encoding": "inplace",
        "label": "uint8",
        "numberOfBytes": "1"
      }
    }
  }
}