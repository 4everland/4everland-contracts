{
  "address": "0x82b2dD6871058Be054675914C1905d1f78A8AC0e",
  "abi": [
    {
      "inputs": [],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint8",
          "name": "version",
          "type": "uint8"
        }
      ],
      "name": "Initialized",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "value",
          "type": "uint256"
        }
      ],
      "name": "NativeWithdrawal",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "contract IERC20Upgradeable",
          "name": "token",
          "type": "address"
        },
        {
          "components": [
            {
              "internalType": "address",
              "name": "provider",
              "type": "address"
            },
            {
              "internalType": "uint64",
              "name": "nonce",
              "type": "uint64"
            },
            {
              "internalType": "bytes32",
              "name": "account",
              "type": "bytes32"
            },
            {
              "components": [
                {
                  "internalType": "enum ResourceData.ResourceType",
                  "name": "resourceType",
                  "type": "uint8"
                },
                {
                  "internalType": "uint256[]",
                  "name": "values",
                  "type": "uint256[]"
                }
              ],
              "internalType": "struct ResourceData.ValuePayload[]",
              "name": "payloads",
              "type": "tuple[]"
            }
          ],
          "indexed": false,
          "internalType": "struct IDstChainPayment.PaymentPayload",
          "name": "payload",
          "type": "tuple"
        }
      ],
      "name": "Paid",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "Paused",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "PauserAdded",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "PauserRemoved",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "contract IRouter",
          "name": "router",
          "type": "address"
        }
      ],
      "name": "RouterUpdated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "Unpaused",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "contract IERC20Upgradeable",
          "name": "token",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "value",
          "type": "uint256"
        }
      ],
      "name": "Withdrawal",
      "type": "event"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "addPauser",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "provider",
          "type": "address"
        }
      ],
      "name": "balanceOf",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes",
          "name": "message",
          "type": "bytes"
        }
      ],
      "name": "decodeSourceChainMessage",
      "outputs": [
        {
          "internalType": "address",
          "name": "provider",
          "type": "address"
        },
        {
          "internalType": "uint64",
          "name": "nonce",
          "type": "uint64"
        },
        {
          "internalType": "bytes32",
          "name": "account",
          "type": "bytes32"
        },
        {
          "components": [
            {
              "internalType": "enum ResourceData.ResourceType",
              "name": "resourceType",
              "type": "uint8"
            },
            {
              "internalType": "uint256[]",
              "name": "values",
              "type": "uint256[]"
            }
          ],
          "internalType": "struct ResourceData.ValuePayload[]",
          "name": "payloads",
          "type": "tuple[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "provider",
          "type": "address"
        },
        {
          "internalType": "enum ResourceData.ResourceType",
          "name": "resourceType",
          "type": "uint8"
        },
        {
          "internalType": "uint256",
          "name": "value",
          "type": "uint256"
        }
      ],
      "name": "getAmountOf",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "provider",
          "type": "address"
        },
        {
          "internalType": "enum ResourceData.ResourceType",
          "name": "resourceType",
          "type": "uint8"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "getValueOf",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "pauser",
          "type": "address"
        },
        {
          "internalType": "contract IRouter",
          "name": "router",
          "type": "address"
        }
      ],
      "name": "initialize",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "provider",
          "type": "address"
        },
        {
          "internalType": "bytes32",
          "name": "account",
          "type": "bytes32"
        },
        {
          "internalType": "uint256",
          "name": "storageFee",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "expirationFee",
          "type": "uint256"
        }
      ],
      "name": "ipfsAllocations",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "expiration",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "provider",
          "type": "address"
        },
        {
          "internalType": "bytes32",
          "name": "account",
          "type": "bytes32"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "expiration",
          "type": "uint256"
        }
      ],
      "name": "ipfsAlloctionsFee",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "storageFee",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "expirationFee",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "isPauser",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "contract IERC20Upgradeable",
          "name": "token",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "value",
          "type": "uint256"
        }
      ],
      "name": "ownerWithdrawERC20",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address payable",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "value",
          "type": "uint256"
        }
      ],
      "name": "ownerWithdrawNative",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "pause",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "paused",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "pausers",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "components": [
            {
              "internalType": "address",
              "name": "provider",
              "type": "address"
            },
            {
              "internalType": "uint64",
              "name": "nonce",
              "type": "uint64"
            },
            {
              "internalType": "bytes32",
              "name": "account",
              "type": "bytes32"
            },
            {
              "components": [
                {
                  "internalType": "enum ResourceData.ResourceType",
                  "name": "resourceType",
                  "type": "uint8"
                },
                {
                  "internalType": "uint256[]",
                  "name": "values",
                  "type": "uint256[]"
                }
              ],
              "internalType": "struct ResourceData.ValuePayload[]",
              "name": "payloads",
              "type": "tuple[]"
            }
          ],
          "internalType": "struct IDstChainPayment.PaymentPayload",
          "name": "payload",
          "type": "tuple"
        }
      ],
      "name": "pay",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "value",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "contract IERC20Upgradeable",
          "name": "_token",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "dstAmount",
          "type": "uint256"
        },
        {
          "internalType": "bytes",
          "name": "message",
          "type": "bytes"
        }
      ],
      "name": "payFromSourceChain",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "provider",
          "type": "address"
        },
        {
          "internalType": "enum ResourceData.ResourceType",
          "name": "resourceType",
          "type": "uint8"
        }
      ],
      "name": "priceOf",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "removePauser",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "renounceOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "renouncePauser",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "router",
      "outputs": [
        {
          "internalType": "contract IRouter",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "unpause",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0x9ce6edd5e50870d063e481fce517db854a90068eefddaf227103923110a49667",
  "receipt": {
    "to": null,
    "from": "0xF1658C608708172655A8e70a1624c29F956Ee63D",
    "contractAddress": "0x82b2dD6871058Be054675914C1905d1f78A8AC0e",
    "transactionIndex": 20,
    "gasUsed": "3542739",
    "logsBloom": "0x
    "blockHash": "0x433ae2b3be912764e06fc3ce61a9f1a322ff139f61381faf188d64518a123cf2",
    "transactionHash": "0x9ce6edd5e50870d063e481fce517db854a90068eefddaf227103923110a49667",
    "logs": [
      {
        "transactionIndex": 20,
        "blockNumber": 26898033,
        "transactionHash": "0x9ce6edd5e50870d063e481fce517db854a90068eefddaf227103923110a49667",
        "address": "0x82b2dD6871058Be054675914C1905d1f78A8AC0e",
        "topics": [
          "0x7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb3847402498"
        ],
        "data": "0x0000000000000000000000000000000000000000000000000000000000000001",
        "logIndex": 73,
        "blockHash": "0x433ae2b3be912764e06fc3ce61a9f1a322ff139f61381faf188d64518a123cf2"
      },
      {
        "transactionIndex": 20,
        "blockNumber": 26898033,
        "transactionHash": "0x9ce6edd5e50870d063e481fce517db854a90068eefddaf227103923110a49667",
        "address": "0x0000000000000000000000000000000000001010",
        "topics": [
          "0x4dfe1bbbcf077ddc3e01291eea2d5c70c2b422b415d95645b9adcfd678cb1d63",
          "0x0000000000000000000000000000000000000000000000000000000000001010",
          "0x000000000000000000000000f1658c608708172655a8e70a1624c29f956ee63d",
          "0x000000000000000000000000be188d6641e8b680743a4815dfa0f6208038960f"
        ],
        "data": "0x0000000000000000000000000000000000000000000000000012d3df17b7851300000000000000000000000000000000000000000000000009efaf6e1a379d4f000000000000000000000000000000000000000000001bd9ef21c4c262281a7c00000000000000000000000000000000000000000000000009dcdb8f0280183c000000000000000000000000000000000000000000001bd9ef3498a179df9f8f",
        "logIndex": 74,
        "blockHash": "0x433ae2b3be912764e06fc3ce61a9f1a322ff139f61381faf188d64518a123cf2"
      }
    ],
    "blockNumber": 26898033,
    "cumulativeGasUsed": "8366835",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "numDeployments": 1,
  "solcInputHash": "54eee4000519ac0fc7fb300703574524",
  "metadata": "{\"compiler\":{\"version\":\"0.8.9+commit.e5eed63a\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"version\",\"type\":\"uint8\"}],\"name\":\"Initialized\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"NativeWithdrawal\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"contract IERC20Upgradeable\",\"name\":\"token\",\"type\":\"address\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"provider\",\"type\":\"address\"},{\"internalType\":\"uint64\",\"name\":\"nonce\",\"type\":\"uint64\"},{\"internalType\":\"bytes32\",\"name\":\"account\",\"type\":\"bytes32\"},{\"components\":[{\"internalType\":\"enum ResourceData.ResourceType\",\"name\":\"resourceType\",\"type\":\"uint8\"},{\"internalType\":\"uint256[]\",\"name\":\"values\",\"type\":\"uint256[]\"}],\"internalType\":\"struct ResourceData.ValuePayload[]\",\"name\":\"payloads\",\"type\":\"tuple[]\"}],\"indexed\":false,\"internalType\":\"struct IDstChainPayment.PaymentPayload\",\"name\":\"payload\",\"type\":\"tuple\"}],\"name\":\"Paid\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"Paused\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"PauserAdded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"PauserRemoved\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"contract IRouter\",\"name\":\"router\",\"type\":\"address\"}],\"name\":\"RouterUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"Unpaused\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"contract IERC20Upgradeable\",\"name\":\"token\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Withdrawal\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"addPauser\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"provider\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"message\",\"type\":\"bytes\"}],\"name\":\"decodeSourceChainMessage\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"provider\",\"type\":\"address\"},{\"internalType\":\"uint64\",\"name\":\"nonce\",\"type\":\"uint64\"},{\"internalType\":\"bytes32\",\"name\":\"account\",\"type\":\"bytes32\"},{\"components\":[{\"internalType\":\"enum ResourceData.ResourceType\",\"name\":\"resourceType\",\"type\":\"uint8\"},{\"internalType\":\"uint256[]\",\"name\":\"values\",\"type\":\"uint256[]\"}],\"internalType\":\"struct ResourceData.ValuePayload[]\",\"name\":\"payloads\",\"type\":\"tuple[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"provider\",\"type\":\"address\"},{\"internalType\":\"enum ResourceData.ResourceType\",\"name\":\"resourceType\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"getAmountOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"provider\",\"type\":\"address\"},{\"internalType\":\"enum ResourceData.ResourceType\",\"name\":\"resourceType\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"getValueOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"pauser\",\"type\":\"address\"},{\"internalType\":\"contract IRouter\",\"name\":\"router\",\"type\":\"address\"}],\"name\":\"initialize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"provider\",\"type\":\"address\"},{\"internalType\":\"bytes32\",\"name\":\"account\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"storageFee\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"expirationFee\",\"type\":\"uint256\"}],\"name\":\"ipfsAllocations\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"expiration\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"provider\",\"type\":\"address\"},{\"internalType\":\"bytes32\",\"name\":\"account\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"expiration\",\"type\":\"uint256\"}],\"name\":\"ipfsAlloctionsFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"storageFee\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"expirationFee\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"isPauser\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IERC20Upgradeable\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"ownerWithdrawERC20\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address payable\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"ownerWithdrawNative\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pause\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"paused\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"pausers\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"provider\",\"type\":\"address\"},{\"internalType\":\"uint64\",\"name\":\"nonce\",\"type\":\"uint64\"},{\"internalType\":\"bytes32\",\"name\":\"account\",\"type\":\"bytes32\"},{\"components\":[{\"internalType\":\"enum ResourceData.ResourceType\",\"name\":\"resourceType\",\"type\":\"uint8\"},{\"internalType\":\"uint256[]\",\"name\":\"values\",\"type\":\"uint256[]\"}],\"internalType\":\"struct ResourceData.ValuePayload[]\",\"name\":\"payloads\",\"type\":\"tuple[]\"}],\"internalType\":\"struct IDstChainPayment.PaymentPayload\",\"name\":\"payload\",\"type\":\"tuple\"}],\"name\":\"pay\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IERC20Upgradeable\",\"name\":\"_token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"dstAmount\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"message\",\"type\":\"bytes\"}],\"name\":\"payFromSourceChain\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"provider\",\"type\":\"address\"},{\"internalType\":\"enum ResourceData.ResourceType\",\"name\":\"resourceType\",\"type\":\"uint8\"}],\"name\":\"priceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"removePauser\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renouncePauser\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"router\",\"outputs\":[{\"internalType\":\"contract IRouter\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"unpause\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"author\":\"Alexandas\",\"details\":\"Dst chain payment contract\",\"kind\":\"dev\",\"methods\":{\"addPauser(address)\":{\"details\":\"add a pauser for the contract\",\"params\":{\"account\":\"address\"}},\"balanceOf(address)\":{\"details\":\"return balance of provider\",\"params\":{\"provider\":\"provider address\"},\"returns\":{\"_0\":\"balance of provider\"}},\"decodeSourceChainMessage(bytes)\":{\"details\":\"decode source chain message\",\"params\":{\"message\":\"message bytes\"},\"returns\":{\"account\":\"user account\",\"nonce\":\"nonce\",\"payloads\":\"payment payloads\",\"provider\":\"provider address\"}},\"getAmountOf(address,uint8,uint256)\":{\"details\":\"return resource amount with value\",\"params\":{\"provider\":\"provider address\",\"resourceType\":\"resource type\",\"value\":\"token value\"},\"returns\":{\"_0\":\"resource amount\"}},\"getValueOf(address,uint8,uint256)\":{\"details\":\"return value of amount resource\",\"params\":{\"amount\":\"resource amount\",\"provider\":\"provider address\",\"resourceType\":\"resource type\"},\"returns\":{\"_0\":\"token value\"}},\"initialize(address,address,address)\":{\"details\":\"proxy initialize function\",\"params\":{\"owner\":\"contract owner\",\"pauser\":\"contract pauser\",\"router\":\"router contract\"}},\"ipfsAllocations(address,bytes32,uint256,uint256)\":{\"details\":\"calculate ipfs storage and expiration with storage fee and expiration fee\",\"params\":{\"account\":\"user account\",\"expirationFee\":\"expiration fee\",\"provider\":\"provider address\",\"storageFee\":\"storage fee\"},\"returns\":{\"amount\":\"ipfs storage amount\",\"expiration\":\"ipfs expiration(in seconds)\"}},\"ipfsAlloctionsFee(address,bytes32,uint256,uint256)\":{\"details\":\"calculate fee for ipfs storage and expiration\",\"params\":{\"account\":\"user account\",\"amount\":\"ipfs storage amount\",\"expiration\":\"ipfs expiration(in seconds)\",\"provider\":\"provider address\"},\"returns\":{\"expirationFee\":\"ipfs expiration fee\",\"storageFee\":\"ipfs storage fee\"}},\"isPauser(address)\":{\"details\":\"whether the account is the contract pauser\",\"params\":{\"account\":\"address\"},\"returns\":{\"_0\":\"whether account is a pauser\"}},\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"ownerWithdrawERC20(address,address,uint256)\":{\"details\":\"withdraw token\",\"params\":{\"to\":\"receiver address\",\"token\":\"token address\",\"value\":\"token value\"}},\"ownerWithdrawNative(address,uint256)\":{\"details\":\"withdraw ETH\",\"params\":{\"to\":\"receiver address\",\"value\":\"token value\"}},\"pause()\":{\"details\":\"pause the contract\"},\"paused()\":{\"details\":\"Returns true if the contract is paused, and false otherwise.\"},\"pay((address,uint64,bytes32,(uint8,uint256[])[]))\":{\"details\":\"pay on dst chain\",\"params\":{\"payload\":\"payment payload\"},\"returns\":{\"value\":\"payment value\"}},\"payFromSourceChain(address,uint256,bytes)\":{\"details\":\"pay from source chain only called by message receiver\",\"params\":{\"_token\":\"token address\",\"dstAmount\":\"token amount\",\"message\":\"payment payload message bytes\"}},\"priceOf(address,uint8)\":{\"details\":\"return resource price\",\"params\":{\"provider\":\"provider address\",\"resourceType\":\"resource type\"},\"returns\":{\"_0\":\"resource price\"}},\"removePauser(address)\":{\"details\":\"remove a pauser for the contract\",\"params\":{\"account\":\"address\"}},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner.\"},\"renouncePauser()\":{\"details\":\"remove a pauser for the contract\"},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"},\"unpause()\":{\"details\":\"unpause the contract\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/payments/DstChainPayment.sol\":\"DstChainPayment\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"details\":{\"constantOptimizer\":true,\"cse\":true,\"deduplicate\":true,\"inliner\":true,\"jumpdestRemover\":true,\"orderLiterals\":true,\"peephole\":true,\"yul\":false},\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/ContextUpgradeable.sol\\\";\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract OwnableUpgradeable is Initializable, ContextUpgradeable {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    function __Ownable_init() internal onlyInitializing {\\n        __Ownable_init_unchained();\\n    }\\n\\n    function __Ownable_init_unchained() internal onlyInitializing {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[49] private __gap;\\n}\\n\",\"keccak256\":\"0x652fee292f698d8dba81bf287cb71f1682f6483b67ebe601a5f7387dcfc30b34\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/interfaces/IERC20Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (interfaces/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../token/ERC20/IERC20Upgradeable.sol\\\";\\n\",\"keccak256\":\"0xe73087c5001a37cf7186b3709377c7ceb01a0d38fb908723d1464cea66b4958c\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (proxy/utils/Initializable.sol)\\n\\npragma solidity ^0.8.2;\\n\\nimport \\\"../../utils/AddressUpgradeable.sol\\\";\\n\\n/**\\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\\n * behind a proxy. Since proxied contracts do not make use of a constructor, it's common to move constructor logic to an\\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\\n *\\n * The initialization functions use a version number. Once a version number is used, it is consumed and cannot be\\n * reused. This mechanism prevents re-execution of each \\\"step\\\" but allows the creation of new initialization steps in\\n * case an upgrade adds a module that needs to be initialized.\\n *\\n * For example:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```\\n * contract MyToken is ERC20Upgradeable {\\n *     function initialize() initializer public {\\n *         __ERC20_init(\\\"MyToken\\\", \\\"MTK\\\");\\n *     }\\n * }\\n * contract MyTokenV2 is MyToken, ERC20PermitUpgradeable {\\n *     function initializeV2() reinitializer(2) public {\\n *         __ERC20Permit_init(\\\"MyToken\\\");\\n *     }\\n * }\\n * ```\\n *\\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\\n * possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}.\\n *\\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\\n *\\n * [CAUTION]\\n * ====\\n * Avoid leaving a contract uninitialized.\\n *\\n * An uninitialized contract can be taken over by an attacker. This applies to both a proxy and its implementation\\n * contract, which may impact the proxy. To prevent the implementation contract from being used, you should invoke\\n * the {_disableInitializers} function in the constructor to automatically lock it when it is deployed:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```\\n * /// @custom:oz-upgrades-unsafe-allow constructor\\n * constructor() {\\n *     _disableInitializers();\\n * }\\n * ```\\n * ====\\n */\\nabstract contract Initializable {\\n    /**\\n     * @dev Indicates that the contract has been initialized.\\n     * @custom:oz-retyped-from bool\\n     */\\n    uint8 private _initialized;\\n\\n    /**\\n     * @dev Indicates that the contract is in the process of being initialized.\\n     */\\n    bool private _initializing;\\n\\n    /**\\n     * @dev Triggered when the contract has been initialized or reinitialized.\\n     */\\n    event Initialized(uint8 version);\\n\\n    /**\\n     * @dev A modifier that defines a protected initializer function that can be invoked at most once. In its scope,\\n     * `onlyInitializing` functions can be used to initialize parent contracts. Equivalent to `reinitializer(1)`.\\n     */\\n    modifier initializer() {\\n        bool isTopLevelCall = _setInitializedVersion(1);\\n        if (isTopLevelCall) {\\n            _initializing = true;\\n        }\\n        _;\\n        if (isTopLevelCall) {\\n            _initializing = false;\\n            emit Initialized(1);\\n        }\\n    }\\n\\n    /**\\n     * @dev A modifier that defines a protected reinitializer function that can be invoked at most once, and only if the\\n     * contract hasn't been initialized to a greater version before. In its scope, `onlyInitializing` functions can be\\n     * used to initialize parent contracts.\\n     *\\n     * `initializer` is equivalent to `reinitializer(1)`, so a reinitializer may be used after the original\\n     * initialization step. This is essential to configure modules that are added through upgrades and that require\\n     * initialization.\\n     *\\n     * Note that versions can jump in increments greater than 1; this implies that if multiple reinitializers coexist in\\n     * a contract, executing them in the right order is up to the developer or operator.\\n     */\\n    modifier reinitializer(uint8 version) {\\n        bool isTopLevelCall = _setInitializedVersion(version);\\n        if (isTopLevelCall) {\\n            _initializing = true;\\n        }\\n        _;\\n        if (isTopLevelCall) {\\n            _initializing = false;\\n            emit Initialized(version);\\n        }\\n    }\\n\\n    /**\\n     * @dev Modifier to protect an initialization function so that it can only be invoked by functions with the\\n     * {initializer} and {reinitializer} modifiers, directly or indirectly.\\n     */\\n    modifier onlyInitializing() {\\n        require(_initializing, \\\"Initializable: contract is not initializing\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Locks the contract, preventing any future reinitialization. This cannot be part of an initializer call.\\n     * Calling this in the constructor of a contract will prevent that contract from being initialized or reinitialized\\n     * to any version. It is recommended to use this to lock implementation contracts that are designed to be called\\n     * through proxies.\\n     */\\n    function _disableInitializers() internal virtual {\\n        _setInitializedVersion(type(uint8).max);\\n    }\\n\\n    function _setInitializedVersion(uint8 version) private returns (bool) {\\n        // If the contract is initializing we ignore whether _initialized is set in order to support multiple\\n        // inheritance patterns, but we only do this in the context of a constructor, and for the lowest level\\n        // of initializers, because in other contexts the contract may have been reentered.\\n        if (_initializing) {\\n            require(\\n                version == 1 && !AddressUpgradeable.isContract(address(this)),\\n                \\\"Initializable: contract is already initialized\\\"\\n            );\\n            return false;\\n        } else {\\n            require(_initialized < version, \\\"Initializable: contract is already initialized\\\");\\n            _initialized = version;\\n            return true;\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x7454006cccb737612b00104d2f606d728e2818b778e7e55542f063c614ce46ba\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (security/Pausable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/ContextUpgradeable.sol\\\";\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Contract module which allows children to implement an emergency stop\\n * mechanism that can be triggered by an authorized account.\\n *\\n * This module is used through inheritance. It will make available the\\n * modifiers `whenNotPaused` and `whenPaused`, which can be applied to\\n * the functions of your contract. Note that they will not be pausable by\\n * simply including this module, only once the modifiers are put in place.\\n */\\nabstract contract PausableUpgradeable is Initializable, ContextUpgradeable {\\n    /**\\n     * @dev Emitted when the pause is triggered by `account`.\\n     */\\n    event Paused(address account);\\n\\n    /**\\n     * @dev Emitted when the pause is lifted by `account`.\\n     */\\n    event Unpaused(address account);\\n\\n    bool private _paused;\\n\\n    /**\\n     * @dev Initializes the contract in unpaused state.\\n     */\\n    function __Pausable_init() internal onlyInitializing {\\n        __Pausable_init_unchained();\\n    }\\n\\n    function __Pausable_init_unchained() internal onlyInitializing {\\n        _paused = false;\\n    }\\n\\n    /**\\n     * @dev Returns true if the contract is paused, and false otherwise.\\n     */\\n    function paused() public view virtual returns (bool) {\\n        return _paused;\\n    }\\n\\n    /**\\n     * @dev Modifier to make a function callable only when the contract is not paused.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must not be paused.\\n     */\\n    modifier whenNotPaused() {\\n        require(!paused(), \\\"Pausable: paused\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Modifier to make a function callable only when the contract is paused.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must be paused.\\n     */\\n    modifier whenPaused() {\\n        require(paused(), \\\"Pausable: not paused\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Triggers stopped state.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must not be paused.\\n     */\\n    function _pause() internal virtual whenNotPaused {\\n        _paused = true;\\n        emit Paused(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Returns to normal state.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must be paused.\\n     */\\n    function _unpause() internal virtual whenPaused {\\n        _paused = false;\\n        emit Unpaused(_msgSender());\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[49] private __gap;\\n}\\n\",\"keccak256\":\"0x041af89e5e60b74e1203d5a34614c9de379726f52ecb8cf064cab78b9fdcdf9d\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/security/ReentrancyGuardUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (security/ReentrancyGuard.sol)\\n\\npragma solidity ^0.8.0;\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Contract module that helps prevent reentrant calls to a function.\\n *\\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\\n * available, which can be applied to functions to make sure there are no nested\\n * (reentrant) calls to them.\\n *\\n * Note that because there is a single `nonReentrant` guard, functions marked as\\n * `nonReentrant` may not call one another. This can be worked around by making\\n * those functions `private`, and then adding `external` `nonReentrant` entry\\n * points to them.\\n *\\n * TIP: If you would like to learn more about reentrancy and alternative ways\\n * to protect against it, check out our blog post\\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\\n */\\nabstract contract ReentrancyGuardUpgradeable is Initializable {\\n    // Booleans are more expensive than uint256 or any type that takes up a full\\n    // word because each write operation emits an extra SLOAD to first read the\\n    // slot's contents, replace the bits taken up by the boolean, and then write\\n    // back. This is the compiler's defense against contract upgrades and\\n    // pointer aliasing, and it cannot be disabled.\\n\\n    // The values being non-zero value makes deployment a bit more expensive,\\n    // but in exchange the refund on every call to nonReentrant will be lower in\\n    // amount. Since refunds are capped to a percentage of the total\\n    // transaction's gas, it is best to keep them low in cases like this one, to\\n    // increase the likelihood of the full refund coming into effect.\\n    uint256 private constant _NOT_ENTERED = 1;\\n    uint256 private constant _ENTERED = 2;\\n\\n    uint256 private _status;\\n\\n    function __ReentrancyGuard_init() internal onlyInitializing {\\n        __ReentrancyGuard_init_unchained();\\n    }\\n\\n    function __ReentrancyGuard_init_unchained() internal onlyInitializing {\\n        _status = _NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Prevents a contract from calling itself, directly or indirectly.\\n     * Calling a `nonReentrant` function from another `nonReentrant`\\n     * function is not supported. It is possible to prevent this from happening\\n     * by making the `nonReentrant` function external, and making it call a\\n     * `private` function that does the actual work.\\n     */\\n    modifier nonReentrant() {\\n        // On the first call to nonReentrant, _notEntered will be true\\n        require(_status != _ENTERED, \\\"ReentrancyGuard: reentrant call\\\");\\n\\n        // Any calls to nonReentrant after this point will fail\\n        _status = _ENTERED;\\n\\n        _;\\n\\n        // By storing the original value once again, a refund is triggered (see\\n        // https://eips.ethereum.org/EIPS/eip-2200)\\n        _status = _NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[49] private __gap;\\n}\\n\",\"keccak256\":\"0x8cc03c5ac17e8a7396e487cda41fc1f1dfdb91db7d528e6da84bee3b6dd7e167\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/token/ERC20/IERC20Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20Upgradeable {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) external returns (bool);\\n}\\n\",\"keccak256\":\"0x4e733d3164f73f461eaf9d8087a7ad1ea180bdc8ba0d3d61b0e1ae16d8e63dff\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/token/ERC20/utils/SafeERC20Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/utils/SafeERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20Upgradeable.sol\\\";\\nimport \\\"../../../utils/AddressUpgradeable.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20Upgradeable {\\n    using AddressUpgradeable for address;\\n\\n    function safeTransfer(\\n        IERC20Upgradeable token,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\n    }\\n\\n    function safeTransferFrom(\\n        IERC20Upgradeable token,\\n        address from,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\n    }\\n\\n    /**\\n     * @dev Deprecated. This function has issues similar to the ones found in\\n     * {IERC20-approve}, and its usage is discouraged.\\n     *\\n     * Whenever possible, use {safeIncreaseAllowance} and\\n     * {safeDecreaseAllowance} instead.\\n     */\\n    function safeApprove(\\n        IERC20Upgradeable token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        // safeApprove should only be called when setting an initial allowance,\\n        // or when resetting it to zero. To increase and decrease it, use\\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\\n        require(\\n            (value == 0) || (token.allowance(address(this), spender) == 0),\\n            \\\"SafeERC20: approve from non-zero to non-zero allowance\\\"\\n        );\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\n    }\\n\\n    function safeIncreaseAllowance(\\n        IERC20Upgradeable token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender) + value;\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n\\n    function safeDecreaseAllowance(\\n        IERC20Upgradeable token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        unchecked {\\n            uint256 oldAllowance = token.allowance(address(this), spender);\\n            require(oldAllowance >= value, \\\"SafeERC20: decreased allowance below zero\\\");\\n            uint256 newAllowance = oldAllowance - value;\\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n        }\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IERC20Upgradeable token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\\n        // the target address contains contract code and also asserts for success in the low-level call.\\n\\n        bytes memory returndata = address(token).functionCall(data, \\\"SafeERC20: low-level call failed\\\");\\n        if (returndata.length > 0) {\\n            // Return data is optional\\n            require(abi.decode(returndata, (bool)), \\\"SafeERC20: ERC20 operation did not succeed\\\");\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x3e26a49d2fa5ef8338b8a9467c91e54f417cb07e849b1cc0f4ebc4d2a147938e\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary AddressUpgradeable {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x55cf2bd9fc76704ddcdc19834cd288b7de00fc0f298a40ea16a954ae8991db2d\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract ContextUpgradeable is Initializable {\\n    function __Context_init() internal onlyInitializing {\\n    }\\n\\n    function __Context_init_unchained() internal onlyInitializing {\\n    }\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[50] private __gap;\\n}\\n\",\"keccak256\":\"0x963ea7f0b48b032eef72fe3a7582edf78408d6f834115b9feadd673a4d5bd149\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/math/SafeMathUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (utils/math/SafeMath.sol)\\n\\npragma solidity ^0.8.0;\\n\\n// CAUTION\\n// This version of SafeMath should only be used with Solidity 0.8 or later,\\n// because it relies on the compiler's built in overflow checks.\\n\\n/**\\n * @dev Wrappers over Solidity's arithmetic operations.\\n *\\n * NOTE: `SafeMath` is generally not needed starting with Solidity 0.8, since the compiler\\n * now has built in overflow checking.\\n */\\nlibrary SafeMathUpgradeable {\\n    /**\\n     * @dev Returns the addition of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            uint256 c = a + b;\\n            if (c < a) return (false, 0);\\n            return (true, c);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b > a) return (false, 0);\\n            return (true, a - b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\\n            // benefit is lost if 'b' is also tested.\\n            // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\n            if (a == 0) return (true, 0);\\n            uint256 c = a * b;\\n            if (c / a != b) return (false, 0);\\n            return (true, c);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the division of two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b == 0) return (false, 0);\\n            return (true, a / b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b == 0) return (false, 0);\\n            return (true, a % b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the addition of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `+` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Addition cannot overflow.\\n     */\\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a + b;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting on\\n     * overflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a - b;\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `*` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Multiplication cannot overflow.\\n     */\\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a * b;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a / b;\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting when dividing by zero.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a % b;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\\n     * overflow (when the result is negative).\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {trySub}.\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(\\n        uint256 a,\\n        uint256 b,\\n        string memory errorMessage\\n    ) internal pure returns (uint256) {\\n        unchecked {\\n            require(b <= a, errorMessage);\\n            return a - b;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting with custom message on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(\\n        uint256 a,\\n        uint256 b,\\n        string memory errorMessage\\n    ) internal pure returns (uint256) {\\n        unchecked {\\n            require(b > 0, errorMessage);\\n            return a / b;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting with custom message when dividing by zero.\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {tryMod}.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(\\n        uint256 a,\\n        uint256 b,\\n        string memory errorMessage\\n    ) internal pure returns (uint256) {\\n        unchecked {\\n            require(b > 0, errorMessage);\\n            return a % b;\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xcaa8b7861115ea691c77ddbeac140a444e0edcd1d9812a43942c0f6b42b36a49\",\"license\":\"MIT\"},\"contracts/access/OwnerWithdrawable.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSE\\n\\npragma solidity >=0.8.0;\\n\\nimport '@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol';\\nimport '@openzeppelin/contracts-upgradeable/interfaces/IERC20Upgradeable.sol';\\nimport '@openzeppelin/contracts-upgradeable/token/ERC20/utils/SafeERC20Upgradeable.sol';\\n\\n/// @author Alexandas\\n/// @dev Make the contract owner can withdraw token and eth\\nabstract contract OwnerWithdrawable is OwnableUpgradeable {\\n\\tusing SafeERC20Upgradeable for IERC20Upgradeable;\\n\\n\\t/// @dev emit when token is withdrawn\\n\\t/// @param token token address\\n\\t/// @param to receiver address\\n\\t/// @param value token value\\n\\tevent Withdrawal(IERC20Upgradeable token, address to, uint256 value);\\n\\n\\t/// @dev emit when ETH is withdrawn\\n\\t/// @param to receiver address\\n\\t/// @param value token value\\n\\tevent NativeWithdrawal(address to, uint256 value);\\n\\n\\t/// @dev withdraw token\\n\\t/// @param token token address\\n\\t/// @param to receiver address\\n\\t/// @param value token value\\n\\tfunction ownerWithdrawERC20(\\n\\t\\tIERC20Upgradeable token,\\n\\t\\taddress to,\\n\\t\\tuint256 value\\n\\t) external onlyOwner {\\n\\t\\ttoken.safeTransfer(to, value);\\n\\t\\temit Withdrawal(token, to, value);\\n\\t}\\n\\n\\t/// @dev withdraw ETH\\n\\t/// @param to receiver address\\n\\t/// @param value token value\\n\\tfunction ownerWithdrawNative(address payable to, uint256 value) external onlyOwner {\\n\\t\\tbool success = to.send(value);\\n\\t\\trequire(success, 'OwnerWithdrawable: withdraw native token failed');\\n\\t\\temit NativeWithdrawal(to, value);\\n\\t}\\n}\\n\",\"keccak256\":\"0x0f36a2a9ed2839c2530c4e27f9b1797f13e8a6a3d3c9bcaa4c87202f14757954\",\"license\":\"UNLICENSE\"},\"contracts/access/Pauser.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0-only\\n\\npragma solidity >=0.8.0;\\n\\nimport '@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol';\\nimport '@openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol';\\n\\n/// @author Alexandas\\n/// @dev Pauser contract\\nabstract contract Pauser is OwnableUpgradeable, PausableUpgradeable {\\n\\t/// @dev all pausers\\n\\tmapping(address => bool) public pausers;\\n\\n\\t/// @dev emit when pauser is added\\n\\t/// @param account pauser address\\n\\tevent PauserAdded(address account);\\n\\n\\t/// @dev emit when pauser is removed\\n\\t/// @param account pauser address\\n\\tevent PauserRemoved(address account);\\n\\n\\tfunction __Init_Pauser(address account) internal onlyInitializing {\\n\\t\\t_addPauser(account);\\n\\t}\\n\\n\\tmodifier onlyPauser() {\\n\\t\\trequire(isPauser(msg.sender), 'Pauser: caller is not the pauser');\\n\\t\\t_;\\n\\t}\\n\\n\\t/// @dev pause the contract\\n\\tfunction pause() public onlyPauser {\\n\\t\\t_pause();\\n\\t}\\n\\n\\t/// @dev unpause the contract\\n\\tfunction unpause() public onlyPauser {\\n\\t\\t_unpause();\\n\\t}\\n\\n\\t/// @dev whether the account is the contract pauser\\n\\t/// @param account address\\n\\t/// @return whether account is a pauser\\n\\tfunction isPauser(address account) public view returns (bool) {\\n\\t\\treturn pausers[account];\\n\\t}\\n\\n\\t/// @dev add a pauser for the contract\\n\\t/// @param account address\\n\\tfunction addPauser(address account) public onlyOwner {\\n\\t\\t_addPauser(account);\\n\\t}\\n\\n\\t/// @dev remove a pauser for the contract\\n\\t/// @param account address\\n\\tfunction removePauser(address account) public onlyOwner {\\n\\t\\t_removePauser(account);\\n\\t}\\n\\n\\t/// @dev remove a pauser for the contract\\n\\tfunction renouncePauser() public {\\n\\t\\t_removePauser(msg.sender);\\n\\t}\\n\\n\\tfunction _addPauser(address account) private {\\n\\t\\trequire(!isPauser(account), 'Pauser: account is already pauser');\\n\\t\\tpausers[account] = true;\\n\\t\\temit PauserAdded(account);\\n\\t}\\n\\n\\tfunction _removePauser(address account) private {\\n\\t\\trequire(isPauser(account), 'Pauser: account is not pauser');\\n\\t\\tdelete pausers[account];\\n\\t\\temit PauserRemoved(account);\\n\\t}\\n}\\n\",\"keccak256\":\"0x609e378196c861ff988b70c73d1cd3ac44f7a2023b22afd521fe7a8a0fb5b0ba\",\"license\":\"GPL-3.0-only\"},\"contracts/govers/RouterWrapper.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSE\\n\\npragma solidity >=0.8.0;\\nimport '@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol';\\nimport '../interfaces/IRouter.sol';\\n\\n/// @author Alexandas\\n/// @dev Router wrapper contract\\nabstract contract RouterWrapper is Initializable {\\n\\t/// @dev router contract address\\n\\tIRouter public router;\\n\\n\\t/// @dev emit when provider registry contract updated\\n\\t/// @param router contract address\\n\\tevent RouterUpdated(IRouter router);\\n\\n\\tmodifier onlyGovernance() {\\n\\t\\tIGovernance governance = router.Governance();\\n\\t\\trequire(msg.sender == address(governance), 'RouterWrapper: caller is not the governance');\\n\\t\\t_;\\n\\t}\\n\\n\\tmodifier onlyProviderController() {\\n\\t\\tIProviderController controller = router.ProviderController();\\n\\t\\trequire(msg.sender == address(controller), 'RouterWrapper: caller is not the provider controller');\\n\\t\\t_;\\n\\t}\\n\\n\\tmodifier onlyProvider() {\\n\\t\\tIProviderRegistry providerRegistry = router.ProviderRegistry();\\n\\t\\trequire(providerRegistry.isProvider(msg.sender), 'RouterWrapper: caller is not the provider');\\n\\t\\t_;\\n\\t}\\n\\n\\tmodifier onlyMessageReceiver() {\\n\\t\\taddress messageReceiver = router.MessageReceiver();\\n\\t\\trequire(msg.sender == messageReceiver, 'RouterWrapper: caller is not message receiver');\\n\\t\\t_;\\n\\t}\\n\\n\\tmodifier onlyDstChainPayment() {\\n\\t\\tIDstChainPayment dstChainPayment = router.DstChainPayment();\\n\\t\\trequire(msg.sender == address(dstChainPayment), 'RouterWrapper: caller is not dst chain payment');\\n\\t\\t_;\\n\\t}\\n\\n\\tmodifier onlyFundPool() {\\n\\t\\tIFundPool pool = router.FundPool();\\n\\t\\trequire(msg.sender == address(pool), 'RouterWrapper: caller is not fund pool');\\n\\t\\t_;\\n\\t}\\n\\n\\t/// @dev initialize provider registry contract\\n\\t/// @param _router contract address\\n\\tfunction __Init_Router(IRouter _router) internal onlyInitializing {\\n\\t\\t_setRouter(_router);\\n\\t}\\n\\n\\tfunction _setRouter(IRouter _router) internal {\\n\\t\\trequire(address(_router) != address(0), 'RouterWrapper: zero address');\\n\\t\\trouter = _router;\\n\\t\\temit RouterUpdated(_router);\\n\\t}\\n}\\n\",\"keccak256\":\"0x0867787020dc7ff95048c08570a69761ebdb8608517829cd122ef9677da8c45f\",\"license\":\"UNLICENSE\"},\"contracts/interfaces/IBilling.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSE\\n\\npragma solidity >=0.8.0;\\n\\nimport '@openzeppelin/contracts-upgradeable/interfaces/IERC20Upgradeable.sol';\\nimport '../libraries/ResourceData.sol';\\nimport '../resources/interfaces/IResourcePriceAdaptor.sol';\\n\\n/// @author Alexandas\\n/// @dev Billing interface\\ninterface IBilling {\\n\\tstruct BillEntry {\\n\\t\\tResourceData.ResourceType resourceType;\\n\\t\\tuint256 amount;\\n\\t}\\n\\n\\tstruct Bill {\\n\\t\\tuint256 indexBlock;\\n\\t\\tBillEntry[] entries;\\n\\t}\\n\\n\\t/// @dev emit when billing types hash updated\\n\\t/// @param hash billing types Hash\\n\\tevent BillingTypesHashUpdated(bytes32 hash);\\n\\n\\t/// @dev emit when bills finalized\\n\\t/// @param provider provider address\\n\\t/// @param account user account\\n\\t/// @param bills bills data\\n\\t/// @param amount fee\\n\\t/// @param nonce nonce\\n\\tevent Billing(address provider, bytes32 account, bytes bills, uint256 amount, uint64 nonce);\\n\\n\\t/// @dev get billing types hash\\n\\t/// @return billing types hash\\n\\tfunction billingTypesHash() external view returns (bytes32);\\n\\n\\t/// @dev spend bills\\n\\t/// @param provider provider address\\n\\t/// @param account user account\\n\\t/// @param bills billing data\\n\\t/// @param timeout tx timeout\\n\\t/// @param nonce billing nonce\\n\\t/// @param signature billing signature\\n\\t/// @return fee billing fee\\n\\tfunction spend(\\n\\t\\taddress provider,\\n\\t\\tbytes32 account,\\n\\t\\tbytes memory bills,\\n\\t\\tuint256 timeout,\\n\\t\\tuint64 nonce,\\n\\t\\tbytes memory signature\\n\\t) external returns (uint256 fee);\\n\\n\\t/// @dev return balance of provider\\n\\t/// @param provider provider address\\n\\t/// @return balance of provider\\n\\tfunction balanceOf(address provider) external view returns (uint256);\\n\\n\\t/// @dev provider nonces for account\\n\\t/// @param provider provider address\\n\\t/// @param account user account\\n\\t/// @param nonce nonce\\n\\t/// @return whether nonce exists\\n\\tfunction nonceExists(\\n\\t\\taddress provider,\\n\\t\\tbytes32 account,\\n\\t\\tuint64 nonce\\n\\t) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x28413ecc2f7477ad5f216bc9e6d543fc567af662ee6a278abad15505ddf19597\",\"license\":\"UNLICENSE\"},\"contracts/interfaces/IDstChainPayment.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSE\\n\\npragma solidity >=0.8.0;\\n\\nimport '@openzeppelin/contracts-upgradeable/interfaces/IERC20Upgradeable.sol';\\nimport '../libraries/ResourceData.sol';\\n\\n/// @author Alexandas\\n/// @dev DstChainPayment interface\\ninterface IDstChainPayment {\\n\\tstruct PaymentPayload {\\n\\t\\taddress provider;\\n\\t\\tuint64 nonce;\\n\\t\\tbytes32 account;\\n\\t\\tResourceData.ValuePayload[] payloads;\\n\\t}\\n\\n\\t/// @dev emit when a user paid\\n\\t/// @param token token address\\n\\t/// @param payload payment payload\\n\\tevent Paid(IERC20Upgradeable token, PaymentPayload payload);\\n\\n\\t/// @dev pay from source chain only called by message receiver\\n\\t/// @param _token token address\\n\\t/// @param dstAmount token amount\\n\\t/// @param message payment payload message bytes\\n\\tfunction payFromSourceChain(\\n\\t\\tIERC20Upgradeable _token,\\n\\t\\tuint256 dstAmount,\\n\\t\\tbytes calldata message\\n\\t) external;\\n\\n\\t/// @dev pay on dst chain\\n\\t/// @param payload payment payload\\n\\t/// @return value payment value\\n\\tfunction pay(PaymentPayload memory payload) external returns (uint256 value);\\n\\n\\t/// @dev decode source chain message\\n\\t/// @param message message bytes\\n\\t/// @return provider provider address\\n\\t/// @return nonce nonce\\n\\t/// @return account user account\\n\\t/// @return payloads payment payloads\\n\\tfunction decodeSourceChainMessage(bytes memory message)\\n\\t\\texternal\\n\\t\\tview\\n\\t\\treturns (\\n\\t\\t\\taddress provider,\\n\\t\\t\\tuint64 nonce,\\n\\t\\t\\tbytes32 account,\\n\\t\\t\\tResourceData.ValuePayload[] memory payloads\\n\\t\\t);\\n\\n\\t/// @dev calculate fee for ipfs storage and expiration\\n\\t/// @param provider provider address\\n\\t/// @param account user account\\n\\t/// @param amount ipfs storage amount\\n\\t/// @param expiration ipfs expiration(in seconds)\\n\\t/// @return storageFee ipfs storage fee\\n\\t/// @return expirationFee ipfs expiration fee\\n\\tfunction ipfsAlloctionsFee(\\n\\t\\taddress provider,\\n\\t\\tbytes32 account,\\n\\t\\tuint256 amount,\\n\\t\\tuint256 expiration\\n\\t) external view returns (uint256 storageFee, uint256 expirationFee);\\n\\n\\t/// @dev calculate ipfs storage and expiration with storage fee and expiration fee\\n\\t/// @param provider provider address\\n\\t/// @param account user account\\n\\t/// @param storageFee storage fee\\n\\t/// @param expirationFee expiration fee\\n\\t/// @return amount ipfs storage amount\\n\\t/// @return expiration ipfs expiration(in seconds)\\n\\tfunction ipfsAllocations(\\n\\t\\taddress provider,\\n\\t\\tbytes32 account,\\n\\t\\tuint256 storageFee,\\n\\t\\tuint256 expirationFee\\n\\t) external view returns (uint256 amount, uint256 expiration);\\n\\n\\t/// @dev return balance of provider\\n\\t/// @param provider provider address\\n\\t/// @return balance of provider\\n\\tfunction balanceOf(address provider) external view returns (uint256);\\n\\n\\t/// @dev return resource price\\n\\t/// @param provider provider address\\n\\t/// @param resourceType resource type\\n\\t/// @return resource price\\n\\tfunction priceOf(address provider, ResourceData.ResourceType resourceType) external view returns (uint256);\\n\\n\\t/// @dev return value of amount resource\\n\\t/// @param provider provider address\\n\\t/// @param resourceType resource type\\n\\t/// @param amount resource amount\\n\\t/// @return token value\\n\\tfunction getValueOf(\\n\\t\\taddress provider,\\n\\t\\tResourceData.ResourceType resourceType,\\n\\t\\tuint256 amount\\n\\t) external view returns (uint256);\\n\\n\\t/// @dev return resource amount with value\\n\\t/// @param provider provider address\\n\\t/// @param resourceType resource type\\n\\t/// @param value token value\\n\\t/// @return resource amount\\n\\tfunction getAmountOf(\\n\\t\\taddress provider,\\n\\t\\tResourceData.ResourceType resourceType,\\n\\t\\tuint256 value\\n\\t) external view returns (uint256);\\n}\\n\",\"keccak256\":\"0xb291ce3c1e53e0904a98a9a6578b90caa7b5907db3f1f633a388476fe1dd9b5d\",\"license\":\"UNLICENSE\"},\"contracts/interfaces/IFundPool.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSE\\n\\npragma solidity >=0.8.0;\\n\\n/// @author Alexandas\\n/// @dev FundPool interface\\ninterface IFundPool {\\n\\n\\t/// @dev emit when bill spent\\n\\t/// @param provider provider address\\n\\t/// @param account user account\\n\\t/// @param amount token amount\\n\\tevent Spent(address provider, bytes32 account, uint256 amount);\\n\\n\\t/// @dev emit when account recharged\\n\\t/// @param provider provider address\\n\\t/// @param account user account\\n\\t/// @param amount token amount\\n\\tevent Recharged(address provider, bytes32 account, uint256 amount);\\n\\n\\t/// @dev emit when user withdrawn\\n\\t/// @param provider provider address\\n\\t/// @param account user account\\n\\t/// @param to token receiver\\n\\t/// @param amount token amount\\n\\tevent Withdrawn(address provider, bytes32 account, address to, uint256 amount);\\n\\n\\t/// @dev recharge for account\\n\\t/// @param provider provider address\\n\\t/// @param account user account\\n\\t/// @param amount token amount\\n\\tfunction recharge(\\n\\t\\taddress provider,\\n\\t\\tbytes32 account,\\n\\t\\tuint256 amount\\n\\t) external;\\n\\n\\t/// @dev spend bills for account\\n\\t/// @param provider provider address\\n\\t/// @param account user account\\n\\t/// @param bills billing data\\n\\t/// @param timeout tx timeout\\n\\t/// @param nonce billing nonce\\n\\t/// @param signature provider signature\\n\\t/// @return fee bills fee\\n\\tfunction spend(\\n\\t\\taddress provider,\\n\\t\\tbytes32 account,\\n\\t\\tbytes memory bills,\\n\\t\\tuint256 timeout,\\n\\t\\tuint64 nonce,\\n\\t\\tbytes memory signature\\n\\t) external returns (uint256 fee);\\n\\n\\t/// @dev withdraw token for account\\n\\t/// @param provider provider address\\n\\t/// @param account user account\\n\\t/// @param bills billing data\\n\\t/// @param timeout tx timeout\\n\\t/// @param nonce billing nonce\\n\\t/// @param signature billing signature\\n\\t/// @param to token receiver\\n\\t/// @param amount token amount\\n\\t/// @param signature provider signature\\n\\t/// @return fee bill fee\\n\\tfunction withdraw(\\n\\t\\taddress provider,\\n\\t\\tbytes32 account,\\n\\t\\tbytes memory bills,\\n\\t\\tuint256 timeout,\\n\\t\\tuint64 nonce,\\n\\t\\tbytes memory signature,\\n\\t\\taddress to,\\n\\t\\tuint256 amount\\n\\t) external returns (uint256 fee);\\n\\n\\t/// @dev return wallet of the account\\n\\t/// @param provider provider address\\n\\t/// @param account user account\\n\\t/// @return wallet of the account\\n\\tfunction walletOf(address provider, bytes32 account) external view returns (address);\\n\\n\\t/// @dev return balance of account\\n\\t/// @param provider provider address\\n\\t/// @param account user account\\n\\t/// @return balance of account account\\n\\tfunction balanceOf(address provider, bytes32 account) external view returns (uint256);\\n}\\n\",\"keccak256\":\"0x6612ea3955dc515aa88c904f58f044ebb82753881c4b0cfb128b60f5e949b666\",\"license\":\"UNLICENSE\"},\"contracts/interfaces/IGovernance.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSE\\n\\npragma solidity >=0.8.0;\\n\\nimport './IProviderRegistry.sol';\\nimport '../libraries/ResourceData.sol';\\n\\n/// @author Alexandas\\n/// @dev Governance interface\\ninterface IGovernance {\\n\\t/// @dev emit when governance drip resource to provider\\n\\t/// @param provider provider address\\n\\tevent GovernanceDrip(address provider);\\n\\n\\t/// @dev add a provider\\n\\t/// @param provider address\\n\\tfunction addProvider(address provider) external;\\n\\n\\t/// @dev remove a provider\\n\\t/// @param provider address\\n\\tfunction removeProvider(address provider) external;\\n\\n\\t/// @dev drip resource to provider\\n\\t/// @param provider provider address\\n\\t/// @param payloads resource payloads\\n\\tfunction drip(address provider, ResourceData.AmountPayload[] memory payloads) external;\\n}\\n\",\"keccak256\":\"0xfa284b7879ce25372f1f6c74ee8c7df6d41dedae6f3298b788086473c0d4c215\",\"license\":\"UNLICENSE\"},\"contracts/interfaces/IProviderController.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSE\\n\\npragma solidity >=0.8.0;\\n\\nimport '../libraries/ResourceData.sol';\\n\\n/// @author Alexandas\\n/// @dev provider controller interface\\ninterface IProviderController {\\n\\t/// @dev emit when account registered in provider\\n\\t/// @param provider provider address\\n\\t/// @param account user account\\n\\tevent AccountRegistered(address provider, bytes32 account);\\n\\n\\t/// @dev emit when provider drip resource to account\\n\\t/// @param provider provider address\\n\\t/// @param account user account\\n\\tevent ProviderDripped(address provider, bytes32 account);\\n\\n\\t/// @dev emit when wallet types hash updated\\n\\t/// @param hash wallet types hash\\n\\tevent WalletTypesHashUpdated(bytes32 hash);\\n\\n\\t/// @dev emit when wallet transferred\\n\\t/// @param provider provider address\\n\\t/// @param account user account\\n\\t/// @param from original wallet address\\n\\t/// @param to new wallet address\\n\\tevent WalletTransferred(address provider, bytes32 account, address from, address to);\\n\\n\\t/// @dev keccak256(\\\"Wallet(address provider,bytes32 account,address wallet)\\\")\\n\\tfunction walletTypesHash() external view returns (bytes32);\\n\\n\\t/// @dev register account\\n\\t/// @param account user account\\n\\tfunction registerAccount(bytes32 account) external;\\n\\n\\t/// @dev register multiple account\\n\\t/// @param accounts user accounts\\n\\tfunction registerMult(bytes32[] memory accounts) external;\\n\\n\\t/// @dev Explain to a developer any extra details\\n\\t/// @param provider provider address\\n\\t/// @param account user account\\n\\t/// @return whether account exists\\n\\tfunction accountExists(address provider, bytes32 account) external view returns (bool);\\n\\n\\t/// @dev provider drip resource to multiple accounts\\n\\t/// @param accounts user accounts\\n\\t/// @param payloads resource amount payloads\\n\\tfunction dripMult(\\n\\t\\tbytes32[] memory accounts,\\n\\t\\tResourceData.AmountPayload[][] memory payloads\\n\\t) external;\\n\\n\\t/// @dev provider drip resource to user account\\n\\t/// @param account user account\\n\\t/// @param payloads resource amount payloads\\n\\tfunction drip(\\n\\t\\tbytes32 account,\\n\\t\\tResourceData.AmountPayload[] memory payloads\\n\\t) external;\\n\\n\\t/// @dev provider register and drip resource for multiple accounts\\n\\t/// @param accounts user accounts\\n\\t/// @param payloads resource amount payloads\\n\\tfunction registerAndDripMult(\\n\\t\\tbytes32[] memory accounts,\\n\\t\\tResourceData.AmountPayload[][] memory payloads\\n\\t) external;\\n\\n\\t/// @dev initialize wallet for the given account\\n\\t/// @param provider provider address\\n\\t/// @param account user account\\n\\t/// @param wallet account wallet\\n\\t/// @param signature provider signature\\n\\tfunction initWallet(\\n\\t\\taddress provider,\\n\\t\\tbytes32 account,\\n\\t\\taddress wallet,\\n\\t\\tbytes memory signature\\n\\t) external;\\n\\n\\t/// @dev transfer wallet for the account\\n\\t/// @param provider provider address\\n\\t/// @param account user account\\n\\t/// @param newWallet account wallet\\n\\tfunction transferWallet(\\n\\t\\taddress provider,\\n\\t\\tbytes32 account,\\n\\t\\taddress newWallet\\n\\t) external;\\n\\n\\t/// @dev return wallet for the account\\n\\t/// @param provider provider address\\n\\t/// @param account user account\\n\\t/// @return wallet for the account\\n\\tfunction walletOf(address provider, bytes32 account) external view returns (address);\\n\\n\\t/// @dev return whether wallet exists\\n\\t/// @param provider provider address\\n\\t/// @param account user account\\n\\t/// @return whether wallet exists\\n\\tfunction walletExists(address provider, bytes32 account) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x659cb15e3bf5e88e20b9d09ca05f6d748eac4d51c9251a6d1043fe2fca217dcb\",\"license\":\"UNLICENSE\"},\"contracts/interfaces/IProviderRegistry.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSE\\n\\npragma solidity >=0.8.0;\\n\\n/// @author Alexandas\\n/// @dev provider registry interface\\ninterface IProviderRegistry {\\n\\t/// @dev emit when provider is added\\n\\t/// @param provider provider address\\n\\tevent AddProvider(address provider);\\n\\n\\t/// @dev emit when provider removed\\n\\t/// @param provider provider address\\n\\tevent RemoveProvider(address provider);\\n\\n\\tevent AddProivderWallet(address provider, address wallet);\\n\\n\\tevent RemoveProviderWallet(address provider, address wallet);\\n\\n\\t/// @dev add a provider\\n\\t/// @param provider address\\n\\tfunction addProvider(address provider) external;\\n\\n\\t/// @dev remove a provider\\n\\t/// @param provider address\\n\\tfunction removeProvider(address provider) external;\\n\\n\\t/// @dev return whether address is a provider\\n\\t/// @param provider address\\n\\tfunction isProvider(address provider) external view returns (bool);\\n\\n\\t/// @dev return provider wallet\\n\\t/// @param provider address\\n\\t/// @return provider wallet\\n\\tfunction providerWallet(address provider) external view returns (address);\\n\\n\\t/// @dev return provider wallet exists\\n\\t/// @param provider address\\n\\t/// @return whether provider wallet exists\\n\\tfunction providerWalletExists(address provider) external view returns (bool);\\n\\n\\t/// @dev return whether a valid signature\\n\\t/// @param provider address\\n\\t/// @param hash message hash\\n\\t/// @param signature provider signature for message hash\\n\\t/// @return is valid signature\\n\\tfunction isValidSignature(\\n\\t\\taddress provider,\\n\\t\\tbytes32 hash,\\n\\t\\tbytes memory signature\\n\\t) external returns (bool);\\n}\\n\",\"keccak256\":\"0xa51e867c83ef543d6aa67facb3df5952b83ed6aea7fc9c2129a4105377d29bf2\",\"license\":\"UNLICENSE\"},\"contracts/interfaces/IRouter.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSE\\n\\npragma solidity >=0.8.0;\\n\\nimport '@openzeppelin/contracts-upgradeable/interfaces/IERC20Upgradeable.sol';\\n\\nimport '../interfaces/IGovernance.sol';\\nimport '../interfaces/IProviderRegistry.sol';\\nimport '../interfaces/IProviderController.sol';\\nimport '../interfaces/IDstChainPayment.sol';\\nimport '../interfaces/IBilling.sol';\\nimport '../interfaces/IFundPool.sol';\\nimport '../resources/interfaces/INormalResourceController.sol';\\nimport '../resources/interfaces/IIPFSStorageController.sol';\\nimport '../resources/interfaces/IResourcePriceAdaptor.sol';\\n\\n/// @author Alexandas\\n/// @dev Router interface\\ninterface IRouter {\\n\\t/// @dev emit when governance contract address updated\\n\\t/// @param governance governance contract address\\n\\tevent GovernanceUpdated(IGovernance governance);\\n\\n\\t/// @dev emit when message receiver updated\\n\\t/// @param messageReceiver message receiver contract address\\n\\tevent MessageReceiverUpdated(address messageReceiver);\\n\\n\\t/// @dev emit when provider registry contract updated\\n\\t/// @param _providerRegistry provider registry contract\\n\\tevent ProviderRegistryUpdated(IProviderRegistry _providerRegistry);\\n\\n\\t/// @dev emit when dst ProviderController contract address updated\\n\\t/// @param providerController ProviderController contract address\\n\\tevent ProviderControllerUpdated(IProviderController providerController);\\n\\n\\t/// @dev emit when token updated\\n\\t/// @param token token address\\n\\tevent TokenUpdated(IERC20Upgradeable token);\\n\\n\\t/// @dev emit when building time controller updated\\n\\t/// @param buildingTimeController building time controller contract\\n\\tevent BuildingTimeControllerUpdated(INormalResourceController buildingTimeController);\\n\\n\\t/// @dev emit when bandwidth controller updated\\n\\t/// @param bandwidthController bandwidth controller contract\\n\\tevent BandwidthControllerUpdated(INormalResourceController bandwidthController);\\n\\n\\t/// @dev emit when AR storage controller updated\\n\\t/// @param arStorageController AR storage controller contract\\n\\tevent ARStorageControllerUpdated(INormalResourceController arStorageController);\\n\\n\\t/// @dev emit when ipfs storage controller updated\\n\\t/// @param ipfsStorageController IPFS storage controller contract\\n\\tevent IPFSStorageControllerUpdated(IIPFSStorageController ipfsStorageController);\\n\\n\\t/// @dev emit when resource price adaptor updated\\n\\t/// @param resourcePriceAdaptor resource price adaptor contract\\n\\tevent ResourcePriceAdaptorUpdated(IResourcePriceAdaptor resourcePriceAdaptor);\\n\\n\\t/// @dev emit when dst chain payment contract address updated\\n\\t/// @param dstChainPayment dst chain payment contract address\\n\\tevent DstChainPaymentUpdated(IDstChainPayment dstChainPayment);\\n\\n\\t/// @dev emit when billing contract updated\\n\\t/// @param billing billing contract\\n\\tevent BillingUpdated(IBilling billing);\\n\\n\\t/// @dev emit when fund pool contract updated\\n\\t/// @param fundPool fund pool contract\\n\\tevent FundPoolUpdated(IFundPool fundPool);\\n\\n\\t/// @dev message receiver contract address\\n\\tfunction MessageReceiver() external view returns (address);\\n\\n\\t/// @dev Governance contract address\\n\\tfunction Governance() external view returns (IGovernance);\\n\\n\\t/// @dev providers contract address\\n\\tfunction ProviderRegistry() external view returns (IProviderRegistry);\\n\\n\\t/// @dev provider controller contract address\\n\\tfunction ProviderController() external view returns (IProviderController);\\n\\n\\t/// @dev token address\\n\\tfunction Token() external view returns (IERC20Upgradeable);\\n\\n\\t/// @dev return building time controller\\n\\tfunction BuildingTimeController() external view returns (INormalResourceController);\\n\\n\\t/// @dev return bandwidth controller\\n\\tfunction BandwidthController() external view returns (INormalResourceController);\\n\\n\\t/// @dev return AR storage controller\\n\\tfunction ARStorageController() external view returns (INormalResourceController);\\n\\n\\t/// @dev return ipfs storage controller\\n\\tfunction IPFSStorageController() external view returns (IIPFSStorageController);\\n\\n\\t/// @dev return resource price adaptor contract address\\n\\tfunction ResourcePriceAdaptor() external view returns (IResourcePriceAdaptor);\\n\\n\\t/// @dev dst chain payment contract address\\n\\tfunction DstChainPayment() external view returns (IDstChainPayment);\\n\\n\\t/// @dev billing contract address\\n\\tfunction Billing() external view returns (IBilling);\\n\\n\\t/// @dev fund pool contract address\\n\\tfunction FundPool() external view returns (IFundPool);\\n}\\n\",\"keccak256\":\"0x32c01e0f705a5c96ad7550e7cb0e885c5479fa9353445c256eab4e8c0e14e8cf\",\"license\":\"UNLICENSE\"},\"contracts/libraries/ResourceData.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSE\\n\\npragma solidity >=0.8.0;\\nimport '@openzeppelin/contracts-upgradeable/utils/math/SafeMathUpgradeable.sol';\\nimport '@openzeppelin/contracts-upgradeable/interfaces/IERC20Upgradeable.sol';\\n\\n/// @author Alexandas\\n/// @dev resource data library\\nlibrary ResourceData {\\n\\tusing SafeMathUpgradeable for uint256;\\n\\n\\tenum ResourceType {\\n\\t\\tNull,\\n\\t\\tBuildingTime,\\n\\t\\tBandwidth,\\n\\t\\tARStorage,\\n\\t\\tIPFSStorage\\n\\t}\\n\\n\\tstruct ValuePayload {\\n\\t\\tResourceData.ResourceType resourceType;\\n\\t\\tuint256[] values;\\n\\t}\\n\\n\\tstruct AmountPayload {\\n\\t\\tResourceData.ResourceType resourceType;\\n\\t\\tuint256[] amounts;\\n\\t}\\n\\n\\tstruct ValuePayloads {\\n\\t\\tResourceData.ValuePayload[] payloads;\\n\\t}\\n\\n\\tfunction convertSourceChainPayloads(ValuePayloads memory valuePayloads, uint256 dstAmount)\\n\\t\\tinternal\\n\\t\\tpure\\n\\t\\treturns (ResourceData.ValuePayload[] memory newPayloads)\\n\\t{\\n\\t\\tResourceData.ValuePayload[] memory payloads = valuePayloads.payloads;\\n\\t\\trequire(payloads.length > 0, 'ResourceData: invalid payload length');\\n\\t\\tuint256 total = totalValue(payloads);\\n\\t\\trequire(total > 0, 'ResourceData: zero total value');\\n\\t\\tfor (uint256 i = 0; i < payloads.length; i++) {\\n\\t\\t\\trequire(payloads[i].values.length > 0, 'ResourceData: invalid value length');\\n\\t\\t\\tfor (uint256 j = 0; j < payloads[i].values.length; j++) {\\n\\t\\t\\t\\tpayloads[i].values[j] = payloads[i].values[j].mul(dstAmount).div(total);\\n\\t\\t\\t}\\n\\t\\t}\\n\\t\\treturn payloads;\\n\\t}\\n\\n\\t/// @dev payment payload total value\\n\\t/// @param payloads payment payloads\\n\\t/// @return value total value\\n\\tfunction totalValue(ResourceData.ValuePayload[] memory payloads) internal pure returns (uint256 value) {\\n\\t\\trequire(payloads.length > 0, 'ResourceData: invalid payloads length');\\n\\t\\tfor (uint256 i = 0; i < payloads.length; i++) {\\n\\t\\t\\tfor (uint256 j = 0; j < payloads[i].values.length; j++) {\\n\\t\\t\\t\\tvalue = value.add(payloads[i].values[j]);\\n\\t\\t\\t}\\n\\t\\t}\\n\\t}\\n\\n\\t/// @dev match token amount to resource decimals\\n\\t/// @param token token contract address\\n\\t/// @param value token amount with resource decimals\\n\\t/// @return resource value\\n\\tfunction matchTokenToResource(IERC20Upgradeable token, uint256 value) internal view returns (uint256) {\\n\\t\\tuint256 _tokenDecimals = tokenDecimals(token);\\n\\t\\tuint256 _resourceDecimals = decimals();\\n\\t\\tif (_tokenDecimals <= _resourceDecimals) {\\n\\t\\t\\treturn value.mul(10**(_resourceDecimals.sub(_tokenDecimals)));\\n\\t\\t}\\n\\t\\treturn value.div(10**(_tokenDecimals.sub(_resourceDecimals)));\\n\\t}\\n\\n\\t/// @dev match value to token decimals\\n\\t/// @param token token contract address\\n\\t/// @param value resource value\\n\\t/// @return token value\\n\\tfunction matchResourceToToken(IERC20Upgradeable token, uint256 value) internal view returns (uint256) {\\n\\t\\tuint256 _tokenDecimals = tokenDecimals(token);\\n\\t\\tuint256 _resourceDecimals = decimals();\\n\\t\\tif (_tokenDecimals <= _resourceDecimals) {\\n\\t\\t\\treturn value.div(10**(_resourceDecimals.sub(_tokenDecimals)));\\n\\t\\t}\\n\\t\\treturn value.mul(10**(_tokenDecimals.sub(_resourceDecimals)));\\n\\t}\\n\\n\\t/// @dev return resource decimals\\n\\t/// @return resource decimals\\n\\tfunction decimals() internal pure returns (uint256) {\\n\\t\\treturn 18;\\n\\t}\\n\\n\\t/// @dev return token decimals\\n\\t/// @return token decimals\\n\\tfunction tokenDecimals(IERC20Upgradeable token) internal view returns (uint256) {\\n\\t\\t// keccak256(bytes4('decimals()'))\\n\\t\\t(bool success, bytes memory data) = address(token).staticcall(hex'313ce567');\\n\\t\\trequire(success, 'ResourceData: invalid token');\\n\\t\\treturn abi.decode(data, (uint256));\\n\\t}\\n}\\n\",\"keccak256\":\"0x0a952dc446468e24ad4fed971632b1c8408818ed86649ff01e662aa93decb050\",\"license\":\"UNLICENSE\"},\"contracts/payments/DstChainPayment.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0-only\\n\\npragma solidity >=0.8.0;\\n\\nimport '@openzeppelin/contracts-upgradeable/security/ReentrancyGuardUpgradeable.sol';\\nimport '../interfaces/IDstChainPayment.sol';\\nimport '../govers/RouterWrapper.sol';\\nimport '../access/OwnerWithdrawable.sol';\\nimport '../access/Pauser.sol';\\nimport '../libraries/ResourceData.sol';\\n\\n/// @author Alexandas\\n/// @dev Dst chain payment contract\\ncontract DstChainPayment is IDstChainPayment, ReentrancyGuardUpgradeable, OwnerWithdrawable, Pauser, RouterWrapper {\\n\\tusing ResourceData for ResourceData.ValuePayloads;\\n\\tusing SafeMathUpgradeable for uint256;\\n\\tusing SafeERC20Upgradeable for IERC20Upgradeable;\\n\\n\\tmapping(address => uint256) internal balances;\\n\\n\\tconstructor() initializer {}\\n\\n\\t/// @dev proxy initialize function\\n\\t/// @param owner contract owner\\n\\t/// @param pauser contract pauser\\n\\t/// @param router router contract\\n\\tfunction initialize(\\n\\t\\taddress owner,\\n\\t\\taddress pauser,\\n\\t\\tIRouter router\\n\\t) external initializer {\\n\\t\\t_transferOwnership(owner);\\n\\t\\t__Init_Pauser(pauser);\\n\\t\\t__Init_Router(router);\\n\\t}\\n\\n\\t/// @dev pay from source chain only called by message receiver\\n\\t/// @param _token token address\\n\\t/// @param dstAmount token amount\\n\\t/// @param message payment payload message bytes\\n\\tfunction payFromSourceChain(\\n\\t\\tIERC20Upgradeable _token,\\n\\t\\tuint256 dstAmount,\\n\\t\\tbytes calldata message\\n\\t) external override onlyMessageReceiver whenNotPaused nonReentrant {\\n\\t\\tIERC20Upgradeable token = router.Token();\\n\\t\\trequire(token == _token, 'DstChainPayment: invalid token');\\n\\t\\t(address provider, uint64 nonce, bytes32 account, ResourceData.ValuePayload[] memory payloads) = decodeSourceChainMessage(message);\\n\\t\\tuint256 value = ResourceData.matchTokenToResource(token, dstAmount);\\n\\t\\tPaymentPayload memory payload = PaymentPayload(provider, nonce, account, ResourceData.ValuePayloads(payloads).convertSourceChainPayloads(value));\\n\\t\\t_processPayloads(provider, payload.account, payload.payloads, false);\\n\\t\\t_pay(payload.provider, payload.account, token, dstAmount);\\n\\n\\t\\temit Paid(token, payload);\\n\\t}\\n\\n\\t/// @dev pay on dst chain\\n\\t/// @param payload payment payload\\n\\t/// @return value payment value\\n\\tfunction pay(PaymentPayload memory payload) external override whenNotPaused nonReentrant returns (uint256 value) {\\n\\t\\tvalue = _processPayloads(payload.provider, payload.account, payload.payloads, true);\\n\\t\\tIERC20Upgradeable token = router.Token();\\n\\t\\tvalue = ResourceData.matchResourceToToken(token, value);\\n\\t\\t_pay(payload.provider, payload.account, token, value);\\n\\n\\t\\temit Paid(token, payload);\\n\\t}\\n\\n\\tfunction _pay(\\n\\t\\taddress provider,\\n\\t\\tbytes32 account,\\n\\t\\tIERC20Upgradeable token,\\n\\t\\tuint256 amount\\n\\t) internal {\\n\\t\\trequire(router.ProviderController().accountExists(provider, account), 'DstChainPayment: nonexistent account');\\n\\t\\tbalances[provider] = balances[provider].add(amount);\\n\\t\\ttoken.safeTransferFrom(msg.sender, address(this), amount);\\n\\t}\\n\\n\\tfunction _processPayloads(\\n\\t\\taddress provider,\\n\\t\\tbytes32 account,\\n\\t\\tResourceData.ValuePayload[] memory payloads,\\n\\t\\tbool withValue\\n\\t) internal returns (uint256 value) {\\n\\t\\trequire(payloads.length > 0, 'DstChainPayment: invalid payloads');\\n\\t\\tIResourcePriceAdaptor adaptor = router.ResourcePriceAdaptor();\\n\\t\\tfor (uint256 i = 0; i < payloads.length; i++) {\\n\\t\\t\\tResourceData.ValuePayload memory payload = payloads[i];\\n\\t\\t\\tif (payload.resourceType == ResourceData.ResourceType.BuildingTime) {\\n\\t\\t\\t\\trequire(payload.values.length == 1, 'DstChainPayment: invalid value length for BuildingTime');\\n\\t\\t\\t\\tuint256 amount = adaptor.getAmountOf(provider, payload.resourceType, payload.values[0]);\\n\\t\\t\\t\\trouter.BuildingTimeController().paymentAllocate(provider, account, amount);\\n\\t\\t\\t} else if (payload.resourceType == ResourceData.ResourceType.ARStorage) {\\n\\t\\t\\t\\trequire(payload.values.length == 1, 'DstChainPayment: invalid value length for ARStorage');\\n\\t\\t\\t\\tuint256 amount = adaptor.getAmountOf(provider, payload.resourceType, payload.values[0]);\\n\\t\\t\\t\\trouter.ARStorageController().paymentAllocate(provider, account, amount);\\n\\t\\t\\t} else if (payload.resourceType == ResourceData.ResourceType.Bandwidth) {\\n\\t\\t\\t\\trequire(payload.values.length == 1, 'DstChainPayment: invalid value length for Bandwidth');\\n\\t\\t\\t\\tuint256 amount = adaptor.getAmountOf(provider, payload.resourceType, payload.values[0]);\\n\\t\\t\\t\\trouter.BandwidthController().paymentAllocate(provider, account, amount);\\n\\t\\t\\t} else if (payload.resourceType == ResourceData.ResourceType.IPFSStorage) {\\n\\t\\t\\t\\trequire(payload.values.length == 2, 'DstChainPayment: invalid value length for IPFSStorage');\\n\\t\\t\\t\\t(uint256 amount, uint256 expiration) = ipfsAllocations(provider, account, payload.values[0], payload.values[1]);\\n\\t\\t\\t\\trouter.IPFSStorageController().paymentAllocate(provider, account, amount, expiration);\\n\\t\\t\\t} else {\\n\\t\\t\\t\\trevert('DstChainPayment: unknown resource type');\\n\\t\\t\\t}\\n\\t\\t\\tif (withValue) {\\n\\t\\t\\t\\tfor (uint256 j = 0; j < payload.values.length; j++) {\\n\\t\\t\\t\\t\\tvalue = value.add(payload.values[j]);\\n\\t\\t\\t\\t}\\n\\t\\t\\t}\\n\\t\\t}\\n\\t}\\n\\n\\t/// @dev decode source chain message\\n\\t/// @param message message bytes\\n\\t/// @return provider provider address\\n\\t/// @return nonce nonce\\n\\t/// @return account user account\\n\\t/// @return payloads payment payloads\\n\\tfunction decodeSourceChainMessage(bytes memory message)\\n\\t\\tpublic\\n\\t\\tview\\n\\t\\treturns (\\n\\t\\t\\taddress provider,\\n\\t\\t\\tuint64 nonce,\\n\\t\\t\\tbytes32 account,\\n\\t\\t\\tResourceData.ValuePayload[] memory payloads\\n\\t\\t)\\n\\t{\\n\\t\\t(provider, nonce, account, payloads) = abi.decode(message, (address, uint64, bytes32, ResourceData.ValuePayload[]));\\n\\t}\\n\\n\\t/// @dev calculate fee for ipfs storage and expiration\\n\\t/// @param provider provider address\\n\\t/// @param account user account\\n\\t/// @param amount ipfs storage amount\\n\\t/// @param expiration ipfs expiration(in seconds)\\n\\t/// @return storageFee ipfs storage fee\\n\\t/// @return expirationFee ipfs expiration fee\\n\\tfunction ipfsAlloctionsFee(\\n\\t\\taddress provider,\\n\\t\\tbytes32 account,\\n\\t\\tuint256 amount,\\n\\t\\tuint256 expiration\\n\\t) public view override returns (uint256 storageFee, uint256 expirationFee) {\\n\\t\\tIIPFSStorageController controller = router.IPFSStorageController();\\n\\t\\taddress p = provider;\\n\\t\\tbytes32 a = account;\\n\\t\\tif (controller.isExpired(p, a)) {\\n\\t\\t\\trequire(amount > 0 && expiration > 0, 'DstChainPayment: invalid params for expired account');\\n\\t\\t\\tstorageFee = getValueOf(p, ResourceData.ResourceType.IPFSStorage, amount);\\n\\t\\t\\texpirationFee = storageFee.mul(expiration);\\n\\t\\t} else {\\n\\t\\t\\trequire(amount > 0 || expiration > 0, 'DstChainPayment: invalid params');\\n\\t\\t\\tstorageFee = amount.mul(getValueOf(p, ResourceData.ResourceType.IPFSStorage, controller.availableExpiration(p, a)));\\n\\t\\t\\texpirationFee = expiration.mul(getValueOf(p, ResourceData.ResourceType.IPFSStorage, controller.balanceOf(p, a).add(amount)));\\n\\t\\t}\\n\\t}\\n\\n\\t/// @dev calculate ipfs storage and expiration with storage fee and expiration fee\\n\\t/// @param provider provider address\\n\\t/// @param account user account\\n\\t/// @param storageFee storage fee\\n\\t/// @param expirationFee expiration fee\\n\\t/// @return amount ipfs storage amount\\n\\t/// @return expiration ipfs expiration(in seconds)\\n\\tfunction ipfsAllocations(\\n\\t\\taddress provider,\\n\\t\\tbytes32 account,\\n\\t\\tuint256 storageFee,\\n\\t\\tuint256 expirationFee\\n\\t) public view override returns (uint256 amount, uint256 expiration) {\\n\\t\\tIIPFSStorageController controller = router.IPFSStorageController();\\n\\t\\taddress p = provider;\\n\\t\\tbytes32 a = account;\\n\\t\\tif (controller.isExpired(p, a)) {\\n\\t\\t\\trequire(storageFee > 0 && expirationFee > 0, 'DstChainPayment: invalid params for expired account');\\n\\t\\t\\tamount = storageFee.div(priceOf(p, ResourceData.ResourceType.IPFSStorage));\\n\\t\\t\\texpiration = expirationFee.div(storageFee);\\n\\t\\t} else {\\n\\t\\t\\trequire(storageFee > 0 || expirationFee > 0, 'DstChainPayment: invalid params');\\n\\t\\t\\tamount = storageFee.div(getValueOf(p, ResourceData.ResourceType.IPFSStorage, controller.availableExpiration(p, a)));\\n\\t\\t\\texpiration = expirationFee.div(getValueOf(p, ResourceData.ResourceType.IPFSStorage, controller.balanceOf(p, a).add(amount)));\\n\\t\\t}\\n\\t}\\n\\n\\t/// @dev return balance of provider\\n\\t/// @param provider provider address\\n\\t/// @return balance of provider\\n\\tfunction balanceOf(address provider) public view override returns (uint256) {\\n\\t\\trequire(router.ProviderRegistry().isProvider(provider), 'DstChainPayment: nonexistent provider');\\n\\t\\treturn balances[provider];\\n\\t}\\n\\n\\t/// @dev return resource price\\n\\t/// @param provider provider address\\n\\t/// @param resourceType resource type\\n\\t/// @return resource price\\n\\tfunction priceOf(address provider, ResourceData.ResourceType resourceType) public view override returns (uint256) {\\n\\t\\tIResourcePriceAdaptor adaptor = router.ResourcePriceAdaptor();\\n\\t\\treturn adaptor.priceOf(provider, resourceType);\\n\\t}\\n\\n\\t/// @dev return value of amount resource\\n\\t/// @param provider provider address\\n\\t/// @param resourceType resource type\\n\\t/// @param amount resource amount\\n\\t/// @return token value\\n\\tfunction getValueOf(\\n\\t\\taddress provider,\\n\\t\\tResourceData.ResourceType resourceType,\\n\\t\\tuint256 amount\\n\\t) public view override returns (uint256) {\\n\\t\\tIResourcePriceAdaptor adaptor = router.ResourcePriceAdaptor();\\n\\t\\treturn adaptor.getValueOf(provider, resourceType, amount);\\n\\t}\\n\\n\\t/// @dev return resource amount with value\\n\\t/// @param provider provider address\\n\\t/// @param resourceType resource type\\n\\t/// @param value token value\\n\\t/// @return resource amount\\n\\tfunction getAmountOf(\\n\\t\\taddress provider,\\n\\t\\tResourceData.ResourceType resourceType,\\n\\t\\tuint256 value\\n\\t) public view override returns (uint256) {\\n\\t\\tIResourcePriceAdaptor adaptor = router.ResourcePriceAdaptor();\\n\\t\\treturn adaptor.getAmountOf(provider, resourceType, value);\\n\\t}\\n}\\n\",\"keccak256\":\"0x02499cff22a87bdbbe7047351746560c96da06565f9854626a38252411c3e94b\",\"license\":\"GPL-3.0-only\"},\"contracts/resources/interfaces/IIPFSStorageController.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSE\\n\\npragma solidity >=0.8.0;\\nimport '@openzeppelin/contracts-upgradeable/utils/math/SafeMathUpgradeable.sol';\\n\\n/// @author Alexandas\\n/// @dev IPFS storage controller interface\\ninterface IIPFSStorageController {\\n\\tstruct Storage {\\n\\t\\tuint256 startTime;\\n\\t\\tuint256 expiration;\\n\\t\\tuint256 amount;\\n\\t}\\n\\n\\t/// @dev emit when ipfs storage allocated for the provider\\n\\t/// @param provider provider address\\n\\t/// @param amount ipfs storage amount\\n\\t/// @param expiration ipfs storage expiration\\n\\tevent ProviderAllocated(address provider, uint256 amount, uint256 expiration);\\n\\n\\t/// @dev emit when ipfs storage allocated for the account\\n\\t/// @param provider provider address\\n\\t/// @param account user account\\n\\t/// @param amount ipfs storage amount\\n\\t/// @param expiration ipfs storage expiration\\n\\tevent AccountAllocated(address provider, bytes32 account, uint256 amount, uint256 expiration);\\n\\n\\t/// @dev emit when provider recovered ipfs storage\\n\\t/// @param provider provider address\\n\\t/// @param account user account\\n\\t/// @param amount ipfs storage amount\\n\\tevent ProviderRecovered(address provider, bytes32 account, uint256 amount);\\n\\n\\t/// @dev allocate user's normal resource balance\\n\\t/// @param provider provider address\\n\\t/// @param amount resource amount\\n\\t/// @param expiration ipfs expiration\\n\\tfunction allocateProvider(address provider, uint256 amount, uint256 expiration) external;\\n\\n\\t/// @dev provider drip resource to account directly\\n\\t/// @param provider provider address\\n\\t/// @param account user account\\n\\t/// @param amount ipfs storage amount\\n\\t/// @param expiration ipfs expiration\\n\\tfunction drip(address provider, bytes32 account, uint256 amount, uint256 expiration) external;\\n\\n\\t/// @dev allocate user's resource balance\\n\\t/// @param provider provider address\\n\\t/// @param account user account\\n\\t/// @param amount ipfs storage amount\\n\\t/// @param expiration ipfs expiration\\n\\tfunction paymentAllocate(address provider, bytes32 account, uint256 amount, uint256 expiration) external;\\n\\n\\t/// @dev recover provider storage\\n\\t/// @param provider provider address\\n\\t/// @param account user account\\n\\tfunction recoverStorage(address provider, bytes32 account) external;\\n\\n\\t/// @dev return whether ipfs storage is expired for the provider\\n\\t/// @param provider provider address\\n\\t/// @return whether ipfs storage is expired for the provider\\n\\tfunction isProviderExpired(address provider) external view returns (bool);\\n\\n\\t/// @dev return ipfs storage start time for the provider\\n\\t/// @param provider provider address\\n\\t/// @return start time for the provider\\n\\tfunction providerStartTime(address provider) external view returns (uint256);\\n\\n\\t/// @dev return total expiration time for the provider\\n\\t/// @param provider provider address\\n\\t/// @return total expiration time for the provider\\n\\tfunction providerExpiration(address provider) external view returns (uint256);\\n\\n\\t/// @dev return available expiration time for the provider\\n\\t/// @param provider provider address\\n\\t/// @return available expiration time for the provider\\n\\tfunction providerAvailableExpiration(address provider) external view returns (uint256);\\n\\n\\t/// @dev return when the provider will expire\\n\\t/// @param provider provider address\\n\\t/// @return when the provider will expire\\n\\tfunction providerExpiredAt(address provider) external view returns (uint256);\\n\\n\\t/// @dev return ipfs storage amount for the provider\\n\\t/// @param provider provider address\\n\\t/// @return ipfs storage amount for the provider\\n\\tfunction providerBalanceOf(address provider) external view returns (uint256);\\n\\n\\t/// @dev return whether ipfs storage is expired for the account\\n\\t/// @param provider provider address\\n\\t/// @param account user account\\n\\t/// @return whether ipfs storage is expired for the account\\n\\tfunction isExpired(address provider, bytes32 account) external view returns (bool);\\n\\n\\t/// @dev return available expiration time for the account\\n\\t/// @param provider provider address\\n\\t/// @param account user account\\n\\t/// @return available expiration time for the account\\n\\tfunction availableExpiration(address provider, bytes32 account) external view returns (uint256);\\n\\n\\t/// @dev return when the account will expire\\n\\t/// @param provider provider address\\n\\t/// @param account user account\\n\\t/// @return when the account will expire\\n\\tfunction expiredAt(address provider, bytes32 account) external view returns (uint256);\\n\\n\\t/// @dev return ipfs storage start time for the account\\n\\t/// @param provider provider address\\n\\t/// @param account user account\\n\\t/// @return start time for the account\\n\\tfunction startTime(address provider, bytes32 account) external view returns (uint256);\\n\\n\\t/// @dev return total expiration time for the account\\n\\t/// @param provider provider address\\n\\t/// @param account user account\\n\\t/// @return total expiration time for the account\\n\\tfunction expiration(address provider, bytes32 account) external view returns (uint256);\\n\\n\\t/// @dev return ipfs storage amount for the account\\n\\t/// @param provider provider address\\n\\t/// @param account user account\\n\\t/// @return ipfs storage amount for the account\\n\\tfunction balanceOf(address provider, bytes32 account) external view returns (uint256);\\n}\\n\",\"keccak256\":\"0x737cd8d689d7a0ef9211d92c8d052bda00bc16ddb06ce326ee473c3ffc09a654\",\"license\":\"UNLICENSE\"},\"contracts/resources/interfaces/INormalResourceController.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSE\\n\\npragma solidity >=0.8.0;\\n\\n/// @author Alexandas\\n/// @dev normal resource controller interface\\ninterface INormalResourceController {\\n\\n\\t/// @dev emit when resource allocated for the provider\\n\\t/// @param provider provider address\\n\\t/// @param amount ipfs storage amount\\n\\tevent ProviderAllocated(address provider, uint256 amount);\\n\\n\\t/// @dev emit when resource allocated for the account\\n\\t/// @param provider provider address\\n\\t/// @param account user account\\n\\t/// @param amount ipfs storage amount\\n\\tevent AccountAllocated(address provider, bytes32 account, uint256 amount);\\n\\n\\t/// @dev allocate resource for the provider\\n\\t/// @param provider provider address\\n\\t/// @param amount resource amount\\n\\tfunction allocateProvider(address provider, uint256 amount) external;\\n\\n\\t/// @dev allocate user's resource balance\\n\\t/// @param provider provider address\\n\\t/// @param account user account\\n\\t/// @param amount resource amount\\n\\tfunction paymentAllocate(address provider, bytes32 account, uint256 amount) external;\\n\\n\\t/// @dev provider drip resource to account directly\\n\\t/// @param provider provider address\\n\\t/// @param account user account\\n\\t/// @param amount resource amount\\n\\tfunction drip(address provider, bytes32 account, uint256 amount) external;\\n\\n\\t/// @dev resource balance\\n\\t/// @param provider provider address\\n\\t/// @param account user account\\n\\t/// @return balance of the account\\n\\tfunction balanceOf(address provider, bytes32 account) external view returns (uint256);\\n\\n\\t/// @dev resource balance\\n\\t/// @param provider provider address\\n\\t/// @return balance of the account\\n\\tfunction providerBalanceOf(address provider) external view returns (uint256);\\n\\n}\\n\",\"keccak256\":\"0x7bf2ade38bde962e0b1430090225c343458a2fa9d002d413468e442a64fe76e7\",\"license\":\"UNLICENSE\"},\"contracts/resources/interfaces/IResourcePriceAdaptor.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSE\\n\\npragma solidity >=0.8.0;\\n\\nimport '../../libraries/ResourceData.sol';\\n\\n/// @author Alexandas\\n/// @dev resource adpator interface\\ninterface IResourcePriceAdaptor {\\n\\tstruct PriceAdaptor {\\n\\t\\tResourceData.ResourceType resourceType;\\n\\t\\tuint256 price;\\n\\t}\\n\\n\\t/// @dev emit when index block updated\\n\\t/// @param provider provider address\\n\\t/// @param priceIndexBlock price index block\\n\\tevent PriceIndexBlockUpdated(address provider, uint256 priceIndexBlock);\\n\\n\\t/// @dev emit when price updated\\n\\t/// @param provider provider address\\n\\t/// @param adaptors price adaptors\\n\\tevent PriceAdaptorsUpdated(address provider, PriceAdaptor[] adaptors);\\n\\n\\t/// @dev get price for resource at a specific block\\n\\t/// @param provider provider address\\n\\t/// @param resourceType resource type\\n\\t/// @param priceIndexBlock block number\\n\\t/// @return price for resource at a specific block\\n\\tfunction priceAt(address provider, ResourceData.ResourceType resourceType, uint256 priceIndexBlock) external view returns (uint256);\\n\\n\\t/// @dev get value for `amount` resource at a specific block\\n\\t/// @param provider provider address\\n\\t/// @param resourceType resource type\\n\\t/// @param amount resource amount\\n\\t/// @param priceIndexBlock block number\\n\\t/// @return token value in resource decimals(18)\\n\\tfunction getValueAt(\\n\\t\\taddress provider,\\n\\t\\tResourceData.ResourceType resourceType,\\n\\t\\tuint256 amount,\\n\\t\\tuint256 priceIndexBlock\\n\\t) external view returns (uint256);\\n\\n\\t/// @dev get amount resource with value at a specific block\\n\\t/// @param provider provider address\\n\\t/// @param resourceType resource type\\n\\t/// @param value token value\\n\\t/// @param priceIndexBlock block numer\\n\\t/// @return resource amount\\n\\tfunction getAmountAt(\\n\\t\\taddress provider,\\n\\t\\tResourceData.ResourceType resourceType,\\n\\t\\tuint256 value,\\n\\t\\tuint256 priceIndexBlock\\n\\t) external view returns (uint256);\\n\\n\\t/// @dev return resource price\\n\\t/// @param provider provider address\\n\\t/// @param resourceType resource type\\n\\t/// @return resource price\\n\\tfunction priceOf(address provider, ResourceData.ResourceType resourceType) external view returns (uint256);\\n\\n\\t/// @dev return value of amount resource\\n\\t/// @param provider provider address\\n\\t/// @param resourceType resource type\\n\\t/// @param amount resource amount\\n\\t/// @return token value in resource decimals(18)\\n\\tfunction getValueOf(address provider, ResourceData.ResourceType resourceType, uint256 amount) external view returns (uint256);\\n\\n\\t/// @dev return resource amount with value\\n\\t/// @param provider provider address\\n\\t/// @param resourceType resource type\\n\\t/// @param value token value in resource decimals(18)\\n\\t/// @return resource amount\\n\\tfunction getAmountOf(address provider, ResourceData.ResourceType resourceType, uint256 value) external view returns (uint256);\\n\\n}\\n\",\"keccak256\":\"0x777f11784c9b845ea144fa0eb3b33596e123e1f70f2952e9d7c24ce576fcf10d\",\"license\":\"UNLICENSE\"}},\"version\":1}",
  "bytecode": "0x60806040523480156200001157600080fd5b5060006200002060016200008e565b9050801562000039576000805461ff0019166101001790555b801562000087576000805461ff00191690556040517f7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb3847402498906200007e9060019062000168565b60405180910390a15b50620001cb565b60008054610100900460ff1615620000f7578160ff166001148015620000c75750620000c5306200013b60201b620013b11760201c565b155b620000ef5760405162461bcd60e51b8152600401620000e69062000178565b60405180910390fd5b506000919050565b60005460ff808416911610620001215760405162461bcd60e51b8152600401620000e69062000178565b506000805460ff191660ff92909216919091179055600190565b6001600160a01b03163b151590565b600060ff82165b92915050565b62000162816200014a565b82525050565b6020810162000151828462000157565b602080825281016200015181602e81527f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160208201526d191e481a5b9a5d1a585b1a5e995960921b604082015260600190565b613e9380620001db6000396000f3fe608060405234801561001057600080fd5b50600436106101585760003560e01c806377ef533c116100c357806394e48f891161007c57806394e48f89146102ba578063bd169975146102db578063c0c53b8b146102fe578063ce841dd214610311578063f2fde38b14610324578063f887ea401461033757600080fd5b806377ef533c1461023d57806380f51c121461025057806382dc1ec4146102735780638456cb59146102865780638da5cb5b1461028e57806393563a95146102a757600080fd5b806365d6b40c1161011557806365d6b40c146101e1578063699256f4146101f45780636b2c0f55146102075780636ef8d66d1461021a57806370a0823114610222578063715018a61461023557600080fd5b806335da9b231461015d5780633f4ba83a1461018657806346fbf68e14610190578063490e4fa2146101b05780635c975abb146101c35780635e1a544c146101ce575b600080fd5b61017061016b3660046125a8565b610357565b60405161017d9190612600565b60405180910390f35b61018e61046e565b005b6101a361019e36600461260e565b6104a6565b60405161017d9190612637565b6101706101be3660046128e0565b6104c4565b60975460ff166101a3565b6101706101dc36600461291a565b61061d565b6101706101ef3660046125a8565b610731565b61018e610202366004612957565b6107ed565b61018e61021536600461260e565b61089b565b61018e6108d1565b61017061023036600461260e565b6108da565b61018e610a0a565b61018e61024b3660046129fa565b610a3e565b6101a361025e36600461260e565b60c96020526000908152604090205460ff1681565b61018e61028136600461260e565b610d07565b61018e610d3a565b6065546001600160a01b031660405161017d9190612a70565b61018e6102b5366004612a7e565b610d67565b6102cd6102c8366004612ab3565b610dd8565b60405161017d929190612b17565b6102ee6102e9366004612bc8565b611098565b60405161017d9493929190612d50565b61018e61030c366004612d94565b6110c2565b6102cd61031f366004612ab3565b611152565b61018e61033236600461260e565b611358565b60ca5461034a906001600160a01b031681565b60405161017d9190612dee565b60008060ca60009054906101000a90046001600160a01b03166001600160a01b03166337187fc36040518163ffffffff1660e01b815260040160206040518083038186803b1580156103a857600080fd5b505afa1580156103bc573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906103e09190612e07565b6040516335da9b2360e01b81529091506001600160a01b038216906335da9b239061041390889088908890600401612e28565b60206040518083038186803b15801561042b57600080fd5b505afa15801561043f573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906104639190612e5b565b9150505b9392505050565b610477336104a6565b61049c5760405162461bcd60e51b815260040161049390612eb1565b60405180910390fd5b6104a46113c0565b565b6001600160a01b0316600090815260c9602052604090205460ff1690565b60006104d260975460ff1690565b156104ef5760405162461bcd60e51b815260040161049390612ee8565b600260015414156105125760405162461bcd60e51b815260040161049390612f2c565b6002600190815582516040840151606085015161052e93611426565b9050600060ca60009054906101000a90046001600160a01b03166001600160a01b031663c24126766040518163ffffffff1660e01b815260040160206040518083038186803b15801561058057600080fd5b505afa158015610594573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906105b89190612e07565b90506105c48183611b4d565b91506105da836000015184604001518385611bb4565b7fc5f1085d8db8470034ca0b57c2029a07440e82632d8b6d34119bcc93fed80648818460405161060b929190612fe7565b60405180910390a15060018055919050565b60008060ca60009054906101000a90046001600160a01b03166001600160a01b03166337187fc36040518163ffffffff1660e01b815260040160206040518083038186803b15801561066e57600080fd5b505afa158015610682573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906106a69190612e07565b604051631786951360e21b81529091506001600160a01b03821690635e1a544c906106d79087908790600401613007565b60206040518083038186803b1580156106ef57600080fd5b505afa158015610703573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906107279190612e5b565b9150505b92915050565b60008060ca60009054906101000a90046001600160a01b03166001600160a01b03166337187fc36040518163ffffffff1660e01b815260040160206040518083038186803b15801561078257600080fd5b505afa158015610796573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906107ba9190612e07565b604051631975ad0360e21b81529091506001600160a01b038216906365d6b40c9061041390889088908890600401612e28565b6065546001600160a01b031633146108175760405162461bcd60e51b815260040161049390613054565b6040516000906001600160a01b0384169083156108fc0290849084818181858888f1935050505090508061085d5760405162461bcd60e51b8152600401610493906130b3565b7f2c876ecb97b3c6854f2488d373403f903eacb800e51c159a5c0c7a9c857e4827838360405161088e9291906130c3565b60405180910390a1505050565b6065546001600160a01b031633146108c55760405162461bcd60e51b815260040161049390613054565b6108ce81611d21565b50565b6104a433611d21565b60ca54604080516314b47ed960e31b815290516000926001600160a01b03169163a5a3f6c8916004808301926020929190829003018186803b15801561091f57600080fd5b505afa158015610933573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906109579190612e07565b6001600160a01b0316636b074a07836040518263ffffffff1660e01b81526004016109829190612a70565b60206040518083038186803b15801561099a57600080fd5b505afa1580156109ae573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906109d291906130e4565b6109ee5760405162461bcd60e51b815260040161049390613147565b506001600160a01b0316600090815260cb602052604090205490565b6065546001600160a01b03163314610a345760405162461bcd60e51b815260040161049390613054565b6104a46000611da1565b60ca54604080516303bf7e6b60e21b815290516000926001600160a01b031691630efdf9ac916004808301926020929190829003018186803b158015610a8357600080fd5b505afa158015610a97573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610abb9190613162565b9050336001600160a01b03821614610ae55760405162461bcd60e51b8152600401610493906131cd565b60975460ff1615610b085760405162461bcd60e51b815260040161049390612ee8565b60026001541415610b2b5760405162461bcd60e51b815260040161049390612f2c565b600260015560ca5460408051636120933b60e11b815290516000926001600160a01b03169163c2412676916004808301926020929190829003018186803b158015610b7557600080fd5b505afa158015610b89573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610bad9190612e07565b9050856001600160a01b0316816001600160a01b031614610be05760405162461bcd60e51b815260040161049390613211565b600080600080610c2588888080601f01602080910402602001604051908101604052809392919081815260200183838082843760009201919091525061109892505050565b93509350935093506000610c39868b611df3565b905060006040518060800160405280876001600160a01b03168152602001866001600160401b03168152602001858152602001610c8d84604051806020016040528088815250611e2490919063ffffffff16565b8152509050610ca786826040015183606001516000611426565b50610cbc81600001518260400151898e611bb4565b7fc5f1085d8db8470034ca0b57c2029a07440e82632d8b6d34119bcc93fed806488782604051610ced929190612fe7565b60405180910390a150506001805550505050505050505050565b6065546001600160a01b03163314610d315760405162461bcd60e51b815260040161049390613054565b6108ce81611fa4565b610d43336104a6565b610d5f5760405162461bcd60e51b815260040161049390612eb1565b6104a461201d565b6065546001600160a01b03163314610d915760405162461bcd60e51b815260040161049390613054565b610da56001600160a01b0384168383612075565b7f2717ead6b9200dd235aad468c9809ea400fe33ac69b5bfaa6d3e90fc922b639883838360405161088e93929190613221565b600080600060ca60009054906101000a90046001600160a01b03166001600160a01b031663740e80616040518163ffffffff1660e01b815260040160206040518083038186803b158015610e2b57600080fd5b505afa158015610e3f573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610e639190612e07565b60405162f304db60e01b8152909150879087906001600160a01b0384169062f304db90610e96908590859060040161323c565b60206040518083038186803b158015610eae57600080fd5b505afa158015610ec2573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610ee691906130e4565b15610f3657600087118015610efb5750600086115b610f175760405162461bcd60e51b81526004016104939061329a565b610f2382600489610357565b9450610f2f85876120d0565b935061108c565b6000871180610f455750600086115b610f615760405162461bcd60e51b8152600401610493906132de565b610fef610fe8836004866001600160a01b0316633a01873287876040518363ffffffff1660e01b8152600401610f9892919061323c565b60206040518083038186803b158015610fb057600080fd5b505afa158015610fc4573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061016b9190612e5b565b88906120d0565b945061108961108283600461016b8b886001600160a01b0316634d30b6be89896040518363ffffffff1660e01b815260040161102c92919061323c565b60206040518083038186803b15801561104457600080fd5b505afa158015611058573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061107c9190612e5b565b906120dc565b87906120d0565b93505b50505094509492505050565b60008060006060848060200190518101906110b39190613462565b92989197509550909350915050565b60006110ce60016120e8565b905080156110e6576000805461ff0019166101001790555b6110ef84611da1565b6110f883612175565b6111018261219c565b801561114c576000805461ff00191690556040517f7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb384740249890611143906001906134e8565b60405180910390a15b50505050565b600080600060ca60009054906101000a90046001600160a01b03166001600160a01b031663740e80616040518163ffffffff1660e01b815260040160206040518083038186803b1580156111a557600080fd5b505afa1580156111b9573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906111dd9190612e07565b60405162f304db60e01b8152909150879087906001600160a01b0384169062f304db90611210908590859060040161323c565b60206040518083038186803b15801561122857600080fd5b505afa15801561123c573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061126091906130e4565b156112b2576000871180156112755750600086115b6112915760405162461bcd60e51b81526004016104939061329a565b6112a661129f83600461061d565b88906121cc565b9450610f2f86886121cc565b60008711806112c15750600086115b6112dd5760405162461bcd60e51b8152600401610493906132de565b61131461129f836004866001600160a01b0316633a01873287876040518363ffffffff1660e01b8152600401610f9892919061323c565b945061108961135183600461016b89886001600160a01b0316634d30b6be89896040518363ffffffff1660e01b815260040161102c92919061323c565b87906121cc565b6065546001600160a01b031633146113825760405162461bcd60e51b815260040161049390613054565b6001600160a01b0381166113a85760405162461bcd60e51b815260040161049390613539565b6108ce81611da1565b6001600160a01b03163b151590565b60975460ff166113e25760405162461bcd60e51b815260040161049390613574565b6097805460ff191690557f5db9ee0a495bf2e6ff9c91a7834c1ba4fdd244a5e8aa4e537bd38aeae4b073aa335b60405161141c9190612a70565b60405180910390a1565b6000808351116114485760405162461bcd60e51b8152600401610493906135c2565b60ca54604080516337187fc360e01b815290516000926001600160a01b0316916337187fc3916004808301926020929190829003018186803b15801561148d57600080fd5b505afa1580156114a1573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906114c59190612e07565b905060005b8451811015611b435760008582815181106114e7576114e76135d2565b602002602001015190506001600481111561150457611504612c11565b8151600481111561151757611517612c11565b14156116d5578060200151516001146115425760405162461bcd60e51b815260040161049390613629565b6000836001600160a01b03166365d6b40c8a84600001518560200151600081518110611570576115706135d2565b60200260200101516040518463ffffffff1660e01b815260040161159693929190612e28565b60206040518083038186803b1580156115ae57600080fd5b505afa1580156115c2573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906115e69190612e5b565b905060ca60009054906101000a90046001600160a01b03166001600160a01b03166322b31aba6040518163ffffffff1660e01b815260040160206040518083038186803b15801561163657600080fd5b505afa15801561164a573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061166e9190612e07565b6001600160a01b0316630de482878a8a846040518463ffffffff1660e01b815260040161169d93929190613639565b600060405180830381600087803b1580156116b757600080fd5b505af11580156116cb573d6000803e3d6000fd5b5050505050611ad4565b6003815160048111156116ea576116ea612c11565b1415611809578060200151516001146117155760405162461bcd60e51b815260040161049390613692565b6000836001600160a01b03166365d6b40c8a84600001518560200151600081518110611743576117436135d2565b60200260200101516040518463ffffffff1660e01b815260040161176993929190612e28565b60206040518083038186803b15801561178157600080fd5b505afa158015611795573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906117b99190612e5b565b905060ca60009054906101000a90046001600160a01b03166001600160a01b031663a2d2f2db6040518163ffffffff1660e01b815260040160206040518083038186803b15801561163657600080fd5b60028151600481111561181e5761181e612c11565b141561193d578060200151516001146118495760405162461bcd60e51b8152600401610493906136e0565b6000836001600160a01b03166365d6b40c8a84600001518560200151600081518110611877576118776135d2565b60200260200101516040518463ffffffff1660e01b815260040161189d93929190612e28565b60206040518083038186803b1580156118b557600080fd5b505afa1580156118c9573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906118ed9190612e5b565b905060ca60009054906101000a90046001600160a01b03166001600160a01b031663f931ca566040518163ffffffff1660e01b815260040160206040518083038186803b15801561163657600080fd5b60048151600481111561195257611952612c11565b1415611abc5780602001515160021461197d5760405162461bcd60e51b815260040161049390613730565b6000806119c88a8a856020015160008151811061199c5761199c6135d2565b602002602001015186602001516001815181106119bb576119bb6135d2565b6020026020010151611152565b9150915060ca60009054906101000a90046001600160a01b03166001600160a01b031663740e80616040518163ffffffff1660e01b815260040160206040518083038186803b158015611a1a57600080fd5b505afa158015611a2e573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611a529190612e07565b6001600160a01b031663a5a2d6178b8b85856040518563ffffffff1660e01b8152600401611a839493929190613740565b600060405180830381600087803b158015611a9d57600080fd5b505af1158015611ab1573d6000803e3d6000fd5b505050505050611ad4565b60405162461bcd60e51b8152600401610493906137b8565b8415611b305760005b816020015151811015611b2e57611b1a82602001518281518110611b0357611b036135d2565b6020026020010151866120dc90919063ffffffff16565b945080611b26816137de565b915050611add565b505b5080611b3b816137de565b9150506114ca565b5050949350505050565b600080611b59846121d8565b90506012808211611b8c57611b83611b718284612271565b611b7c90600a613907565b85906121cc565b9250505061072b565b611bab611b998383612271565b611ba490600a613907565b85906120d0565b95945050505050565b60ca60009054906101000a90046001600160a01b03166001600160a01b031663a1c841ca6040518163ffffffff1660e01b815260040160206040518083038186803b158015611c0257600080fd5b505afa158015611c16573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611c3a9190612e07565b6001600160a01b0316632d52976485856040518363ffffffff1660e01b8152600401611c6792919061323c565b60206040518083038186803b158015611c7f57600080fd5b505afa158015611c93573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611cb791906130e4565b611cd35760405162461bcd60e51b815260040161049390613957565b6001600160a01b038416600090815260cb6020526040902054611cf690826120dc565b6001600160a01b03808616600090815260cb602052604090209190915561114c90831633308461227d565b611d2a816104a6565b611d465760405162461bcd60e51b81526004016104939061399b565b6001600160a01b038116600090815260c9602052604090819020805460ff19169055517fcd265ebaf09df2871cc7bd4133404a235ba12eff2041bb89d9c714a2621c7c7e90611d96908390612a70565b60405180910390a150565b606580546001600160a01b038381166001600160a01b0319831681179093556040519116919082907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a35050565b600080611dff846121d8565b90506012808211611e1757611b83611b998284612271565b611bab611b718383612271565b8151805160609190611e485760405162461bcd60e51b8152600401610493906139ec565b6000611e538261229e565b905060008111611e755760405162461bcd60e51b815260040161049390613a30565b60005b8251811015611f9a576000838281518110611e9557611e956135d2565b6020026020010151602001515111611ebf5760405162461bcd60e51b815260040161049390613a7f565b60005b838281518110611ed457611ed46135d2565b60200260200101516020015151811015611f8757611f3b83611f3588878681518110611f0257611f026135d2565b6020026020010151602001518581518110611f1f57611f1f6135d2565b60200260200101516120d090919063ffffffff16565b906121cc565b848381518110611f4d57611f4d6135d2565b6020026020010151602001518281518110611f6a57611f6a6135d2565b602090810291909101015280611f7f816137de565b915050611ec2565b5080611f92816137de565b915050611e78565b5090949350505050565b611fad816104a6565b15611fca5760405162461bcd60e51b815260040161049390613acd565b6001600160a01b038116600090815260c9602052604090819020805460ff19166001179055517f6719d08c1888103bea251a4ed56406bd0c3e69723c8a1686e017e7bbe159b6f890611d96908390612a70565b60975460ff16156120405760405162461bcd60e51b815260040161049390612ee8565b6097805460ff191660011790557f62e78cea01bee320cd4e420270b5ea74000d11b0c9f74754ebdbfc544b05a25861140f3390565b6120cb8363a9059cbb60e01b848460405160240161209492919061323c565b60408051601f198184030181529190526020810180516001600160e01b03166001600160e01b03199093169290921790915261236b565b505050565b60006104678284613add565b60006104678284613afc565b60008054610100900460ff161561212f578160ff16600114801561210b5750303b155b6121275760405162461bcd60e51b815260040161049390613b5f565b506000919050565b60005460ff8084169116106121565760405162461bcd60e51b815260040161049390613b5f565b506000805460ff191660ff92909216919091179055600190565b919050565b600054610100900460ff16610d315760405162461bcd60e51b815260040161049390613bb7565b600054610100900460ff166121c35760405162461bcd60e51b815260040161049390613bb7565b6108ce816123fa565b60006104678284613bdd565b6000806000836001600160a01b03166040516121f390613bf1565b600060405180830381855afa9150503d806000811461222e576040519150601f19603f3d011682016040523d82523d6000602084013e612233565b606091505b5091509150816122555760405162461bcd60e51b815260040161049390613c3a565b808060200190518101906122699190612e5b565b949350505050565b60006104678284613c4a565b61114c846323b872dd60e01b85858560405160240161209493929190613c61565b6000808251116122c05760405162461bcd60e51b815260040161049390613cb1565b60005b82518110156123655760005b8382815181106122e1576122e16135d2565b602002602001015160200151518110156123525761233e84838151811061230a5761230a6135d2565b6020026020010151602001518281518110612327576123276135d2565b6020026020010151846120dc90919063ffffffff16565b92508061234a816137de565b9150506122cf565b508061235d816137de565b9150506122c3565b50919050565b60006123c0826040518060400160405280602081526020017f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c6564815250856001600160a01b031661246b9092919063ffffffff16565b8051909150156120cb57808060200190518101906123de91906130e4565b6120cb5760405162461bcd60e51b815260040161049390613d08565b6001600160a01b0381166124205760405162461bcd60e51b815260040161049390613d4c565b60ca80546001600160a01b0319166001600160a01b0383161790556040517f7aed1d3e8155a07ccf395e44ea3109a0e2d6c9b29bbbe9f142d9790596f4dc8090611d96908390612dee565b60606122698484600085856001600160a01b0385163b61249d5760405162461bcd60e51b815260040161049390613d90565b600080866001600160a01b031685876040516124b99190613dee565b60006040518083038185875af1925050503d80600081146124f6576040519150601f19603f3d011682016040523d82523d6000602084013e6124fb565b606091505b509150915061250b828286612516565b979650505050505050565b60608315612525575081610467565b8251156125355782518084602001fd5b8160405162461bcd60e51b81526004016104939190613e2c565b60006001600160a01b03821661072b565b6125698161254f565b81146108ce57600080fd5b803561072b81612560565b600581106108ce57600080fd5b803561072b8161257f565b80612569565b803561072b81612597565b6000806000606084860312156125c0576125c0600080fd5b60006125cc8686612574565b93505060206125dd8682870161258c565b92505060406125ee8682870161259d565b9150509250925092565b805b82525050565b6020810161072b82846125f8565b60006020828403121561262357612623600080fd5b60006107278484612574565b8015156125fa565b6020810161072b828461262f565b634e487b7160e01b600052604160045260246000fd5b601f19601f83011681018181106001600160401b038211171561268057612680612645565b6040525050565b600061269260405190565b9050612170828261265b565b6001600160401b038116612569565b803561072b8161269e565b60006001600160401b038211156126d1576126d1612645565b5060209081020190565b60006126ee6126e9846126b8565b612687565b8381529050602080820190840283018581111561270d5761270d600080fd5b835b818110156127315780612722888261259d565b8452506020928301920161270f565b5050509392505050565b600082601f83011261274f5761274f600080fd5b81356107278482602086016126db565b60006040828403121561277457612774600080fd5b61277e6040612687565b9050600061278c848461258c565b82525060208201356001600160401b038111156127ab576127ab600080fd5b6127b78482850161273b565b60208301525092915050565b60006127d16126e9846126b8565b838152905060208082019084028301858111156127f0576127f0600080fd5b835b818110156127315780356001600160401b0381111561281357612813600080fd5b808601612820898261275f565b85525050602092830192016127f2565b600082601f83011261284457612844600080fd5b81356107278482602086016127c3565b60006080828403121561286957612869600080fd5b6128736080612687565b905060006128818484612574565b8252506020612892848483016126ad565b60208301525060406128a68482850161259d565b60408301525060608201356001600160401b038111156128c8576128c8600080fd5b6128d484828501612830565b60608301525092915050565b6000602082840312156128f5576128f5600080fd5b81356001600160401b0381111561290e5761290e600080fd5b61072784828501612854565b6000806040838503121561293057612930600080fd5b600061293c8585612574565b925050602061294d8582860161258c565b9150509250929050565b6000806040838503121561296d5761296d600080fd5b60006129798585612574565b925050602061294d8582860161259d565b600061072b8261254f565b6125698161298a565b803561072b81612995565b60008083601f8401126129be576129be600080fd5b5081356001600160401b038111156129d8576129d8600080fd5b6020830191508360018202830111156129f3576129f3600080fd5b9250929050565b60008060008060608587031215612a1357612a13600080fd5b6000612a1f878761299e565b9450506020612a308782880161259d565b93505060408501356001600160401b03811115612a4f57612a4f600080fd5b612a5b878288016129a9565b95989497509550505050565b6125fa8161254f565b6020810161072b8284612a67565b600080600060608486031215612a9657612a96600080fd5b6000612aa2868661299e565b93505060206125dd86828701612574565b60008060008060808587031215612acc57612acc600080fd5b6000612ad88787612574565b9450506020612ae98782880161259d565b9350506040612afa8782880161259d565b9250506060612b0b8782880161259d565b91505092959194509250565b60408101612b2582856125f8565b61046760208301846125f8565b60006001600160401b03821115612b4b57612b4b612645565b601f19601f83011660200192915050565b82818337506000910152565b6000612b766126e984612b32565b905082815260208101848484011115612b9157612b91600080fd5b612b9c848285612b5c565b509392505050565b600082601f830112612bb857612bb8600080fd5b8135610727848260208601612b68565b600060208284031215612bdd57612bdd600080fd5b81356001600160401b03811115612bf657612bf6600080fd5b61072784828501612ba4565b6001600160401b0381166125fa565b634e487b7160e01b600052602160045260246000fd5b600581106108ce576108ce612c11565b8061217081612c27565b600061072b82612c37565b6125fa81612c41565b6000612c6183836125f8565b505060200190565b6000612c73825190565b80845260209384019383018060005b83811015612ca7578151612c968882612c55565b975060208301925050600101612c82565b509495945050505050565b80516000906040840190612cc68582612c4c565b5060208301518482036020860152611bab8282612c69565b60006104678383612cb2565b6000612cf4825190565b80845260208401935083602082028501612d0e8560200190565b8060005b85811015612d435784840389528151612d2b8582612cde565b94506020830160209a909a0199925050600101612d12565b5091979650505050505050565b60808101612d5e8287612a67565b612d6b6020830186612c02565b612d7860408301856125f8565b8181036060830152612d8a8184612cea565b9695505050505050565b600080600060608486031215612dac57612dac600080fd5b6000612db88686612574565b9350506020612dc986828701612574565b92505060406125ee8682870161299e565b600061072b8261298a565b6125fa81612dda565b6020810161072b8284612de5565b805161072b81612995565b600060208284031215612e1c57612e1c600080fd5b60006107278484612dfc565b60608101612e368286612a67565b612e436020830185612c4c565b61226960408301846125f8565b805161072b81612597565b600060208284031215612e7057612e70600080fd5b60006107278484612e50565b60208082527f5061757365723a2063616c6c6572206973206e6f742074686520706175736572910190815260005b5060200190565b6020808252810161072b81612e7c565b601081526000602082016f14185d5cd8589b194e881c185d5cd95960821b81529150612eaa565b6020808252810161072b81612ec1565b601f81526000602082017f5265656e7472616e637947756172643a207265656e7472616e742063616c6c0081529150612eaa565b6020808252810161072b81612ef8565b6000612f46825190565b80845260208401935083602082028501612f608560200190565b8060005b85811015612d435784840389528151612f7d8582612cde565b94506020830160209a909a0199925050600101612f64565b80516000906080840190612fa98582612a67565b506020830151612fbc6020860182612c02565b506040830151612fcf60408601826125f8565b5060608301518482036060860152611bab8282612f3c565b60408101612ff58285612de5565b81810360208301526122698184612f95565b604081016130158285612a67565b6104676020830184612c4c565b60208082527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e657291019081526000612eaa565b6020808252810161072b81613022565b602f81526000602082017f4f776e6572576974686472617761626c653a207769746864726177206e61746981526e1d99481d1bdad95b8819985a5b1959608a1b602082015291505b5060400190565b6020808252810161072b81613064565b60408101612b258285612de5565b801515612569565b805161072b816130d1565b6000602082840312156130f9576130f9600080fd5b600061072784846130d9565b602581526000602082017f447374436861696e5061796d656e743a206e6f6e6578697374656e742070726f8152643b34b232b960d91b602082015291506130ac565b6020808252810161072b81613105565b805161072b81612560565b60006020828403121561317757613177600080fd5b60006107278484613157565b602d81526000602082017f526f75746572577261707065723a2063616c6c6572206973206e6f74206d657381526c39b0b3b2903932b1b2b4bb32b960991b602082015291506130ac565b6020808252810161072b81613183565b601e81526000602082017f447374436861696e5061796d656e743a20696e76616c696420746f6b656e000081529150612eaa565b6020808252810161072b816131dd565b6060810161322f8286612de5565b612e436020830185612a67565b60408101612b258285612a67565b603381526000602082017f447374436861696e5061796d656e743a20696e76616c696420706172616d7320815272199bdc88195e1c1a5c9959081858d8dbdd5b9d606a1b602082015291506130ac565b6020808252810161072b8161324a565b601f81526000602082017f447374436861696e5061796d656e743a20696e76616c696420706172616d730081529150612eaa565b6020808252810161072b816132aa565b805161072b8161269e565b805161072b8161257f565b60006133126126e9846126b8565b8381529050602080820190840283018581111561333157613331600080fd5b835b8181101561273157806133468882612e50565b84525060209283019201613333565b600082601f83011261336957613369600080fd5b8151610727848260208601613304565b60006040828403121561338e5761338e600080fd5b6133986040612687565b905060006133a684846132f9565b82525060208201516001600160401b038111156133c5576133c5600080fd5b6127b784828501613355565b60006133df6126e9846126b8565b838152905060208082019084028301858111156133fe576133fe600080fd5b835b818110156127315780516001600160401b0381111561342157613421600080fd5b80860161342e8982613379565b8552505060209283019201613400565b600082601f83011261345257613452600080fd5b81516107278482602086016133d1565b6000806000806080858703121561347b5761347b600080fd5b60006134878787613157565b9450506020613498878288016132ee565b93505060406134a987828801612e50565b92505060608501516001600160401b038111156134c8576134c8600080fd5b612b0b8782880161343e565b600060ff821661072b565b6125fa816134d4565b6020810161072b82846134df565b602681526000602082017f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206181526564647265737360d01b602082015291506130ac565b6020808252810161072b816134f6565b601481526000602082017314185d5cd8589b194e881b9bdd081c185d5cd95960621b81529150612eaa565b6020808252810161072b81613549565b602181526000602082017f447374436861696e5061796d656e743a20696e76616c6964207061796c6f61648152607360f81b602082015291506130ac565b6020808252810161072b81613584565b634e487b7160e01b600052603260045260246000fd5b60368152600060208201600080516020613e3e833981519152815275656e67746820666f72204275696c64696e6754696d6560501b602082015291506130ac565b6020808252810161072b816135e8565b606081016136478286612a67565b612e4360208301856125f8565b60338152600060208201600080516020613e3e833981519152815272656e67746820666f7220415253746f7261676560681b602082015291506130ac565b6020808252810161072b81613654565b60338152600060208201600080516020613e3e8339815191528152720cadccee8d040ccdee44084c2dcc8eed2c8e8d606b1b602082015291506130ac565b6020808252810161072b816136a2565b60358152600060208201600080516020613e3e833981519152815274656e67746820666f72204950465353746f7261676560581b602082015291506130ac565b6020808252810161072b816136f0565b6080810161374e8287612a67565b61375b60208301866125f8565b61376860408301856125f8565b611bab60608301846125f8565b602681526000602082017f447374436861696e5061796d656e743a20756e6b6e6f776e207265736f75726381526565207479706560d01b602082015291506130ac565b6020808252810161072b81613775565b634e487b7160e01b600052601160045260246000fd5b60006000198214156137f2576137f26137c8565b5060010190565b80825b600185111561383857808604811115613817576138176137c8565b600185161561382557908102905b80026138318560011c90565b94506137fc565b94509492505050565b60008261385057506001610467565b8161385d57506000610467565b8160018114613873576002811461387d576138aa565b6001915050610467565b60ff84111561388e5761388e6137c8565b8360020a9150848211156138a4576138a46137c8565b50610467565b5060208310610133831016604e8410600b84101617156138dd575081810a838111156138d8576138d86137c8565b610467565b6138ea84848460016137f9565b92509050818404811115613900576139006137c8565b0292915050565b60006104676000198484613841565b602481526000602082017f447374436861696e5061796d656e743a206e6f6e6578697374656e74206163638152631bdd5b9d60e21b602082015291506130ac565b6020808252810161072b81613916565b601d81526000602082017f5061757365723a206163636f756e74206973206e6f742070617573657200000081529150612eaa565b6020808252810161072b81613967565b602481526000602082017f5265736f75726365446174613a20696e76616c6964207061796c6f6164206c658152630dccee8d60e31b602082015291506130ac565b6020808252810161072b816139ab565b601e81526000602082017f5265736f75726365446174613a207a65726f20746f74616c2076616c7565000081529150612eaa565b6020808252810161072b816139fc565b602281526000602082017f5265736f75726365446174613a20696e76616c69642076616c7565206c656e678152610e8d60f31b602082015291506130ac565b6020808252810161072b81613a40565b602181526000602082017f5061757365723a206163636f756e7420697320616c72656164792070617573658152603960f91b602082015291506130ac565b6020808252810161072b81613a8f565b6000816000190483118215151615613af757613af76137c8565b500290565b60008219821115613b0f57613b0f6137c8565b500190565b602e81526000602082017f496e697469616c697a61626c653a20636f6e747261637420697320616c72656181526d191e481a5b9a5d1a585b1a5e995960921b602082015291506130ac565b6020808252810161072b81613b14565b602b81526000602082017f496e697469616c697a61626c653a20636f6e7472616374206973206e6f74206981526a6e697469616c697a696e6760a81b602082015291506130ac565b6020808252810161072b81613b6f565b634e487b7160e01b600052601260045260246000fd5b600082613bec57613bec613bc7565b500490565b63313ce56760e01b815260006004820161072b565b601b81526000602082017f5265736f75726365446174613a20696e76616c696420746f6b656e000000000081529150612eaa565b6020808252810161072b81613c06565b600082821015613c5c57613c5c6137c8565b500390565b6060810161322f8286612a67565b602581526000602082017f5265736f75726365446174613a20696e76616c6964207061796c6f616473206c8152640cadccee8d60db1b602082015291506130ac565b6020808252810161072b81613c6f565b602a81526000602082017f5361666545524332303a204552433230206f7065726174696f6e20646964206e8152691bdd081cdd58d8d9595960b21b602082015291506130ac565b6020808252810161072b81613cc1565b601b81526000602082017f526f75746572577261707065723a207a65726f2061646472657373000000000081529150612eaa565b6020808252810161072b81613d18565b601d81526000602082017f416464726573733a2063616c6c20746f206e6f6e2d636f6e747261637400000081529150612eaa565b6020808252810161072b81613d5c565b60005b83811015613dbb578181015183820152602001613da3565b8381111561114c5750506000910152565b6000613dd6825190565b613de4818560208601613da0565b9290920192915050565b60006104678284613dcc565b6000613e04825190565b808452602084019350613e1b818560208601613da0565b601f01601f19169290920192915050565b602080825281016104678184613dfa56fe447374436861696e5061796d656e743a20696e76616c69642076616c7565206ca2646970667358221220c35b580bea14a6a184bc6bb94040ef5be30b9afa286243e7812df6d5b40b8f0264736f6c63430008090033",
  "deployedBytecode": "0x608060405234801561001057600080fd5b50600436106101585760003560e01c806377ef533c116100c357806394e48f891161007c57806394e48f89146102ba578063bd169975146102db578063c0c53b8b146102fe578063ce841dd214610311578063f2fde38b14610324578063f887ea401461033757600080fd5b806377ef533c1461023d57806380f51c121461025057806382dc1ec4146102735780638456cb59146102865780638da5cb5b1461028e57806393563a95146102a757600080fd5b806365d6b40c1161011557806365d6b40c146101e1578063699256f4146101f45780636b2c0f55146102075780636ef8d66d1461021a57806370a0823114610222578063715018a61461023557600080fd5b806335da9b231461015d5780633f4ba83a1461018657806346fbf68e14610190578063490e4fa2146101b05780635c975abb146101c35780635e1a544c146101ce575b600080fd5b61017061016b3660046125a8565b610357565b60405161017d9190612600565b60405180910390f35b61018e61046e565b005b6101a361019e36600461260e565b6104a6565b60405161017d9190612637565b6101706101be3660046128e0565b6104c4565b60975460ff166101a3565b6101706101dc36600461291a565b61061d565b6101706101ef3660046125a8565b610731565b61018e610202366004612957565b6107ed565b61018e61021536600461260e565b61089b565b61018e6108d1565b61017061023036600461260e565b6108da565b61018e610a0a565b61018e61024b3660046129fa565b610a3e565b6101a361025e36600461260e565b60c96020526000908152604090205460ff1681565b61018e61028136600461260e565b610d07565b61018e610d3a565b6065546001600160a01b031660405161017d9190612a70565b61018e6102b5366004612a7e565b610d67565b6102cd6102c8366004612ab3565b610dd8565b60405161017d929190612b17565b6102ee6102e9366004612bc8565b611098565b60405161017d9493929190612d50565b61018e61030c366004612d94565b6110c2565b6102cd61031f366004612ab3565b611152565b61018e61033236600461260e565b611358565b60ca5461034a906001600160a01b031681565b60405161017d9190612dee565b60008060ca60009054906101000a90046001600160a01b03166001600160a01b03166337187fc36040518163ffffffff1660e01b815260040160206040518083038186803b1580156103a857600080fd5b505afa1580156103bc573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906103e09190612e07565b6040516335da9b2360e01b81529091506001600160a01b038216906335da9b239061041390889088908890600401612e28565b60206040518083038186803b15801561042b57600080fd5b505afa15801561043f573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906104639190612e5b565b9150505b9392505050565b610477336104a6565b61049c5760405162461bcd60e51b815260040161049390612eb1565b60405180910390fd5b6104a46113c0565b565b6001600160a01b0316600090815260c9602052604090205460ff1690565b60006104d260975460ff1690565b156104ef5760405162461bcd60e51b815260040161049390612ee8565b600260015414156105125760405162461bcd60e51b815260040161049390612f2c565b6002600190815582516040840151606085015161052e93611426565b9050600060ca60009054906101000a90046001600160a01b03166001600160a01b031663c24126766040518163ffffffff1660e01b815260040160206040518083038186803b15801561058057600080fd5b505afa158015610594573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906105b89190612e07565b90506105c48183611b4d565b91506105da836000015184604001518385611bb4565b7fc5f1085d8db8470034ca0b57c2029a07440e82632d8b6d34119bcc93fed80648818460405161060b929190612fe7565b60405180910390a15060018055919050565b60008060ca60009054906101000a90046001600160a01b03166001600160a01b03166337187fc36040518163ffffffff1660e01b815260040160206040518083038186803b15801561066e57600080fd5b505afa158015610682573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906106a69190612e07565b604051631786951360e21b81529091506001600160a01b03821690635e1a544c906106d79087908790600401613007565b60206040518083038186803b1580156106ef57600080fd5b505afa158015610703573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906107279190612e5b565b9150505b92915050565b60008060ca60009054906101000a90046001600160a01b03166001600160a01b03166337187fc36040518163ffffffff1660e01b815260040160206040518083038186803b15801561078257600080fd5b505afa158015610796573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906107ba9190612e07565b604051631975ad0360e21b81529091506001600160a01b038216906365d6b40c9061041390889088908890600401612e28565b6065546001600160a01b031633146108175760405162461bcd60e51b815260040161049390613054565b6040516000906001600160a01b0384169083156108fc0290849084818181858888f1935050505090508061085d5760405162461bcd60e51b8152600401610493906130b3565b7f2c876ecb97b3c6854f2488d373403f903eacb800e51c159a5c0c7a9c857e4827838360405161088e9291906130c3565b60405180910390a1505050565b6065546001600160a01b031633146108c55760405162461bcd60e51b815260040161049390613054565b6108ce81611d21565b50565b6104a433611d21565b60ca54604080516314b47ed960e31b815290516000926001600160a01b03169163a5a3f6c8916004808301926020929190829003018186803b15801561091f57600080fd5b505afa158015610933573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906109579190612e07565b6001600160a01b0316636b074a07836040518263ffffffff1660e01b81526004016109829190612a70565b60206040518083038186803b15801561099a57600080fd5b505afa1580156109ae573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906109d291906130e4565b6109ee5760405162461bcd60e51b815260040161049390613147565b506001600160a01b0316600090815260cb602052604090205490565b6065546001600160a01b03163314610a345760405162461bcd60e51b815260040161049390613054565b6104a46000611da1565b60ca54604080516303bf7e6b60e21b815290516000926001600160a01b031691630efdf9ac916004808301926020929190829003018186803b158015610a8357600080fd5b505afa158015610a97573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610abb9190613162565b9050336001600160a01b03821614610ae55760405162461bcd60e51b8152600401610493906131cd565b60975460ff1615610b085760405162461bcd60e51b815260040161049390612ee8565b60026001541415610b2b5760405162461bcd60e51b815260040161049390612f2c565b600260015560ca5460408051636120933b60e11b815290516000926001600160a01b03169163c2412676916004808301926020929190829003018186803b158015610b7557600080fd5b505afa158015610b89573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610bad9190612e07565b9050856001600160a01b0316816001600160a01b031614610be05760405162461bcd60e51b815260040161049390613211565b600080600080610c2588888080601f01602080910402602001604051908101604052809392919081815260200183838082843760009201919091525061109892505050565b93509350935093506000610c39868b611df3565b905060006040518060800160405280876001600160a01b03168152602001866001600160401b03168152602001858152602001610c8d84604051806020016040528088815250611e2490919063ffffffff16565b8152509050610ca786826040015183606001516000611426565b50610cbc81600001518260400151898e611bb4565b7fc5f1085d8db8470034ca0b57c2029a07440e82632d8b6d34119bcc93fed806488782604051610ced929190612fe7565b60405180910390a150506001805550505050505050505050565b6065546001600160a01b03163314610d315760405162461bcd60e51b815260040161049390613054565b6108ce81611fa4565b610d43336104a6565b610d5f5760405162461bcd60e51b815260040161049390612eb1565b6104a461201d565b6065546001600160a01b03163314610d915760405162461bcd60e51b815260040161049390613054565b610da56001600160a01b0384168383612075565b7f2717ead6b9200dd235aad468c9809ea400fe33ac69b5bfaa6d3e90fc922b639883838360405161088e93929190613221565b600080600060ca60009054906101000a90046001600160a01b03166001600160a01b031663740e80616040518163ffffffff1660e01b815260040160206040518083038186803b158015610e2b57600080fd5b505afa158015610e3f573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610e639190612e07565b60405162f304db60e01b8152909150879087906001600160a01b0384169062f304db90610e96908590859060040161323c565b60206040518083038186803b158015610eae57600080fd5b505afa158015610ec2573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610ee691906130e4565b15610f3657600087118015610efb5750600086115b610f175760405162461bcd60e51b81526004016104939061329a565b610f2382600489610357565b9450610f2f85876120d0565b935061108c565b6000871180610f455750600086115b610f615760405162461bcd60e51b8152600401610493906132de565b610fef610fe8836004866001600160a01b0316633a01873287876040518363ffffffff1660e01b8152600401610f9892919061323c565b60206040518083038186803b158015610fb057600080fd5b505afa158015610fc4573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061016b9190612e5b565b88906120d0565b945061108961108283600461016b8b886001600160a01b0316634d30b6be89896040518363ffffffff1660e01b815260040161102c92919061323c565b60206040518083038186803b15801561104457600080fd5b505afa158015611058573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061107c9190612e5b565b906120dc565b87906120d0565b93505b50505094509492505050565b60008060006060848060200190518101906110b39190613462565b92989197509550909350915050565b60006110ce60016120e8565b905080156110e6576000805461ff0019166101001790555b6110ef84611da1565b6110f883612175565b6111018261219c565b801561114c576000805461ff00191690556040517f7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb384740249890611143906001906134e8565b60405180910390a15b50505050565b600080600060ca60009054906101000a90046001600160a01b03166001600160a01b031663740e80616040518163ffffffff1660e01b815260040160206040518083038186803b1580156111a557600080fd5b505afa1580156111b9573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906111dd9190612e07565b60405162f304db60e01b8152909150879087906001600160a01b0384169062f304db90611210908590859060040161323c565b60206040518083038186803b15801561122857600080fd5b505afa15801561123c573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061126091906130e4565b156112b2576000871180156112755750600086115b6112915760405162461bcd60e51b81526004016104939061329a565b6112a661129f83600461061d565b88906121cc565b9450610f2f86886121cc565b60008711806112c15750600086115b6112dd5760405162461bcd60e51b8152600401610493906132de565b61131461129f836004866001600160a01b0316633a01873287876040518363ffffffff1660e01b8152600401610f9892919061323c565b945061108961135183600461016b89886001600160a01b0316634d30b6be89896040518363ffffffff1660e01b815260040161102c92919061323c565b87906121cc565b6065546001600160a01b031633146113825760405162461bcd60e51b815260040161049390613054565b6001600160a01b0381166113a85760405162461bcd60e51b815260040161049390613539565b6108ce81611da1565b6001600160a01b03163b151590565b60975460ff166113e25760405162461bcd60e51b815260040161049390613574565b6097805460ff191690557f5db9ee0a495bf2e6ff9c91a7834c1ba4fdd244a5e8aa4e537bd38aeae4b073aa335b60405161141c9190612a70565b60405180910390a1565b6000808351116114485760405162461bcd60e51b8152600401610493906135c2565b60ca54604080516337187fc360e01b815290516000926001600160a01b0316916337187fc3916004808301926020929190829003018186803b15801561148d57600080fd5b505afa1580156114a1573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906114c59190612e07565b905060005b8451811015611b435760008582815181106114e7576114e76135d2565b602002602001015190506001600481111561150457611504612c11565b8151600481111561151757611517612c11565b14156116d5578060200151516001146115425760405162461bcd60e51b815260040161049390613629565b6000836001600160a01b03166365d6b40c8a84600001518560200151600081518110611570576115706135d2565b60200260200101516040518463ffffffff1660e01b815260040161159693929190612e28565b60206040518083038186803b1580156115ae57600080fd5b505afa1580156115c2573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906115e69190612e5b565b905060ca60009054906101000a90046001600160a01b03166001600160a01b03166322b31aba6040518163ffffffff1660e01b815260040160206040518083038186803b15801561163657600080fd5b505afa15801561164a573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061166e9190612e07565b6001600160a01b0316630de482878a8a846040518463ffffffff1660e01b815260040161169d93929190613639565b600060405180830381600087803b1580156116b757600080fd5b505af11580156116cb573d6000803e3d6000fd5b5050505050611ad4565b6003815160048111156116ea576116ea612c11565b1415611809578060200151516001146117155760405162461bcd60e51b815260040161049390613692565b6000836001600160a01b03166365d6b40c8a84600001518560200151600081518110611743576117436135d2565b60200260200101516040518463ffffffff1660e01b815260040161176993929190612e28565b60206040518083038186803b15801561178157600080fd5b505afa158015611795573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906117b99190612e5b565b905060ca60009054906101000a90046001600160a01b03166001600160a01b031663a2d2f2db6040518163ffffffff1660e01b815260040160206040518083038186803b15801561163657600080fd5b60028151600481111561181e5761181e612c11565b141561193d578060200151516001146118495760405162461bcd60e51b8152600401610493906136e0565b6000836001600160a01b03166365d6b40c8a84600001518560200151600081518110611877576118776135d2565b60200260200101516040518463ffffffff1660e01b815260040161189d93929190612e28565b60206040518083038186803b1580156118b557600080fd5b505afa1580156118c9573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906118ed9190612e5b565b905060ca60009054906101000a90046001600160a01b03166001600160a01b031663f931ca566040518163ffffffff1660e01b815260040160206040518083038186803b15801561163657600080fd5b60048151600481111561195257611952612c11565b1415611abc5780602001515160021461197d5760405162461bcd60e51b815260040161049390613730565b6000806119c88a8a856020015160008151811061199c5761199c6135d2565b602002602001015186602001516001815181106119bb576119bb6135d2565b6020026020010151611152565b9150915060ca60009054906101000a90046001600160a01b03166001600160a01b031663740e80616040518163ffffffff1660e01b815260040160206040518083038186803b158015611a1a57600080fd5b505afa158015611a2e573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611a529190612e07565b6001600160a01b031663a5a2d6178b8b85856040518563ffffffff1660e01b8152600401611a839493929190613740565b600060405180830381600087803b158015611a9d57600080fd5b505af1158015611ab1573d6000803e3d6000fd5b505050505050611ad4565b60405162461bcd60e51b8152600401610493906137b8565b8415611b305760005b816020015151811015611b2e57611b1a82602001518281518110611b0357611b036135d2565b6020026020010151866120dc90919063ffffffff16565b945080611b26816137de565b915050611add565b505b5080611b3b816137de565b9150506114ca565b5050949350505050565b600080611b59846121d8565b90506012808211611b8c57611b83611b718284612271565b611b7c90600a613907565b85906121cc565b9250505061072b565b611bab611b998383612271565b611ba490600a613907565b85906120d0565b95945050505050565b60ca60009054906101000a90046001600160a01b03166001600160a01b031663a1c841ca6040518163ffffffff1660e01b815260040160206040518083038186803b158015611c0257600080fd5b505afa158015611c16573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611c3a9190612e07565b6001600160a01b0316632d52976485856040518363ffffffff1660e01b8152600401611c6792919061323c565b60206040518083038186803b158015611c7f57600080fd5b505afa158015611c93573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611cb791906130e4565b611cd35760405162461bcd60e51b815260040161049390613957565b6001600160a01b038416600090815260cb6020526040902054611cf690826120dc565b6001600160a01b03808616600090815260cb602052604090209190915561114c90831633308461227d565b611d2a816104a6565b611d465760405162461bcd60e51b81526004016104939061399b565b6001600160a01b038116600090815260c9602052604090819020805460ff19169055517fcd265ebaf09df2871cc7bd4133404a235ba12eff2041bb89d9c714a2621c7c7e90611d96908390612a70565b60405180910390a150565b606580546001600160a01b038381166001600160a01b0319831681179093556040519116919082907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a35050565b600080611dff846121d8565b90506012808211611e1757611b83611b998284612271565b611bab611b718383612271565b8151805160609190611e485760405162461bcd60e51b8152600401610493906139ec565b6000611e538261229e565b905060008111611e755760405162461bcd60e51b815260040161049390613a30565b60005b8251811015611f9a576000838281518110611e9557611e956135d2565b6020026020010151602001515111611ebf5760405162461bcd60e51b815260040161049390613a7f565b60005b838281518110611ed457611ed46135d2565b60200260200101516020015151811015611f8757611f3b83611f3588878681518110611f0257611f026135d2565b6020026020010151602001518581518110611f1f57611f1f6135d2565b60200260200101516120d090919063ffffffff16565b906121cc565b848381518110611f4d57611f4d6135d2565b6020026020010151602001518281518110611f6a57611f6a6135d2565b602090810291909101015280611f7f816137de565b915050611ec2565b5080611f92816137de565b915050611e78565b5090949350505050565b611fad816104a6565b15611fca5760405162461bcd60e51b815260040161049390613acd565b6001600160a01b038116600090815260c9602052604090819020805460ff19166001179055517f6719d08c1888103bea251a4ed56406bd0c3e69723c8a1686e017e7bbe159b6f890611d96908390612a70565b60975460ff16156120405760405162461bcd60e51b815260040161049390612ee8565b6097805460ff191660011790557f62e78cea01bee320cd4e420270b5ea74000d11b0c9f74754ebdbfc544b05a25861140f3390565b6120cb8363a9059cbb60e01b848460405160240161209492919061323c565b60408051601f198184030181529190526020810180516001600160e01b03166001600160e01b03199093169290921790915261236b565b505050565b60006104678284613add565b60006104678284613afc565b60008054610100900460ff161561212f578160ff16600114801561210b5750303b155b6121275760405162461bcd60e51b815260040161049390613b5f565b506000919050565b60005460ff8084169116106121565760405162461bcd60e51b815260040161049390613b5f565b506000805460ff191660ff92909216919091179055600190565b919050565b600054610100900460ff16610d315760405162461bcd60e51b815260040161049390613bb7565b600054610100900460ff166121c35760405162461bcd60e51b815260040161049390613bb7565b6108ce816123fa565b60006104678284613bdd565b6000806000836001600160a01b03166040516121f390613bf1565b600060405180830381855afa9150503d806000811461222e576040519150601f19603f3d011682016040523d82523d6000602084013e612233565b606091505b5091509150816122555760405162461bcd60e51b815260040161049390613c3a565b808060200190518101906122699190612e5b565b949350505050565b60006104678284613c4a565b61114c846323b872dd60e01b85858560405160240161209493929190613c61565b6000808251116122c05760405162461bcd60e51b815260040161049390613cb1565b60005b82518110156123655760005b8382815181106122e1576122e16135d2565b602002602001015160200151518110156123525761233e84838151811061230a5761230a6135d2565b6020026020010151602001518281518110612327576123276135d2565b6020026020010151846120dc90919063ffffffff16565b92508061234a816137de565b9150506122cf565b508061235d816137de565b9150506122c3565b50919050565b60006123c0826040518060400160405280602081526020017f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c6564815250856001600160a01b031661246b9092919063ffffffff16565b8051909150156120cb57808060200190518101906123de91906130e4565b6120cb5760405162461bcd60e51b815260040161049390613d08565b6001600160a01b0381166124205760405162461bcd60e51b815260040161049390613d4c565b60ca80546001600160a01b0319166001600160a01b0383161790556040517f7aed1d3e8155a07ccf395e44ea3109a0e2d6c9b29bbbe9f142d9790596f4dc8090611d96908390612dee565b60606122698484600085856001600160a01b0385163b61249d5760405162461bcd60e51b815260040161049390613d90565b600080866001600160a01b031685876040516124b99190613dee565b60006040518083038185875af1925050503d80600081146124f6576040519150601f19603f3d011682016040523d82523d6000602084013e6124fb565b606091505b509150915061250b828286612516565b979650505050505050565b60608315612525575081610467565b8251156125355782518084602001fd5b8160405162461bcd60e51b81526004016104939190613e2c565b60006001600160a01b03821661072b565b6125698161254f565b81146108ce57600080fd5b803561072b81612560565b600581106108ce57600080fd5b803561072b8161257f565b80612569565b803561072b81612597565b6000806000606084860312156125c0576125c0600080fd5b60006125cc8686612574565b93505060206125dd8682870161258c565b92505060406125ee8682870161259d565b9150509250925092565b805b82525050565b6020810161072b82846125f8565b60006020828403121561262357612623600080fd5b60006107278484612574565b8015156125fa565b6020810161072b828461262f565b634e487b7160e01b600052604160045260246000fd5b601f19601f83011681018181106001600160401b038211171561268057612680612645565b6040525050565b600061269260405190565b9050612170828261265b565b6001600160401b038116612569565b803561072b8161269e565b60006001600160401b038211156126d1576126d1612645565b5060209081020190565b60006126ee6126e9846126b8565b612687565b8381529050602080820190840283018581111561270d5761270d600080fd5b835b818110156127315780612722888261259d565b8452506020928301920161270f565b5050509392505050565b600082601f83011261274f5761274f600080fd5b81356107278482602086016126db565b60006040828403121561277457612774600080fd5b61277e6040612687565b9050600061278c848461258c565b82525060208201356001600160401b038111156127ab576127ab600080fd5b6127b78482850161273b565b60208301525092915050565b60006127d16126e9846126b8565b838152905060208082019084028301858111156127f0576127f0600080fd5b835b818110156127315780356001600160401b0381111561281357612813600080fd5b808601612820898261275f565b85525050602092830192016127f2565b600082601f83011261284457612844600080fd5b81356107278482602086016127c3565b60006080828403121561286957612869600080fd5b6128736080612687565b905060006128818484612574565b8252506020612892848483016126ad565b60208301525060406128a68482850161259d565b60408301525060608201356001600160401b038111156128c8576128c8600080fd5b6128d484828501612830565b60608301525092915050565b6000602082840312156128f5576128f5600080fd5b81356001600160401b0381111561290e5761290e600080fd5b61072784828501612854565b6000806040838503121561293057612930600080fd5b600061293c8585612574565b925050602061294d8582860161258c565b9150509250929050565b6000806040838503121561296d5761296d600080fd5b60006129798585612574565b925050602061294d8582860161259d565b600061072b8261254f565b6125698161298a565b803561072b81612995565b60008083601f8401126129be576129be600080fd5b5081356001600160401b038111156129d8576129d8600080fd5b6020830191508360018202830111156129f3576129f3600080fd5b9250929050565b60008060008060608587031215612a1357612a13600080fd5b6000612a1f878761299e565b9450506020612a308782880161259d565b93505060408501356001600160401b03811115612a4f57612a4f600080fd5b612a5b878288016129a9565b95989497509550505050565b6125fa8161254f565b6020810161072b8284612a67565b600080600060608486031215612a9657612a96600080fd5b6000612aa2868661299e565b93505060206125dd86828701612574565b60008060008060808587031215612acc57612acc600080fd5b6000612ad88787612574565b9450506020612ae98782880161259d565b9350506040612afa8782880161259d565b9250506060612b0b8782880161259d565b91505092959194509250565b60408101612b2582856125f8565b61046760208301846125f8565b60006001600160401b03821115612b4b57612b4b612645565b601f19601f83011660200192915050565b82818337506000910152565b6000612b766126e984612b32565b905082815260208101848484011115612b9157612b91600080fd5b612b9c848285612b5c565b509392505050565b600082601f830112612bb857612bb8600080fd5b8135610727848260208601612b68565b600060208284031215612bdd57612bdd600080fd5b81356001600160401b03811115612bf657612bf6600080fd5b61072784828501612ba4565b6001600160401b0381166125fa565b634e487b7160e01b600052602160045260246000fd5b600581106108ce576108ce612c11565b8061217081612c27565b600061072b82612c37565b6125fa81612c41565b6000612c6183836125f8565b505060200190565b6000612c73825190565b80845260209384019383018060005b83811015612ca7578151612c968882612c55565b975060208301925050600101612c82565b509495945050505050565b80516000906040840190612cc68582612c4c565b5060208301518482036020860152611bab8282612c69565b60006104678383612cb2565b6000612cf4825190565b80845260208401935083602082028501612d0e8560200190565b8060005b85811015612d435784840389528151612d2b8582612cde565b94506020830160209a909a0199925050600101612d12565b5091979650505050505050565b60808101612d5e8287612a67565b612d6b6020830186612c02565b612d7860408301856125f8565b8181036060830152612d8a8184612cea565b9695505050505050565b600080600060608486031215612dac57612dac600080fd5b6000612db88686612574565b9350506020612dc986828701612574565b92505060406125ee8682870161299e565b600061072b8261298a565b6125fa81612dda565b6020810161072b8284612de5565b805161072b81612995565b600060208284031215612e1c57612e1c600080fd5b60006107278484612dfc565b60608101612e368286612a67565b612e436020830185612c4c565b61226960408301846125f8565b805161072b81612597565b600060208284031215612e7057612e70600080fd5b60006107278484612e50565b60208082527f5061757365723a2063616c6c6572206973206e6f742074686520706175736572910190815260005b5060200190565b6020808252810161072b81612e7c565b601081526000602082016f14185d5cd8589b194e881c185d5cd95960821b81529150612eaa565b6020808252810161072b81612ec1565b601f81526000602082017f5265656e7472616e637947756172643a207265656e7472616e742063616c6c0081529150612eaa565b6020808252810161072b81612ef8565b6000612f46825190565b80845260208401935083602082028501612f608560200190565b8060005b85811015612d435784840389528151612f7d8582612cde565b94506020830160209a909a0199925050600101612f64565b80516000906080840190612fa98582612a67565b506020830151612fbc6020860182612c02565b506040830151612fcf60408601826125f8565b5060608301518482036060860152611bab8282612f3c565b60408101612ff58285612de5565b81810360208301526122698184612f95565b604081016130158285612a67565b6104676020830184612c4c565b60208082527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e657291019081526000612eaa565b6020808252810161072b81613022565b602f81526000602082017f4f776e6572576974686472617761626c653a207769746864726177206e61746981526e1d99481d1bdad95b8819985a5b1959608a1b602082015291505b5060400190565b6020808252810161072b81613064565b60408101612b258285612de5565b801515612569565b805161072b816130d1565b6000602082840312156130f9576130f9600080fd5b600061072784846130d9565b602581526000602082017f447374436861696e5061796d656e743a206e6f6e6578697374656e742070726f8152643b34b232b960d91b602082015291506130ac565b6020808252810161072b81613105565b805161072b81612560565b60006020828403121561317757613177600080fd5b60006107278484613157565b602d81526000602082017f526f75746572577261707065723a2063616c6c6572206973206e6f74206d657381526c39b0b3b2903932b1b2b4bb32b960991b602082015291506130ac565b6020808252810161072b81613183565b601e81526000602082017f447374436861696e5061796d656e743a20696e76616c696420746f6b656e000081529150612eaa565b6020808252810161072b816131dd565b6060810161322f8286612de5565b612e436020830185612a67565b60408101612b258285612a67565b603381526000602082017f447374436861696e5061796d656e743a20696e76616c696420706172616d7320815272199bdc88195e1c1a5c9959081858d8dbdd5b9d606a1b602082015291506130ac565b6020808252810161072b8161324a565b601f81526000602082017f447374436861696e5061796d656e743a20696e76616c696420706172616d730081529150612eaa565b6020808252810161072b816132aa565b805161072b8161269e565b805161072b8161257f565b60006133126126e9846126b8565b8381529050602080820190840283018581111561333157613331600080fd5b835b8181101561273157806133468882612e50565b84525060209283019201613333565b600082601f83011261336957613369600080fd5b8151610727848260208601613304565b60006040828403121561338e5761338e600080fd5b6133986040612687565b905060006133a684846132f9565b82525060208201516001600160401b038111156133c5576133c5600080fd5b6127b784828501613355565b60006133df6126e9846126b8565b838152905060208082019084028301858111156133fe576133fe600080fd5b835b818110156127315780516001600160401b0381111561342157613421600080fd5b80860161342e8982613379565b8552505060209283019201613400565b600082601f83011261345257613452600080fd5b81516107278482602086016133d1565b6000806000806080858703121561347b5761347b600080fd5b60006134878787613157565b9450506020613498878288016132ee565b93505060406134a987828801612e50565b92505060608501516001600160401b038111156134c8576134c8600080fd5b612b0b8782880161343e565b600060ff821661072b565b6125fa816134d4565b6020810161072b82846134df565b602681526000602082017f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206181526564647265737360d01b602082015291506130ac565b6020808252810161072b816134f6565b601481526000602082017314185d5cd8589b194e881b9bdd081c185d5cd95960621b81529150612eaa565b6020808252810161072b81613549565b602181526000602082017f447374436861696e5061796d656e743a20696e76616c6964207061796c6f61648152607360f81b602082015291506130ac565b6020808252810161072b81613584565b634e487b7160e01b600052603260045260246000fd5b60368152600060208201600080516020613e3e833981519152815275656e67746820666f72204275696c64696e6754696d6560501b602082015291506130ac565b6020808252810161072b816135e8565b606081016136478286612a67565b612e4360208301856125f8565b60338152600060208201600080516020613e3e833981519152815272656e67746820666f7220415253746f7261676560681b602082015291506130ac565b6020808252810161072b81613654565b60338152600060208201600080516020613e3e8339815191528152720cadccee8d040ccdee44084c2dcc8eed2c8e8d606b1b602082015291506130ac565b6020808252810161072b816136a2565b60358152600060208201600080516020613e3e833981519152815274656e67746820666f72204950465353746f7261676560581b602082015291506130ac565b6020808252810161072b816136f0565b6080810161374e8287612a67565b61375b60208301866125f8565b61376860408301856125f8565b611bab60608301846125f8565b602681526000602082017f447374436861696e5061796d656e743a20756e6b6e6f776e207265736f75726381526565207479706560d01b602082015291506130ac565b6020808252810161072b81613775565b634e487b7160e01b600052601160045260246000fd5b60006000198214156137f2576137f26137c8565b5060010190565b80825b600185111561383857808604811115613817576138176137c8565b600185161561382557908102905b80026138318560011c90565b94506137fc565b94509492505050565b60008261385057506001610467565b8161385d57506000610467565b8160018114613873576002811461387d576138aa565b6001915050610467565b60ff84111561388e5761388e6137c8565b8360020a9150848211156138a4576138a46137c8565b50610467565b5060208310610133831016604e8410600b84101617156138dd575081810a838111156138d8576138d86137c8565b610467565b6138ea84848460016137f9565b92509050818404811115613900576139006137c8565b0292915050565b60006104676000198484613841565b602481526000602082017f447374436861696e5061796d656e743a206e6f6e6578697374656e74206163638152631bdd5b9d60e21b602082015291506130ac565b6020808252810161072b81613916565b601d81526000602082017f5061757365723a206163636f756e74206973206e6f742070617573657200000081529150612eaa565b6020808252810161072b81613967565b602481526000602082017f5265736f75726365446174613a20696e76616c6964207061796c6f6164206c658152630dccee8d60e31b602082015291506130ac565b6020808252810161072b816139ab565b601e81526000602082017f5265736f75726365446174613a207a65726f20746f74616c2076616c7565000081529150612eaa565b6020808252810161072b816139fc565b602281526000602082017f5265736f75726365446174613a20696e76616c69642076616c7565206c656e678152610e8d60f31b602082015291506130ac565b6020808252810161072b81613a40565b602181526000602082017f5061757365723a206163636f756e7420697320616c72656164792070617573658152603960f91b602082015291506130ac565b6020808252810161072b81613a8f565b6000816000190483118215151615613af757613af76137c8565b500290565b60008219821115613b0f57613b0f6137c8565b500190565b602e81526000602082017f496e697469616c697a61626c653a20636f6e747261637420697320616c72656181526d191e481a5b9a5d1a585b1a5e995960921b602082015291506130ac565b6020808252810161072b81613b14565b602b81526000602082017f496e697469616c697a61626c653a20636f6e7472616374206973206e6f74206981526a6e697469616c697a696e6760a81b602082015291506130ac565b6020808252810161072b81613b6f565b634e487b7160e01b600052601260045260246000fd5b600082613bec57613bec613bc7565b500490565b63313ce56760e01b815260006004820161072b565b601b81526000602082017f5265736f75726365446174613a20696e76616c696420746f6b656e000000000081529150612eaa565b6020808252810161072b81613c06565b600082821015613c5c57613c5c6137c8565b500390565b6060810161322f8286612a67565b602581526000602082017f5265736f75726365446174613a20696e76616c6964207061796c6f616473206c8152640cadccee8d60db1b602082015291506130ac565b6020808252810161072b81613c6f565b602a81526000602082017f5361666545524332303a204552433230206f7065726174696f6e20646964206e8152691bdd081cdd58d8d9595960b21b602082015291506130ac565b6020808252810161072b81613cc1565b601b81526000602082017f526f75746572577261707065723a207a65726f2061646472657373000000000081529150612eaa565b6020808252810161072b81613d18565b601d81526000602082017f416464726573733a2063616c6c20746f206e6f6e2d636f6e747261637400000081529150612eaa565b6020808252810161072b81613d5c565b60005b83811015613dbb578181015183820152602001613da3565b8381111561114c5750506000910152565b6000613dd6825190565b613de4818560208601613da0565b9290920192915050565b60006104678284613dcc565b6000613e04825190565b808452602084019350613e1b818560208601613da0565b601f01601f19169290920192915050565b602080825281016104678184613dfa56fe447374436861696e5061796d656e743a20696e76616c69642076616c7565206ca2646970667358221220c35b580bea14a6a184bc6bb94040ef5be30b9afa286243e7812df6d5b40b8f0264736f6c63430008090033",
  "devdoc": {
    "author": "Alexandas",
    "details": "Dst chain payment contract",
    "kind": "dev",
    "methods": {
      "addPauser(address)": {
        "details": "add a pauser for the contract",
        "params": {
          "account": "address"
        }
      },
      "balanceOf(address)": {
        "details": "return balance of provider",
        "params": {
          "provider": "provider address"
        },
        "returns": {
          "_0": "balance of provider"
        }
      },
      "decodeSourceChainMessage(bytes)": {
        "details": "decode source chain message",
        "params": {
          "message": "message bytes"
        },
        "returns": {
          "account": "user account",
          "nonce": "nonce",
          "payloads": "payment payloads",
          "provider": "provider address"
        }
      },
      "getAmountOf(address,uint8,uint256)": {
        "details": "return resource amount with value",
        "params": {
          "provider": "provider address",
          "resourceType": "resource type",
          "value": "token value"
        },
        "returns": {
          "_0": "resource amount"
        }
      },
      "getValueOf(address,uint8,uint256)": {
        "details": "return value of amount resource",
        "params": {
          "amount": "resource amount",
          "provider": "provider address",
          "resourceType": "resource type"
        },
        "returns": {
          "_0": "token value"
        }
      },
      "initialize(address,address,address)": {
        "details": "proxy initialize function",
        "params": {
          "owner": "contract owner",
          "pauser": "contract pauser",
          "router": "router contract"
        }
      },
      "ipfsAllocations(address,bytes32,uint256,uint256)": {
        "details": "calculate ipfs storage and expiration with storage fee and expiration fee",
        "params": {
          "account": "user account",
          "expirationFee": "expiration fee",
          "provider": "provider address",
          "storageFee": "storage fee"
        },
        "returns": {
          "amount": "ipfs storage amount",
          "expiration": "ipfs expiration(in seconds)"
        }
      },
      "ipfsAlloctionsFee(address,bytes32,uint256,uint256)": {
        "details": "calculate fee for ipfs storage and expiration",
        "params": {
          "account": "user account",
          "amount": "ipfs storage amount",
          "expiration": "ipfs expiration(in seconds)",
          "provider": "provider address"
        },
        "returns": {
          "expirationFee": "ipfs expiration fee",
          "storageFee": "ipfs storage fee"
        }
      },
      "isPauser(address)": {
        "details": "whether the account is the contract pauser",
        "params": {
          "account": "address"
        },
        "returns": {
          "_0": "whether account is a pauser"
        }
      },
      "owner()": {
        "details": "Returns the address of the current owner."
      },
      "ownerWithdrawERC20(address,address,uint256)": {
        "details": "withdraw token",
        "params": {
          "to": "receiver address",
          "token": "token address",
          "value": "token value"
        }
      },
      "ownerWithdrawNative(address,uint256)": {
        "details": "withdraw ETH",
        "params": {
          "to": "receiver address",
          "value": "token value"
        }
      },
      "pause()": {
        "details": "pause the contract"
      },
      "paused()": {
        "details": "Returns true if the contract is paused, and false otherwise."
      },
      "pay((address,uint64,bytes32,(uint8,uint256[])[]))": {
        "details": "pay on dst chain",
        "params": {
          "payload": "payment payload"
        },
        "returns": {
          "value": "payment value"
        }
      },
      "payFromSourceChain(address,uint256,bytes)": {
        "details": "pay from source chain only called by message receiver",
        "params": {
          "_token": "token address",
          "dstAmount": "token amount",
          "message": "payment payload message bytes"
        }
      },
      "priceOf(address,uint8)": {
        "details": "return resource price",
        "params": {
          "provider": "provider address",
          "resourceType": "resource type"
        },
        "returns": {
          "_0": "resource price"
        }
      },
      "removePauser(address)": {
        "details": "remove a pauser for the contract",
        "params": {
          "account": "address"
        }
      },
      "renounceOwnership()": {
        "details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner."
      },
      "renouncePauser()": {
        "details": "remove a pauser for the contract"
      },
      "transferOwnership(address)": {
        "details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
      },
      "unpause()": {
        "details": "unpause the contract"
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 147,
        "contract": "contracts/payments/DstChainPayment.sol:DstChainPayment",
        "label": "_initialized",
        "offset": 0,
        "slot": "0",
        "type": "t_uint8"
      },
      {
        "astId": 150,
        "contract": "contracts/payments/DstChainPayment.sol:DstChainPayment",
        "label": "_initializing",
        "offset": 1,
        "slot": "0",
        "type": "t_bool"
      },
      {
        "astId": 407,
        "contract": "contracts/payments/DstChainPayment.sol:DstChainPayment",
        "label": "_status",
        "offset": 0,
        "slot": "1",
        "type": "t_uint256"
      },
      {
        "astId": 451,
        "contract": "contracts/payments/DstChainPayment.sol:DstChainPayment",
        "label": "__gap",
        "offset": 0,
        "slot": "2",
        "type": "t_array(t_uint256)49_storage"
      },
      {
        "astId": 1038,
        "contract": "contracts/payments/DstChainPayment.sol:DstChainPayment",
        "label": "__gap",
        "offset": 0,
        "slot": "51",
        "type": "t_array(t_uint256)50_storage"
      },
      {
        "astId": 10,
        "contract": "contracts/payments/DstChainPayment.sol:DstChainPayment",
        "label": "_owner",
        "offset": 0,
        "slot": "101",
        "type": "t_address"
      },
      {
        "astId": 122,
        "contract": "contracts/payments/DstChainPayment.sol:DstChainPayment",
        "label": "__gap",
        "offset": 0,
        "slot": "102",
        "type": "t_array(t_uint256)49_storage"
      },
      {
        "astId": 303,
        "contract": "contracts/payments/DstChainPayment.sol:DstChainPayment",
        "label": "_paused",
        "offset": 0,
        "slot": "151",
        "type": "t_bool"
      },
      {
        "astId": 392,
        "contract": "contracts/payments/DstChainPayment.sol:DstChainPayment",
        "label": "__gap",
        "offset": 0,
        "slot": "152",
        "type": "t_array(t_uint256)49_storage"
      },
      {
        "astId": 3817,
        "contract": "contracts/payments/DstChainPayment.sol:DstChainPayment",
        "label": "pausers",
        "offset": 0,
        "slot": "201",
        "type": "t_mapping(t_address,t_bool)"
      },
      {
        "astId": 5834,
        "contract": "contracts/payments/DstChainPayment.sol:DstChainPayment",
        "label": "router",
        "offset": 0,
        "slot": "202",
        "type": "t_contract(IRouter)6848"
      },
      {
        "astId": 8357,
        "contract": "contracts/payments/DstChainPayment.sol:DstChainPayment",
        "label": "balances",
        "offset": 0,
        "slot": "203",
        "type": "t_mapping(t_address,t_uint256)"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_uint256)49_storage": {
        "base": "t_uint256",
        "encoding": "inplace",
        "label": "uint256[49]",
        "numberOfBytes": "1568"
      },
      "t_array(t_uint256)50_storage": {
        "base": "t_uint256",
        "encoding": "inplace",
        "label": "uint256[50]",
        "numberOfBytes": "1600"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_contract(IRouter)6848": {
        "encoding": "inplace",
        "label": "contract IRouter",
        "numberOfBytes": "20"
      },
      "t_mapping(t_address,t_bool)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      },
      "t_mapping(t_address,t_uint256)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      },
      "t_uint8": {
        "encoding": "inplace",
        "label": "uint8",
        "numberOfBytes": "1"
      }
    }
  }
}