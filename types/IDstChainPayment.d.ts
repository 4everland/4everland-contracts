/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction,
  BaseContract,
  ContractTransaction,
  Overrides,
  CallOverrides,
} from "ethers";
import { BytesLike } from "@ethersproject/bytes";
import { Listener, Provider } from "@ethersproject/providers";
import { FunctionFragment, EventFragment, Result } from "@ethersproject/abi";
import type { TypedEventFilter, TypedEvent, TypedListener } from "./common";

interface IDstChainPaymentInterface extends ethers.utils.Interface {
  functions: {
    "balanceOf(address)": FunctionFragment;
    "celerExec(bytes)": FunctionFragment;
    "getAmountOf(address,uint8,uint256)": FunctionFragment;
    "getValueOf(address,uint8,uint256)": FunctionFragment;
    "ipfsAllocations(address,bytes32,uint256,uint256)": FunctionFragment;
    "ipfsAlloctionsFee(address,bytes32,uint256,uint256)": FunctionFragment;
    "payV3(address,bytes32,tuple[],uint256,uint256,bytes)": FunctionFragment;
    "priceOf(address,uint8)": FunctionFragment;
  };

  encodeFunctionData(functionFragment: "balanceOf", values: [string]): string;
  encodeFunctionData(
    functionFragment: "celerExec",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "getAmountOf",
    values: [string, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getValueOf",
    values: [string, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "ipfsAllocations",
    values: [string, BytesLike, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "ipfsAlloctionsFee",
    values: [string, BytesLike, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "payV3",
    values: [
      string,
      BytesLike,
      { resourceType: BigNumberish; values: BigNumberish[] }[],
      BigNumberish,
      BigNumberish,
      BytesLike
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "priceOf",
    values: [string, BigNumberish]
  ): string;

  decodeFunctionResult(functionFragment: "balanceOf", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "celerExec", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getAmountOf",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "getValueOf", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "ipfsAllocations",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "ipfsAlloctionsFee",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "payV3", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "priceOf", data: BytesLike): Result;

  events: {
    "PaidV3(address,bytes32,tuple[],uint256,uint256,uint256)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "PaidV3"): EventFragment;
}

export type PaidV3Event = TypedEvent<
  [
    string,
    string,
    ([number, BigNumber[]] & { resourceType: number; values: BigNumber[] })[],
    BigNumber,
    BigNumber,
    BigNumber
  ] & {
    provider: string;
    account: string;
    payloads: ([number, BigNumber[]] & {
      resourceType: number;
      values: BigNumber[];
    })[];
    value: BigNumber;
    nonce: BigNumber;
    amount: BigNumber;
  }
>;

export class IDstChainPayment extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  listeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter?: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): Array<TypedListener<EventArgsArray, EventArgsObject>>;
  off<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  on<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  once<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeListener<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeAllListeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): this;

  listeners(eventName?: string): Array<Listener>;
  off(eventName: string, listener: Listener): this;
  on(eventName: string, listener: Listener): this;
  once(eventName: string, listener: Listener): this;
  removeListener(eventName: string, listener: Listener): this;
  removeAllListeners(eventName?: string): this;

  queryFilter<EventArgsArray extends Array<any>, EventArgsObject>(
    event: TypedEventFilter<EventArgsArray, EventArgsObject>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEvent<EventArgsArray & EventArgsObject>>>;

  interface: IDstChainPaymentInterface;

  functions: {
    balanceOf(
      provider: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    celerExec(
      message: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    getAmountOf(
      provider: string,
      resourceType: BigNumberish,
      value: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    getValueOf(
      provider: string,
      resourceType: BigNumberish,
      amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    ipfsAllocations(
      provider: string,
      account: BytesLike,
      storageFee: BigNumberish,
      expirationFee: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber] & { amount: BigNumber; expiration: BigNumber }
    >;

    ipfsAlloctionsFee(
      provider: string,
      account: BytesLike,
      amount: BigNumberish,
      expiration: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber] & {
        storageFee: BigNumber;
        expirationFee: BigNumber;
      }
    >;

    payV3(
      provider: string,
      account: BytesLike,
      payloads: { resourceType: BigNumberish; values: BigNumberish[] }[],
      nonce: BigNumberish,
      amount: BigNumberish,
      signature: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    priceOf(
      provider: string,
      resourceType: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;
  };

  balanceOf(provider: string, overrides?: CallOverrides): Promise<BigNumber>;

  celerExec(
    message: BytesLike,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  getAmountOf(
    provider: string,
    resourceType: BigNumberish,
    value: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  getValueOf(
    provider: string,
    resourceType: BigNumberish,
    amount: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  ipfsAllocations(
    provider: string,
    account: BytesLike,
    storageFee: BigNumberish,
    expirationFee: BigNumberish,
    overrides?: CallOverrides
  ): Promise<
    [BigNumber, BigNumber] & { amount: BigNumber; expiration: BigNumber }
  >;

  ipfsAlloctionsFee(
    provider: string,
    account: BytesLike,
    amount: BigNumberish,
    expiration: BigNumberish,
    overrides?: CallOverrides
  ): Promise<
    [BigNumber, BigNumber] & { storageFee: BigNumber; expirationFee: BigNumber }
  >;

  payV3(
    provider: string,
    account: BytesLike,
    payloads: { resourceType: BigNumberish; values: BigNumberish[] }[],
    nonce: BigNumberish,
    amount: BigNumberish,
    signature: BytesLike,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  priceOf(
    provider: string,
    resourceType: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  callStatic: {
    balanceOf(provider: string, overrides?: CallOverrides): Promise<BigNumber>;

    celerExec(message: BytesLike, overrides?: CallOverrides): Promise<void>;

    getAmountOf(
      provider: string,
      resourceType: BigNumberish,
      value: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getValueOf(
      provider: string,
      resourceType: BigNumberish,
      amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    ipfsAllocations(
      provider: string,
      account: BytesLike,
      storageFee: BigNumberish,
      expirationFee: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber] & { amount: BigNumber; expiration: BigNumber }
    >;

    ipfsAlloctionsFee(
      provider: string,
      account: BytesLike,
      amount: BigNumberish,
      expiration: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber] & {
        storageFee: BigNumber;
        expirationFee: BigNumber;
      }
    >;

    payV3(
      provider: string,
      account: BytesLike,
      payloads: { resourceType: BigNumberish; values: BigNumberish[] }[],
      nonce: BigNumberish,
      amount: BigNumberish,
      signature: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    priceOf(
      provider: string,
      resourceType: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;
  };

  filters: {
    "PaidV3(address,bytes32,tuple[],uint256,uint256,uint256)"(
      provider?: null,
      account?: null,
      payloads?: null,
      value?: null,
      nonce?: null,
      amount?: null
    ): TypedEventFilter<
      [
        string,
        string,
        ([number, BigNumber[]] & {
          resourceType: number;
          values: BigNumber[];
        })[],
        BigNumber,
        BigNumber,
        BigNumber
      ],
      {
        provider: string;
        account: string;
        payloads: ([number, BigNumber[]] & {
          resourceType: number;
          values: BigNumber[];
        })[];
        value: BigNumber;
        nonce: BigNumber;
        amount: BigNumber;
      }
    >;

    PaidV3(
      provider?: null,
      account?: null,
      payloads?: null,
      value?: null,
      nonce?: null,
      amount?: null
    ): TypedEventFilter<
      [
        string,
        string,
        ([number, BigNumber[]] & {
          resourceType: number;
          values: BigNumber[];
        })[],
        BigNumber,
        BigNumber,
        BigNumber
      ],
      {
        provider: string;
        account: string;
        payloads: ([number, BigNumber[]] & {
          resourceType: number;
          values: BigNumber[];
        })[];
        value: BigNumber;
        nonce: BigNumber;
        amount: BigNumber;
      }
    >;
  };

  estimateGas: {
    balanceOf(provider: string, overrides?: CallOverrides): Promise<BigNumber>;

    celerExec(
      message: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    getAmountOf(
      provider: string,
      resourceType: BigNumberish,
      value: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getValueOf(
      provider: string,
      resourceType: BigNumberish,
      amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    ipfsAllocations(
      provider: string,
      account: BytesLike,
      storageFee: BigNumberish,
      expirationFee: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    ipfsAlloctionsFee(
      provider: string,
      account: BytesLike,
      amount: BigNumberish,
      expiration: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    payV3(
      provider: string,
      account: BytesLike,
      payloads: { resourceType: BigNumberish; values: BigNumberish[] }[],
      nonce: BigNumberish,
      amount: BigNumberish,
      signature: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    priceOf(
      provider: string,
      resourceType: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    balanceOf(
      provider: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    celerExec(
      message: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    getAmountOf(
      provider: string,
      resourceType: BigNumberish,
      value: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getValueOf(
      provider: string,
      resourceType: BigNumberish,
      amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    ipfsAllocations(
      provider: string,
      account: BytesLike,
      storageFee: BigNumberish,
      expirationFee: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    ipfsAlloctionsFee(
      provider: string,
      account: BytesLike,
      amount: BigNumberish,
      expiration: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    payV3(
      provider: string,
      account: BytesLike,
      payloads: { resourceType: BigNumberish; values: BigNumberish[] }[],
      nonce: BigNumberish,
      amount: BigNumberish,
      signature: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    priceOf(
      provider: string,
      resourceType: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;
  };
}
