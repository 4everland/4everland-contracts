/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction,
  BaseContract,
  ContractTransaction,
  Overrides,
  CallOverrides,
} from "ethers";
import { BytesLike } from "@ethersproject/bytes";
import { Listener, Provider } from "@ethersproject/providers";
import { FunctionFragment, EventFragment, Result } from "@ethersproject/abi";
import type { TypedEventFilter, TypedEvent, TypedListener } from "./common";

interface INormalResourceControllerInterface extends ethers.utils.Interface {
  functions: {
    "allocateProvider(address,uint256)": FunctionFragment;
    "balanceOf(address,bytes32)": FunctionFragment;
    "drip(address,bytes32,uint256)": FunctionFragment;
    "paymentAllocate(address,bytes32,uint256)": FunctionFragment;
    "providerBalanceOf(address)": FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: "allocateProvider",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "balanceOf",
    values: [string, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "drip",
    values: [string, BytesLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "paymentAllocate",
    values: [string, BytesLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "providerBalanceOf",
    values: [string]
  ): string;

  decodeFunctionResult(
    functionFragment: "allocateProvider",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "balanceOf", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "drip", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "paymentAllocate",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "providerBalanceOf",
    data: BytesLike
  ): Result;

  events: {
    "AccountAllocated(address,bytes32,uint256)": EventFragment;
    "ProviderAllocated(address,uint256)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "AccountAllocated"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "ProviderAllocated"): EventFragment;
}

export type AccountAllocatedEvent = TypedEvent<
  [string, string, BigNumber] & {
    provider: string;
    account: string;
    amount: BigNumber;
  }
>;

export type ProviderAllocatedEvent = TypedEvent<
  [string, BigNumber] & { provider: string; amount: BigNumber }
>;

export class INormalResourceController extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  listeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter?: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): Array<TypedListener<EventArgsArray, EventArgsObject>>;
  off<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  on<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  once<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeListener<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeAllListeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): this;

  listeners(eventName?: string): Array<Listener>;
  off(eventName: string, listener: Listener): this;
  on(eventName: string, listener: Listener): this;
  once(eventName: string, listener: Listener): this;
  removeListener(eventName: string, listener: Listener): this;
  removeAllListeners(eventName?: string): this;

  queryFilter<EventArgsArray extends Array<any>, EventArgsObject>(
    event: TypedEventFilter<EventArgsArray, EventArgsObject>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEvent<EventArgsArray & EventArgsObject>>>;

  interface: INormalResourceControllerInterface;

  functions: {
    allocateProvider(
      provider: string,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    balanceOf(
      provider: string,
      account: BytesLike,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    drip(
      provider: string,
      account: BytesLike,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    paymentAllocate(
      provider: string,
      account: BytesLike,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    providerBalanceOf(
      provider: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;
  };

  allocateProvider(
    provider: string,
    amount: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  balanceOf(
    provider: string,
    account: BytesLike,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  drip(
    provider: string,
    account: BytesLike,
    amount: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  paymentAllocate(
    provider: string,
    account: BytesLike,
    amount: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  providerBalanceOf(
    provider: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  callStatic: {
    allocateProvider(
      provider: string,
      amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    balanceOf(
      provider: string,
      account: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    drip(
      provider: string,
      account: BytesLike,
      amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    paymentAllocate(
      provider: string,
      account: BytesLike,
      amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    providerBalanceOf(
      provider: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;
  };

  filters: {
    "AccountAllocated(address,bytes32,uint256)"(
      provider?: null,
      account?: null,
      amount?: null
    ): TypedEventFilter<
      [string, string, BigNumber],
      { provider: string; account: string; amount: BigNumber }
    >;

    AccountAllocated(
      provider?: null,
      account?: null,
      amount?: null
    ): TypedEventFilter<
      [string, string, BigNumber],
      { provider: string; account: string; amount: BigNumber }
    >;

    "ProviderAllocated(address,uint256)"(
      provider?: null,
      amount?: null
    ): TypedEventFilter<
      [string, BigNumber],
      { provider: string; amount: BigNumber }
    >;

    ProviderAllocated(
      provider?: null,
      amount?: null
    ): TypedEventFilter<
      [string, BigNumber],
      { provider: string; amount: BigNumber }
    >;
  };

  estimateGas: {
    allocateProvider(
      provider: string,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    balanceOf(
      provider: string,
      account: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    drip(
      provider: string,
      account: BytesLike,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    paymentAllocate(
      provider: string,
      account: BytesLike,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    providerBalanceOf(
      provider: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    allocateProvider(
      provider: string,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    balanceOf(
      provider: string,
      account: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    drip(
      provider: string,
      account: BytesLike,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    paymentAllocate(
      provider: string,
      account: BytesLike,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    providerBalanceOf(
      provider: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;
  };
}
