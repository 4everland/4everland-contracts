/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction,
  BaseContract,
  ContractTransaction,
  PayableOverrides,
  CallOverrides,
} from "ethers";
import { BytesLike } from "@ethersproject/bytes";
import { Listener, Provider } from "@ethersproject/providers";
import { FunctionFragment, EventFragment, Result } from "@ethersproject/abi";
import type { TypedEventFilter, TypedEvent, TypedListener } from "./common";

interface IRechargeMessageSenderInterface extends ethers.utils.Interface {
  functions: {
    "calcFee(bytes)": FunctionFragment;
    "dstChainId()": FunctionFragment;
    "messageId((address,address,uint64,bytes32),uint64,bytes)": FunctionFragment;
    "receiver()": FunctionFragment;
    "sendMessageWithTransfer(address,uint256,uint64,uint32,bytes)": FunctionFragment;
  };

  encodeFunctionData(functionFragment: "calcFee", values: [BytesLike]): string;
  encodeFunctionData(
    functionFragment: "dstChainId",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "messageId",
    values: [
      {
        sender: string;
        receiver: string;
        srcChainId: BigNumberish;
        srcTxHash: BytesLike;
      },
      BigNumberish,
      BytesLike
    ]
  ): string;
  encodeFunctionData(functionFragment: "receiver", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "sendMessageWithTransfer",
    values: [string, BigNumberish, BigNumberish, BigNumberish, BytesLike]
  ): string;

  decodeFunctionResult(functionFragment: "calcFee", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "dstChainId", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "messageId", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "receiver", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "sendMessageWithTransfer",
    data: BytesLike
  ): Result;

  events: {
    "DstChainIdUpdated(uint64)": EventFragment;
    "ExecutorUpdated(address)": EventFragment;
    "MessageBusUpdated(address)": EventFragment;
    "MessageWithTransferFailed(address,address,uint256,uint64,bytes,address,bytes)": EventFragment;
    "MessageWithTransferFallback(address,address,uint256,uint64,bytes,address)": EventFragment;
    "MessageWithTransferRefund(address,uint256,bytes,address)": EventFragment;
    "MessageWithTransferSent(address,address,address,uint256,uint64,uint64,uint64,uint32,bytes)": EventFragment;
    "ReceiverUpdated(address)": EventFragment;
    "SrcChainRechargeUpdated(address)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "DstChainIdUpdated"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "ExecutorUpdated"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "MessageBusUpdated"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "MessageWithTransferFailed"): EventFragment;
  getEvent(
    nameOrSignatureOrTopic: "MessageWithTransferFallback"
  ): EventFragment;
  getEvent(nameOrSignatureOrTopic: "MessageWithTransferRefund"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "MessageWithTransferSent"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "ReceiverUpdated"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "SrcChainRechargeUpdated"): EventFragment;
}

export type DstChainIdUpdatedEvent = TypedEvent<
  [BigNumber] & { dstChainId: BigNumber }
>;

export type ExecutorUpdatedEvent = TypedEvent<[string] & { executor: string }>;

export type MessageBusUpdatedEvent = TypedEvent<
  [string] & { messageBus: string }
>;

export type MessageWithTransferFailedEvent = TypedEvent<
  [string, string, BigNumber, BigNumber, string, string, string] & {
    sender: string;
    token: string;
    amount: BigNumber;
    srcChainId: BigNumber;
    message: string;
    executor: string;
    error: string;
  }
>;

export type MessageWithTransferFallbackEvent = TypedEvent<
  [string, string, BigNumber, BigNumber, string, string] & {
    _sender: string;
    _token: string;
    _amount: BigNumber;
    _srcChainId: BigNumber;
    _message: string;
    executor: string;
  }
>;

export type MessageWithTransferRefundEvent = TypedEvent<
  [string, BigNumber, string, string] & {
    token: string;
    amount: BigNumber;
    message: string;
    executor: string;
  }
>;

export type MessageWithTransferSentEvent = TypedEvent<
  [
    string,
    string,
    string,
    BigNumber,
    BigNumber,
    BigNumber,
    BigNumber,
    number,
    string
  ] & {
    sender: string;
    receiver: string;
    token: string;
    amount: BigNumber;
    srcChainId: BigNumber;
    dstChainId: BigNumber;
    nonce: BigNumber;
    maxSlippage: number;
    message: string;
  }
>;

export type ReceiverUpdatedEvent = TypedEvent<[string] & { receiver: string }>;

export type SrcChainRechargeUpdatedEvent = TypedEvent<
  [string] & { recharge: string }
>;

export class IRechargeMessageSender extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  listeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter?: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): Array<TypedListener<EventArgsArray, EventArgsObject>>;
  off<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  on<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  once<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeListener<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeAllListeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): this;

  listeners(eventName?: string): Array<Listener>;
  off(eventName: string, listener: Listener): this;
  on(eventName: string, listener: Listener): this;
  once(eventName: string, listener: Listener): this;
  removeListener(eventName: string, listener: Listener): this;
  removeAllListeners(eventName?: string): this;

  queryFilter<EventArgsArray extends Array<any>, EventArgsObject>(
    event: TypedEventFilter<EventArgsArray, EventArgsObject>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEvent<EventArgsArray & EventArgsObject>>>;

  interface: IRechargeMessageSenderInterface;

  functions: {
    calcFee(
      message: BytesLike,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    dstChainId(overrides?: CallOverrides): Promise<[BigNumber]>;

    messageId(
      route: {
        sender: string;
        receiver: string;
        srcChainId: BigNumberish;
        srcTxHash: BytesLike;
      },
      dstChainId: BigNumberish,
      message: BytesLike,
      overrides?: CallOverrides
    ): Promise<[string]>;

    receiver(overrides?: CallOverrides): Promise<[string]>;

    sendMessageWithTransfer(
      token: string,
      amount: BigNumberish,
      nonce: BigNumberish,
      maxSlippage: BigNumberish,
      message: BytesLike,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;
  };

  calcFee(message: BytesLike, overrides?: CallOverrides): Promise<BigNumber>;

  dstChainId(overrides?: CallOverrides): Promise<BigNumber>;

  messageId(
    route: {
      sender: string;
      receiver: string;
      srcChainId: BigNumberish;
      srcTxHash: BytesLike;
    },
    dstChainId: BigNumberish,
    message: BytesLike,
    overrides?: CallOverrides
  ): Promise<string>;

  receiver(overrides?: CallOverrides): Promise<string>;

  sendMessageWithTransfer(
    token: string,
    amount: BigNumberish,
    nonce: BigNumberish,
    maxSlippage: BigNumberish,
    message: BytesLike,
    overrides?: PayableOverrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    calcFee(message: BytesLike, overrides?: CallOverrides): Promise<BigNumber>;

    dstChainId(overrides?: CallOverrides): Promise<BigNumber>;

    messageId(
      route: {
        sender: string;
        receiver: string;
        srcChainId: BigNumberish;
        srcTxHash: BytesLike;
      },
      dstChainId: BigNumberish,
      message: BytesLike,
      overrides?: CallOverrides
    ): Promise<string>;

    receiver(overrides?: CallOverrides): Promise<string>;

    sendMessageWithTransfer(
      token: string,
      amount: BigNumberish,
      nonce: BigNumberish,
      maxSlippage: BigNumberish,
      message: BytesLike,
      overrides?: CallOverrides
    ): Promise<void>;
  };

  filters: {
    "DstChainIdUpdated(uint64)"(
      dstChainId?: null
    ): TypedEventFilter<[BigNumber], { dstChainId: BigNumber }>;

    DstChainIdUpdated(
      dstChainId?: null
    ): TypedEventFilter<[BigNumber], { dstChainId: BigNumber }>;

    "ExecutorUpdated(address)"(
      executor?: null
    ): TypedEventFilter<[string], { executor: string }>;

    ExecutorUpdated(
      executor?: null
    ): TypedEventFilter<[string], { executor: string }>;

    "MessageBusUpdated(address)"(
      messageBus?: null
    ): TypedEventFilter<[string], { messageBus: string }>;

    MessageBusUpdated(
      messageBus?: null
    ): TypedEventFilter<[string], { messageBus: string }>;

    "MessageWithTransferFailed(address,address,uint256,uint64,bytes,address,bytes)"(
      sender?: null,
      token?: null,
      amount?: null,
      srcChainId?: null,
      message?: null,
      executor?: null,
      error?: null
    ): TypedEventFilter<
      [string, string, BigNumber, BigNumber, string, string, string],
      {
        sender: string;
        token: string;
        amount: BigNumber;
        srcChainId: BigNumber;
        message: string;
        executor: string;
        error: string;
      }
    >;

    MessageWithTransferFailed(
      sender?: null,
      token?: null,
      amount?: null,
      srcChainId?: null,
      message?: null,
      executor?: null,
      error?: null
    ): TypedEventFilter<
      [string, string, BigNumber, BigNumber, string, string, string],
      {
        sender: string;
        token: string;
        amount: BigNumber;
        srcChainId: BigNumber;
        message: string;
        executor: string;
        error: string;
      }
    >;

    "MessageWithTransferFallback(address,address,uint256,uint64,bytes,address)"(
      _sender?: null,
      _token?: null,
      _amount?: null,
      _srcChainId?: null,
      _message?: null,
      executor?: null
    ): TypedEventFilter<
      [string, string, BigNumber, BigNumber, string, string],
      {
        _sender: string;
        _token: string;
        _amount: BigNumber;
        _srcChainId: BigNumber;
        _message: string;
        executor: string;
      }
    >;

    MessageWithTransferFallback(
      _sender?: null,
      _token?: null,
      _amount?: null,
      _srcChainId?: null,
      _message?: null,
      executor?: null
    ): TypedEventFilter<
      [string, string, BigNumber, BigNumber, string, string],
      {
        _sender: string;
        _token: string;
        _amount: BigNumber;
        _srcChainId: BigNumber;
        _message: string;
        executor: string;
      }
    >;

    "MessageWithTransferRefund(address,uint256,bytes,address)"(
      token?: null,
      amount?: null,
      message?: null,
      executor?: null
    ): TypedEventFilter<
      [string, BigNumber, string, string],
      { token: string; amount: BigNumber; message: string; executor: string }
    >;

    MessageWithTransferRefund(
      token?: null,
      amount?: null,
      message?: null,
      executor?: null
    ): TypedEventFilter<
      [string, BigNumber, string, string],
      { token: string; amount: BigNumber; message: string; executor: string }
    >;

    "MessageWithTransferSent(address,address,address,uint256,uint64,uint64,uint64,uint32,bytes)"(
      sender?: null,
      receiver?: null,
      token?: null,
      amount?: null,
      srcChainId?: null,
      dstChainId?: null,
      nonce?: null,
      maxSlippage?: null,
      message?: null
    ): TypedEventFilter<
      [
        string,
        string,
        string,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        number,
        string
      ],
      {
        sender: string;
        receiver: string;
        token: string;
        amount: BigNumber;
        srcChainId: BigNumber;
        dstChainId: BigNumber;
        nonce: BigNumber;
        maxSlippage: number;
        message: string;
      }
    >;

    MessageWithTransferSent(
      sender?: null,
      receiver?: null,
      token?: null,
      amount?: null,
      srcChainId?: null,
      dstChainId?: null,
      nonce?: null,
      maxSlippage?: null,
      message?: null
    ): TypedEventFilter<
      [
        string,
        string,
        string,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        number,
        string
      ],
      {
        sender: string;
        receiver: string;
        token: string;
        amount: BigNumber;
        srcChainId: BigNumber;
        dstChainId: BigNumber;
        nonce: BigNumber;
        maxSlippage: number;
        message: string;
      }
    >;

    "ReceiverUpdated(address)"(
      receiver?: null
    ): TypedEventFilter<[string], { receiver: string }>;

    ReceiverUpdated(
      receiver?: null
    ): TypedEventFilter<[string], { receiver: string }>;

    "SrcChainRechargeUpdated(address)"(
      recharge?: null
    ): TypedEventFilter<[string], { recharge: string }>;

    SrcChainRechargeUpdated(
      recharge?: null
    ): TypedEventFilter<[string], { recharge: string }>;
  };

  estimateGas: {
    calcFee(message: BytesLike, overrides?: CallOverrides): Promise<BigNumber>;

    dstChainId(overrides?: CallOverrides): Promise<BigNumber>;

    messageId(
      route: {
        sender: string;
        receiver: string;
        srcChainId: BigNumberish;
        srcTxHash: BytesLike;
      },
      dstChainId: BigNumberish,
      message: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    receiver(overrides?: CallOverrides): Promise<BigNumber>;

    sendMessageWithTransfer(
      token: string,
      amount: BigNumberish,
      nonce: BigNumberish,
      maxSlippage: BigNumberish,
      message: BytesLike,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    calcFee(
      message: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    dstChainId(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    messageId(
      route: {
        sender: string;
        receiver: string;
        srcChainId: BigNumberish;
        srcTxHash: BytesLike;
      },
      dstChainId: BigNumberish,
      message: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    receiver(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    sendMessageWithTransfer(
      token: string,
      amount: BigNumberish,
      nonce: BigNumberish,
      maxSlippage: BigNumberish,
      message: BytesLike,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;
  };
}
