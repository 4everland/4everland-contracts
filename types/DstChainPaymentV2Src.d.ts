/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction,
  BaseContract,
  ContractTransaction,
  Overrides,
  CallOverrides,
} from "ethers";
import { BytesLike } from "@ethersproject/bytes";
import { Listener, Provider } from "@ethersproject/providers";
import { FunctionFragment, EventFragment, Result } from "@ethersproject/abi";
import type { TypedEventFilter, TypedEvent, TypedListener } from "./common";

interface DstChainPaymentV2SrcInterface extends ethers.utils.Interface {
  functions: {
    "addPauser(address)": FunctionFragment;
    "balanceOf(address)": FunctionFragment;
    "celerExec(bytes)": FunctionFragment;
    "decodeMessage(bytes)": FunctionFragment;
    "fee(address,bytes32)": FunctionFragment;
    "getAmountOf(address,uint8,uint256)": FunctionFragment;
    "getValueOf(address,uint8,uint256)": FunctionFragment;
    "hashTypedDataV4ForVoucher(address,bytes32,uint256,uint256)": FunctionFragment;
    "hashVoucherTypes(address,bytes32,uint256,uint256)": FunctionFragment;
    "initializeEIP712(string,string,string)": FunctionFragment;
    "ipfsAllocations(address,bytes32,uint256,uint256)": FunctionFragment;
    "ipfsAlloctionsFee(address,bytes32,uint256,uint256)": FunctionFragment;
    "isPauser(address)": FunctionFragment;
    "owner()": FunctionFragment;
    "ownerWithdrawERC20(address,address,uint256)": FunctionFragment;
    "ownerWithdrawNative(address,uint256)": FunctionFragment;
    "pause()": FunctionFragment;
    "paused()": FunctionFragment;
    "pausers(address)": FunctionFragment;
    "pay(address,bytes32,tuple[],uint256,uint256,bytes)": FunctionFragment;
    "paySrc(uint64,bytes32,bytes32,tuple[],uint256,uint256,bytes)": FunctionFragment;
    "payWithRegistration(address,bytes32,tuple[],uint256,uint256,bytes,bytes)": FunctionFragment;
    "priceOf(address,uint8)": FunctionFragment;
    "providerBalance(address)": FunctionFragment;
    "removePauser(address)": FunctionFragment;
    "renounceOwnership()": FunctionFragment;
    "renouncePauser()": FunctionFragment;
    "router()": FunctionFragment;
    "transferOwnership(address)": FunctionFragment;
    "unpause()": FunctionFragment;
    "voucherTypedHash()": FunctionFragment;
    "vouchers(address,uint256)": FunctionFragment;
  };

  encodeFunctionData(functionFragment: "addPauser", values: [string]): string;
  encodeFunctionData(functionFragment: "balanceOf", values: [string]): string;
  encodeFunctionData(
    functionFragment: "celerExec",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "decodeMessage",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "fee",
    values: [string, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "getAmountOf",
    values: [string, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getValueOf",
    values: [string, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "hashTypedDataV4ForVoucher",
    values: [string, BytesLike, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "hashVoucherTypes",
    values: [string, BytesLike, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "initializeEIP712",
    values: [string, string, string]
  ): string;
  encodeFunctionData(
    functionFragment: "ipfsAllocations",
    values: [string, BytesLike, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "ipfsAlloctionsFee",
    values: [string, BytesLike, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "isPauser", values: [string]): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "ownerWithdrawERC20",
    values: [string, string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "ownerWithdrawNative",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "pause", values?: undefined): string;
  encodeFunctionData(functionFragment: "paused", values?: undefined): string;
  encodeFunctionData(functionFragment: "pausers", values: [string]): string;
  encodeFunctionData(
    functionFragment: "pay",
    values: [
      string,
      BytesLike,
      { resourceType: BigNumberish; values: BigNumberish[] }[],
      BigNumberish,
      BigNumberish,
      BytesLike
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "paySrc",
    values: [
      BigNumberish,
      BytesLike,
      BytesLike,
      { resourceType: BigNumberish; values: BigNumberish[] }[],
      BigNumberish,
      BigNumberish,
      BytesLike
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "payWithRegistration",
    values: [
      string,
      BytesLike,
      { resourceType: BigNumberish; values: BigNumberish[] }[],
      BigNumberish,
      BigNumberish,
      BytesLike,
      BytesLike
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "priceOf",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "providerBalance",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "removePauser",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "renounceOwnership",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "renouncePauser",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "router", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "transferOwnership",
    values: [string]
  ): string;
  encodeFunctionData(functionFragment: "unpause", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "voucherTypedHash",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "vouchers",
    values: [string, BigNumberish]
  ): string;

  decodeFunctionResult(functionFragment: "addPauser", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "balanceOf", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "celerExec", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "decodeMessage",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "fee", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getAmountOf",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "getValueOf", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "hashTypedDataV4ForVoucher",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "hashVoucherTypes",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "initializeEIP712",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "ipfsAllocations",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "ipfsAlloctionsFee",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "isPauser", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "ownerWithdrawERC20",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "ownerWithdrawNative",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "pause", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "paused", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "pausers", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "pay", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "paySrc", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "payWithRegistration",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "priceOf", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "providerBalance",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "removePauser",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "renounceOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "renouncePauser",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "router", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "transferOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "unpause", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "voucherTypedHash",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "vouchers", data: BytesLike): Result;

  events: {
    "Initialized(uint8)": EventFragment;
    "NativeWithdrawal(address,uint256)": EventFragment;
    "OwnershipTransferred(address,address)": EventFragment;
    "Paid(address,bytes32,tuple[],uint256,uint256,uint256)": EventFragment;
    "PaidSrc(uint64,bytes32,address,bytes32,tuple[],uint256,uint256,uint256)": EventFragment;
    "Paused(address)": EventFragment;
    "PauserAdded(address)": EventFragment;
    "PauserRemoved(address)": EventFragment;
    "RouterUpdated(address)": EventFragment;
    "Unpaused(address)": EventFragment;
    "Withdrawal(address,address,uint256)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "Initialized"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "NativeWithdrawal"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "OwnershipTransferred"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Paid"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "PaidSrc"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Paused"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "PauserAdded"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "PauserRemoved"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "RouterUpdated"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Unpaused"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Withdrawal"): EventFragment;
}

export type InitializedEvent = TypedEvent<[number] & { version: number }>;

export type NativeWithdrawalEvent = TypedEvent<
  [string, BigNumber] & { to: string; value: BigNumber }
>;

export type OwnershipTransferredEvent = TypedEvent<
  [string, string] & { previousOwner: string; newOwner: string }
>;

export type PaidEvent = TypedEvent<
  [
    string,
    string,
    ([number, BigNumber[]] & { resourceType: number; values: BigNumber[] })[],
    BigNumber,
    BigNumber,
    BigNumber
  ] & {
    provider: string;
    account: string;
    payloads: ([number, BigNumber[]] & {
      resourceType: number;
      values: BigNumber[];
    })[];
    value: BigNumber;
    nonce: BigNumber;
    amount: BigNumber;
  }
>;

export type PaidSrcEvent = TypedEvent<
  [
    BigNumber,
    string,
    string,
    string,
    ([number, BigNumber[]] & { resourceType: number; values: BigNumber[] })[],
    BigNumber,
    BigNumber,
    BigNumber
  ] & {
    srcChainId: BigNumber;
    srcTxHash: string;
    provider: string;
    account: string;
    payloads: ([number, BigNumber[]] & {
      resourceType: number;
      values: BigNumber[];
    })[];
    value: BigNumber;
    nonce: BigNumber;
    amount: BigNumber;
  }
>;

export type PausedEvent = TypedEvent<[string] & { account: string }>;

export type PauserAddedEvent = TypedEvent<[string] & { account: string }>;

export type PauserRemovedEvent = TypedEvent<[string] & { account: string }>;

export type RouterUpdatedEvent = TypedEvent<[string] & { router: string }>;

export type UnpausedEvent = TypedEvent<[string] & { account: string }>;

export type WithdrawalEvent = TypedEvent<
  [string, string, BigNumber] & { token: string; to: string; value: BigNumber }
>;

export class DstChainPaymentV2Src extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  listeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter?: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): Array<TypedListener<EventArgsArray, EventArgsObject>>;
  off<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  on<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  once<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeListener<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeAllListeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): this;

  listeners(eventName?: string): Array<Listener>;
  off(eventName: string, listener: Listener): this;
  on(eventName: string, listener: Listener): this;
  once(eventName: string, listener: Listener): this;
  removeListener(eventName: string, listener: Listener): this;
  removeAllListeners(eventName?: string): this;

  queryFilter<EventArgsArray extends Array<any>, EventArgsObject>(
    event: TypedEventFilter<EventArgsArray, EventArgsObject>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEvent<EventArgsArray & EventArgsObject>>>;

  interface: DstChainPaymentV2SrcInterface;

  functions: {
    addPauser(
      account: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    balanceOf(
      provider: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    celerExec(
      message: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    decodeMessage(
      message: BytesLike,
      overrides?: CallOverrides
    ): Promise<
      [
        string,
        string,
        ([number, BigNumber[]] & {
          resourceType: number;
          values: BigNumber[];
        })[],
        BigNumber,
        BigNumber,
        string
      ] & {
        provider: string;
        account: string;
        payloads: ([number, BigNumber[]] & {
          resourceType: number;
          values: BigNumber[];
        })[];
        nonce: BigNumber;
        amount: BigNumber;
        signature: string;
      }
    >;

    fee(
      provider: string,
      account: BytesLike,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    getAmountOf(
      provider: string,
      resourceType: BigNumberish,
      value: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    getValueOf(
      provider: string,
      resourceType: BigNumberish,
      amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    hashTypedDataV4ForVoucher(
      provider: string,
      account: BytesLike,
      nonce: BigNumberish,
      amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[string]>;

    hashVoucherTypes(
      provider: string,
      account: BytesLike,
      nonce: BigNumberish,
      amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[string]>;

    initializeEIP712(
      name: string,
      version: string,
      types: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    ipfsAllocations(
      provider: string,
      account: BytesLike,
      storageFee: BigNumberish,
      expirationFee: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber] & { amount: BigNumber; expiration: BigNumber }
    >;

    ipfsAlloctionsFee(
      provider: string,
      account: BytesLike,
      amount: BigNumberish,
      expiration: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber] & {
        storageFee: BigNumber;
        expirationFee: BigNumber;
      }
    >;

    isPauser(account: string, overrides?: CallOverrides): Promise<[boolean]>;

    owner(overrides?: CallOverrides): Promise<[string]>;

    ownerWithdrawERC20(
      token: string,
      to: string,
      value: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    ownerWithdrawNative(
      to: string,
      value: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    pause(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    paused(overrides?: CallOverrides): Promise<[boolean]>;

    pausers(arg0: string, overrides?: CallOverrides): Promise<[boolean]>;

    pay(
      provider: string,
      account: BytesLike,
      payloads: { resourceType: BigNumberish; values: BigNumberish[] }[],
      nonce: BigNumberish,
      amount: BigNumberish,
      signature: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    paySrc(
      srcChainId: BigNumberish,
      srcTxHash: BytesLike,
      account: BytesLike,
      payloads: { resourceType: BigNumberish; values: BigNumberish[] }[],
      nonce: BigNumberish,
      amount: BigNumberish,
      voucherSig: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    payWithRegistration(
      provider: string,
      account: BytesLike,
      payloads: { resourceType: BigNumberish; values: BigNumberish[] }[],
      nonce: BigNumberish,
      amount: BigNumberish,
      voucherSig: BytesLike,
      registrationSig: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    priceOf(
      provider: string,
      resourceType: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    providerBalance(
      provider: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    removePauser(
      account: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    renounceOwnership(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    renouncePauser(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    router(overrides?: CallOverrides): Promise<[string]>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    unpause(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    voucherTypedHash(overrides?: CallOverrides): Promise<[string]>;

    vouchers(
      arg0: string,
      arg1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;
  };

  addPauser(
    account: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  balanceOf(provider: string, overrides?: CallOverrides): Promise<BigNumber>;

  celerExec(
    message: BytesLike,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  decodeMessage(
    message: BytesLike,
    overrides?: CallOverrides
  ): Promise<
    [
      string,
      string,
      ([number, BigNumber[]] & { resourceType: number; values: BigNumber[] })[],
      BigNumber,
      BigNumber,
      string
    ] & {
      provider: string;
      account: string;
      payloads: ([number, BigNumber[]] & {
        resourceType: number;
        values: BigNumber[];
      })[];
      nonce: BigNumber;
      amount: BigNumber;
      signature: string;
    }
  >;

  fee(
    provider: string,
    account: BytesLike,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  getAmountOf(
    provider: string,
    resourceType: BigNumberish,
    value: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  getValueOf(
    provider: string,
    resourceType: BigNumberish,
    amount: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  hashTypedDataV4ForVoucher(
    provider: string,
    account: BytesLike,
    nonce: BigNumberish,
    amount: BigNumberish,
    overrides?: CallOverrides
  ): Promise<string>;

  hashVoucherTypes(
    provider: string,
    account: BytesLike,
    nonce: BigNumberish,
    amount: BigNumberish,
    overrides?: CallOverrides
  ): Promise<string>;

  initializeEIP712(
    name: string,
    version: string,
    types: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  ipfsAllocations(
    provider: string,
    account: BytesLike,
    storageFee: BigNumberish,
    expirationFee: BigNumberish,
    overrides?: CallOverrides
  ): Promise<
    [BigNumber, BigNumber] & { amount: BigNumber; expiration: BigNumber }
  >;

  ipfsAlloctionsFee(
    provider: string,
    account: BytesLike,
    amount: BigNumberish,
    expiration: BigNumberish,
    overrides?: CallOverrides
  ): Promise<
    [BigNumber, BigNumber] & { storageFee: BigNumber; expirationFee: BigNumber }
  >;

  isPauser(account: string, overrides?: CallOverrides): Promise<boolean>;

  owner(overrides?: CallOverrides): Promise<string>;

  ownerWithdrawERC20(
    token: string,
    to: string,
    value: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  ownerWithdrawNative(
    to: string,
    value: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  pause(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  paused(overrides?: CallOverrides): Promise<boolean>;

  pausers(arg0: string, overrides?: CallOverrides): Promise<boolean>;

  pay(
    provider: string,
    account: BytesLike,
    payloads: { resourceType: BigNumberish; values: BigNumberish[] }[],
    nonce: BigNumberish,
    amount: BigNumberish,
    signature: BytesLike,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  paySrc(
    srcChainId: BigNumberish,
    srcTxHash: BytesLike,
    account: BytesLike,
    payloads: { resourceType: BigNumberish; values: BigNumberish[] }[],
    nonce: BigNumberish,
    amount: BigNumberish,
    voucherSig: BytesLike,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  payWithRegistration(
    provider: string,
    account: BytesLike,
    payloads: { resourceType: BigNumberish; values: BigNumberish[] }[],
    nonce: BigNumberish,
    amount: BigNumberish,
    voucherSig: BytesLike,
    registrationSig: BytesLike,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  priceOf(
    provider: string,
    resourceType: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  providerBalance(
    provider: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  removePauser(
    account: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  renounceOwnership(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  renouncePauser(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  router(overrides?: CallOverrides): Promise<string>;

  transferOwnership(
    newOwner: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  unpause(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  voucherTypedHash(overrides?: CallOverrides): Promise<string>;

  vouchers(
    arg0: string,
    arg1: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  callStatic: {
    addPauser(account: string, overrides?: CallOverrides): Promise<void>;

    balanceOf(provider: string, overrides?: CallOverrides): Promise<BigNumber>;

    celerExec(message: BytesLike, overrides?: CallOverrides): Promise<void>;

    decodeMessage(
      message: BytesLike,
      overrides?: CallOverrides
    ): Promise<
      [
        string,
        string,
        ([number, BigNumber[]] & {
          resourceType: number;
          values: BigNumber[];
        })[],
        BigNumber,
        BigNumber,
        string
      ] & {
        provider: string;
        account: string;
        payloads: ([number, BigNumber[]] & {
          resourceType: number;
          values: BigNumber[];
        })[];
        nonce: BigNumber;
        amount: BigNumber;
        signature: string;
      }
    >;

    fee(
      provider: string,
      account: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getAmountOf(
      provider: string,
      resourceType: BigNumberish,
      value: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getValueOf(
      provider: string,
      resourceType: BigNumberish,
      amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    hashTypedDataV4ForVoucher(
      provider: string,
      account: BytesLike,
      nonce: BigNumberish,
      amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<string>;

    hashVoucherTypes(
      provider: string,
      account: BytesLike,
      nonce: BigNumberish,
      amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<string>;

    initializeEIP712(
      name: string,
      version: string,
      types: string,
      overrides?: CallOverrides
    ): Promise<void>;

    ipfsAllocations(
      provider: string,
      account: BytesLike,
      storageFee: BigNumberish,
      expirationFee: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber] & { amount: BigNumber; expiration: BigNumber }
    >;

    ipfsAlloctionsFee(
      provider: string,
      account: BytesLike,
      amount: BigNumberish,
      expiration: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber] & {
        storageFee: BigNumber;
        expirationFee: BigNumber;
      }
    >;

    isPauser(account: string, overrides?: CallOverrides): Promise<boolean>;

    owner(overrides?: CallOverrides): Promise<string>;

    ownerWithdrawERC20(
      token: string,
      to: string,
      value: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    ownerWithdrawNative(
      to: string,
      value: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    pause(overrides?: CallOverrides): Promise<void>;

    paused(overrides?: CallOverrides): Promise<boolean>;

    pausers(arg0: string, overrides?: CallOverrides): Promise<boolean>;

    pay(
      provider: string,
      account: BytesLike,
      payloads: { resourceType: BigNumberish; values: BigNumberish[] }[],
      nonce: BigNumberish,
      amount: BigNumberish,
      signature: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    paySrc(
      srcChainId: BigNumberish,
      srcTxHash: BytesLike,
      account: BytesLike,
      payloads: { resourceType: BigNumberish; values: BigNumberish[] }[],
      nonce: BigNumberish,
      amount: BigNumberish,
      voucherSig: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    payWithRegistration(
      provider: string,
      account: BytesLike,
      payloads: { resourceType: BigNumberish; values: BigNumberish[] }[],
      nonce: BigNumberish,
      amount: BigNumberish,
      voucherSig: BytesLike,
      registrationSig: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    priceOf(
      provider: string,
      resourceType: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    providerBalance(
      provider: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    removePauser(account: string, overrides?: CallOverrides): Promise<void>;

    renounceOwnership(overrides?: CallOverrides): Promise<void>;

    renouncePauser(overrides?: CallOverrides): Promise<void>;

    router(overrides?: CallOverrides): Promise<string>;

    transferOwnership(
      newOwner: string,
      overrides?: CallOverrides
    ): Promise<void>;

    unpause(overrides?: CallOverrides): Promise<void>;

    voucherTypedHash(overrides?: CallOverrides): Promise<string>;

    vouchers(
      arg0: string,
      arg1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;
  };

  filters: {
    "Initialized(uint8)"(
      version?: null
    ): TypedEventFilter<[number], { version: number }>;

    Initialized(
      version?: null
    ): TypedEventFilter<[number], { version: number }>;

    "NativeWithdrawal(address,uint256)"(
      to?: null,
      value?: null
    ): TypedEventFilter<[string, BigNumber], { to: string; value: BigNumber }>;

    NativeWithdrawal(
      to?: null,
      value?: null
    ): TypedEventFilter<[string, BigNumber], { to: string; value: BigNumber }>;

    "OwnershipTransferred(address,address)"(
      previousOwner?: string | null,
      newOwner?: string | null
    ): TypedEventFilter<
      [string, string],
      { previousOwner: string; newOwner: string }
    >;

    OwnershipTransferred(
      previousOwner?: string | null,
      newOwner?: string | null
    ): TypedEventFilter<
      [string, string],
      { previousOwner: string; newOwner: string }
    >;

    "Paid(address,bytes32,tuple[],uint256,uint256,uint256)"(
      provider?: null,
      account?: null,
      payloads?: null,
      value?: null,
      nonce?: null,
      amount?: null
    ): TypedEventFilter<
      [
        string,
        string,
        ([number, BigNumber[]] & {
          resourceType: number;
          values: BigNumber[];
        })[],
        BigNumber,
        BigNumber,
        BigNumber
      ],
      {
        provider: string;
        account: string;
        payloads: ([number, BigNumber[]] & {
          resourceType: number;
          values: BigNumber[];
        })[];
        value: BigNumber;
        nonce: BigNumber;
        amount: BigNumber;
      }
    >;

    Paid(
      provider?: null,
      account?: null,
      payloads?: null,
      value?: null,
      nonce?: null,
      amount?: null
    ): TypedEventFilter<
      [
        string,
        string,
        ([number, BigNumber[]] & {
          resourceType: number;
          values: BigNumber[];
        })[],
        BigNumber,
        BigNumber,
        BigNumber
      ],
      {
        provider: string;
        account: string;
        payloads: ([number, BigNumber[]] & {
          resourceType: number;
          values: BigNumber[];
        })[];
        value: BigNumber;
        nonce: BigNumber;
        amount: BigNumber;
      }
    >;

    "PaidSrc(uint64,bytes32,address,bytes32,tuple[],uint256,uint256,uint256)"(
      srcChainId?: null,
      srcTxHash?: null,
      provider?: null,
      account?: null,
      payloads?: null,
      value?: null,
      nonce?: null,
      amount?: null
    ): TypedEventFilter<
      [
        BigNumber,
        string,
        string,
        string,
        ([number, BigNumber[]] & {
          resourceType: number;
          values: BigNumber[];
        })[],
        BigNumber,
        BigNumber,
        BigNumber
      ],
      {
        srcChainId: BigNumber;
        srcTxHash: string;
        provider: string;
        account: string;
        payloads: ([number, BigNumber[]] & {
          resourceType: number;
          values: BigNumber[];
        })[];
        value: BigNumber;
        nonce: BigNumber;
        amount: BigNumber;
      }
    >;

    PaidSrc(
      srcChainId?: null,
      srcTxHash?: null,
      provider?: null,
      account?: null,
      payloads?: null,
      value?: null,
      nonce?: null,
      amount?: null
    ): TypedEventFilter<
      [
        BigNumber,
        string,
        string,
        string,
        ([number, BigNumber[]] & {
          resourceType: number;
          values: BigNumber[];
        })[],
        BigNumber,
        BigNumber,
        BigNumber
      ],
      {
        srcChainId: BigNumber;
        srcTxHash: string;
        provider: string;
        account: string;
        payloads: ([number, BigNumber[]] & {
          resourceType: number;
          values: BigNumber[];
        })[];
        value: BigNumber;
        nonce: BigNumber;
        amount: BigNumber;
      }
    >;

    "Paused(address)"(
      account?: null
    ): TypedEventFilter<[string], { account: string }>;

    Paused(account?: null): TypedEventFilter<[string], { account: string }>;

    "PauserAdded(address)"(
      account?: null
    ): TypedEventFilter<[string], { account: string }>;

    PauserAdded(
      account?: null
    ): TypedEventFilter<[string], { account: string }>;

    "PauserRemoved(address)"(
      account?: null
    ): TypedEventFilter<[string], { account: string }>;

    PauserRemoved(
      account?: null
    ): TypedEventFilter<[string], { account: string }>;

    "RouterUpdated(address)"(
      router?: null
    ): TypedEventFilter<[string], { router: string }>;

    RouterUpdated(
      router?: null
    ): TypedEventFilter<[string], { router: string }>;

    "Unpaused(address)"(
      account?: null
    ): TypedEventFilter<[string], { account: string }>;

    Unpaused(account?: null): TypedEventFilter<[string], { account: string }>;

    "Withdrawal(address,address,uint256)"(
      token?: null,
      to?: null,
      value?: null
    ): TypedEventFilter<
      [string, string, BigNumber],
      { token: string; to: string; value: BigNumber }
    >;

    Withdrawal(
      token?: null,
      to?: null,
      value?: null
    ): TypedEventFilter<
      [string, string, BigNumber],
      { token: string; to: string; value: BigNumber }
    >;
  };

  estimateGas: {
    addPauser(
      account: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    balanceOf(provider: string, overrides?: CallOverrides): Promise<BigNumber>;

    celerExec(
      message: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    decodeMessage(
      message: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    fee(
      provider: string,
      account: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getAmountOf(
      provider: string,
      resourceType: BigNumberish,
      value: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getValueOf(
      provider: string,
      resourceType: BigNumberish,
      amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    hashTypedDataV4ForVoucher(
      provider: string,
      account: BytesLike,
      nonce: BigNumberish,
      amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    hashVoucherTypes(
      provider: string,
      account: BytesLike,
      nonce: BigNumberish,
      amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    initializeEIP712(
      name: string,
      version: string,
      types: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    ipfsAllocations(
      provider: string,
      account: BytesLike,
      storageFee: BigNumberish,
      expirationFee: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    ipfsAlloctionsFee(
      provider: string,
      account: BytesLike,
      amount: BigNumberish,
      expiration: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    isPauser(account: string, overrides?: CallOverrides): Promise<BigNumber>;

    owner(overrides?: CallOverrides): Promise<BigNumber>;

    ownerWithdrawERC20(
      token: string,
      to: string,
      value: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    ownerWithdrawNative(
      to: string,
      value: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    pause(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    paused(overrides?: CallOverrides): Promise<BigNumber>;

    pausers(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

    pay(
      provider: string,
      account: BytesLike,
      payloads: { resourceType: BigNumberish; values: BigNumberish[] }[],
      nonce: BigNumberish,
      amount: BigNumberish,
      signature: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    paySrc(
      srcChainId: BigNumberish,
      srcTxHash: BytesLike,
      account: BytesLike,
      payloads: { resourceType: BigNumberish; values: BigNumberish[] }[],
      nonce: BigNumberish,
      amount: BigNumberish,
      voucherSig: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    payWithRegistration(
      provider: string,
      account: BytesLike,
      payloads: { resourceType: BigNumberish; values: BigNumberish[] }[],
      nonce: BigNumberish,
      amount: BigNumberish,
      voucherSig: BytesLike,
      registrationSig: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    priceOf(
      provider: string,
      resourceType: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    providerBalance(
      provider: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    removePauser(
      account: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    renounceOwnership(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    renouncePauser(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    router(overrides?: CallOverrides): Promise<BigNumber>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    unpause(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    voucherTypedHash(overrides?: CallOverrides): Promise<BigNumber>;

    vouchers(
      arg0: string,
      arg1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    addPauser(
      account: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    balanceOf(
      provider: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    celerExec(
      message: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    decodeMessage(
      message: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    fee(
      provider: string,
      account: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getAmountOf(
      provider: string,
      resourceType: BigNumberish,
      value: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getValueOf(
      provider: string,
      resourceType: BigNumberish,
      amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    hashTypedDataV4ForVoucher(
      provider: string,
      account: BytesLike,
      nonce: BigNumberish,
      amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    hashVoucherTypes(
      provider: string,
      account: BytesLike,
      nonce: BigNumberish,
      amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    initializeEIP712(
      name: string,
      version: string,
      types: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    ipfsAllocations(
      provider: string,
      account: BytesLike,
      storageFee: BigNumberish,
      expirationFee: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    ipfsAlloctionsFee(
      provider: string,
      account: BytesLike,
      amount: BigNumberish,
      expiration: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    isPauser(
      account: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    owner(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    ownerWithdrawERC20(
      token: string,
      to: string,
      value: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    ownerWithdrawNative(
      to: string,
      value: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    pause(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    paused(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    pausers(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    pay(
      provider: string,
      account: BytesLike,
      payloads: { resourceType: BigNumberish; values: BigNumberish[] }[],
      nonce: BigNumberish,
      amount: BigNumberish,
      signature: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    paySrc(
      srcChainId: BigNumberish,
      srcTxHash: BytesLike,
      account: BytesLike,
      payloads: { resourceType: BigNumberish; values: BigNumberish[] }[],
      nonce: BigNumberish,
      amount: BigNumberish,
      voucherSig: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    payWithRegistration(
      provider: string,
      account: BytesLike,
      payloads: { resourceType: BigNumberish; values: BigNumberish[] }[],
      nonce: BigNumberish,
      amount: BigNumberish,
      voucherSig: BytesLike,
      registrationSig: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    priceOf(
      provider: string,
      resourceType: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    providerBalance(
      provider: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    removePauser(
      account: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    renounceOwnership(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    renouncePauser(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    router(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    unpause(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    voucherTypedHash(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    vouchers(
      arg0: string,
      arg1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;
  };
}
